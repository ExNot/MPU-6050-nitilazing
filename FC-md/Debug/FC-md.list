
FC-md.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000561c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080057b8  080057b8  000157b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059b0  080059b0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080059b0  080059b0  000159b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059b8  080059b8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059b8  080059b8  000159b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059bc  080059bc  000159bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080059c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000074  08005a34  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08005a34  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b141  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015f2  00000000  00000000  0002b1e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0002c7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000870  00000000  00000000  0002d098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ae2  00000000  00000000  0002d908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b553  00000000  00000000  000433ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087c93  00000000  00000000  0004e93d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d65d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029c8  00000000  00000000  000d6624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800579c 	.word	0x0800579c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	0800579c 	.word	0x0800579c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b96e 	b.w	8000e94 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	468c      	mov	ip, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f040 8083 	bne.w	8000ce6 <__udivmoddi4+0x116>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d947      	bls.n	8000c76 <__udivmoddi4+0xa6>
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	b142      	cbz	r2, 8000bfe <__udivmoddi4+0x2e>
 8000bec:	f1c2 0020 	rsb	r0, r2, #32
 8000bf0:	fa24 f000 	lsr.w	r0, r4, r0
 8000bf4:	4091      	lsls	r1, r2
 8000bf6:	4097      	lsls	r7, r2
 8000bf8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bfc:	4094      	lsls	r4, r2
 8000bfe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c02:	0c23      	lsrs	r3, r4, #16
 8000c04:	fbbc f6f8 	udiv	r6, ip, r8
 8000c08:	fa1f fe87 	uxth.w	lr, r7
 8000c0c:	fb08 c116 	mls	r1, r8, r6, ip
 8000c10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c14:	fb06 f10e 	mul.w	r1, r6, lr
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x60>
 8000c1c:	18fb      	adds	r3, r7, r3
 8000c1e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c22:	f080 8119 	bcs.w	8000e58 <__udivmoddi4+0x288>
 8000c26:	4299      	cmp	r1, r3
 8000c28:	f240 8116 	bls.w	8000e58 <__udivmoddi4+0x288>
 8000c2c:	3e02      	subs	r6, #2
 8000c2e:	443b      	add	r3, r7
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c38:	fb08 3310 	mls	r3, r8, r0, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c44:	45a6      	cmp	lr, r4
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x8c>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	f080 8105 	bcs.w	8000e5c <__udivmoddi4+0x28c>
 8000c52:	45a6      	cmp	lr, r4
 8000c54:	f240 8102 	bls.w	8000e5c <__udivmoddi4+0x28c>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	443c      	add	r4, r7
 8000c5c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c60:	eba4 040e 	sub.w	r4, r4, lr
 8000c64:	2600      	movs	r6, #0
 8000c66:	b11d      	cbz	r5, 8000c70 <__udivmoddi4+0xa0>
 8000c68:	40d4      	lsrs	r4, r2
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c70:	4631      	mov	r1, r6
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	b902      	cbnz	r2, 8000c7a <__udivmoddi4+0xaa>
 8000c78:	deff      	udf	#255	; 0xff
 8000c7a:	fab2 f282 	clz	r2, r2
 8000c7e:	2a00      	cmp	r2, #0
 8000c80:	d150      	bne.n	8000d24 <__udivmoddi4+0x154>
 8000c82:	1bcb      	subs	r3, r1, r7
 8000c84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c88:	fa1f f887 	uxth.w	r8, r7
 8000c8c:	2601      	movs	r6, #1
 8000c8e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c92:	0c21      	lsrs	r1, r4, #16
 8000c94:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c9c:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d907      	bls.n	8000cb4 <__udivmoddi4+0xe4>
 8000ca4:	1879      	adds	r1, r7, r1
 8000ca6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0xe2>
 8000cac:	428b      	cmp	r3, r1
 8000cae:	f200 80e9 	bhi.w	8000e84 <__udivmoddi4+0x2b4>
 8000cb2:	4684      	mov	ip, r0
 8000cb4:	1ac9      	subs	r1, r1, r3
 8000cb6:	b2a3      	uxth	r3, r4
 8000cb8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cbc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cc4:	fb08 f800 	mul.w	r8, r8, r0
 8000cc8:	45a0      	cmp	r8, r4
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0x10c>
 8000ccc:	193c      	adds	r4, r7, r4
 8000cce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x10a>
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	f200 80d9 	bhi.w	8000e8c <__udivmoddi4+0x2bc>
 8000cda:	4618      	mov	r0, r3
 8000cdc:	eba4 0408 	sub.w	r4, r4, r8
 8000ce0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ce4:	e7bf      	b.n	8000c66 <__udivmoddi4+0x96>
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d909      	bls.n	8000cfe <__udivmoddi4+0x12e>
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	f000 80b1 	beq.w	8000e52 <__udivmoddi4+0x282>
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf6:	4630      	mov	r0, r6
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	fab3 f683 	clz	r6, r3
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d14a      	bne.n	8000d9c <__udivmoddi4+0x1cc>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d302      	bcc.n	8000d10 <__udivmoddi4+0x140>
 8000d0a:	4282      	cmp	r2, r0
 8000d0c:	f200 80b8 	bhi.w	8000e80 <__udivmoddi4+0x2b0>
 8000d10:	1a84      	subs	r4, r0, r2
 8000d12:	eb61 0103 	sbc.w	r1, r1, r3
 8000d16:	2001      	movs	r0, #1
 8000d18:	468c      	mov	ip, r1
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d0a8      	beq.n	8000c70 <__udivmoddi4+0xa0>
 8000d1e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000d24:	f1c2 0320 	rsb	r3, r2, #32
 8000d28:	fa20 f603 	lsr.w	r6, r0, r3
 8000d2c:	4097      	lsls	r7, r2
 8000d2e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d32:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d36:	40d9      	lsrs	r1, r3
 8000d38:	4330      	orrs	r0, r6
 8000d3a:	0c03      	lsrs	r3, r0, #16
 8000d3c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4c:	fb06 f108 	mul.w	r1, r6, r8
 8000d50:	4299      	cmp	r1, r3
 8000d52:	fa04 f402 	lsl.w	r4, r4, r2
 8000d56:	d909      	bls.n	8000d6c <__udivmoddi4+0x19c>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d5e:	f080 808d 	bcs.w	8000e7c <__udivmoddi4+0x2ac>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 808a 	bls.w	8000e7c <__udivmoddi4+0x2ac>
 8000d68:	3e02      	subs	r6, #2
 8000d6a:	443b      	add	r3, r7
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	b281      	uxth	r1, r0
 8000d70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7c:	fb00 f308 	mul.w	r3, r0, r8
 8000d80:	428b      	cmp	r3, r1
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x1c4>
 8000d84:	1879      	adds	r1, r7, r1
 8000d86:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d8a:	d273      	bcs.n	8000e74 <__udivmoddi4+0x2a4>
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d971      	bls.n	8000e74 <__udivmoddi4+0x2a4>
 8000d90:	3802      	subs	r0, #2
 8000d92:	4439      	add	r1, r7
 8000d94:	1acb      	subs	r3, r1, r3
 8000d96:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d9a:	e778      	b.n	8000c8e <__udivmoddi4+0xbe>
 8000d9c:	f1c6 0c20 	rsb	ip, r6, #32
 8000da0:	fa03 f406 	lsl.w	r4, r3, r6
 8000da4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000da8:	431c      	orrs	r4, r3
 8000daa:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dae:	fa01 f306 	lsl.w	r3, r1, r6
 8000db2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000db6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dba:	431f      	orrs	r7, r3
 8000dbc:	0c3b      	lsrs	r3, r7, #16
 8000dbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dc2:	fa1f f884 	uxth.w	r8, r4
 8000dc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dce:	fb09 fa08 	mul.w	sl, r9, r8
 8000dd2:	458a      	cmp	sl, r1
 8000dd4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd8:	fa00 f306 	lsl.w	r3, r0, r6
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x220>
 8000dde:	1861      	adds	r1, r4, r1
 8000de0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000de4:	d248      	bcs.n	8000e78 <__udivmoddi4+0x2a8>
 8000de6:	458a      	cmp	sl, r1
 8000de8:	d946      	bls.n	8000e78 <__udivmoddi4+0x2a8>
 8000dea:	f1a9 0902 	sub.w	r9, r9, #2
 8000dee:	4421      	add	r1, r4
 8000df0:	eba1 010a 	sub.w	r1, r1, sl
 8000df4:	b2bf      	uxth	r7, r7
 8000df6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dfa:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dfe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e02:	fb00 f808 	mul.w	r8, r0, r8
 8000e06:	45b8      	cmp	r8, r7
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x24a>
 8000e0a:	19e7      	adds	r7, r4, r7
 8000e0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e10:	d22e      	bcs.n	8000e70 <__udivmoddi4+0x2a0>
 8000e12:	45b8      	cmp	r8, r7
 8000e14:	d92c      	bls.n	8000e70 <__udivmoddi4+0x2a0>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4427      	add	r7, r4
 8000e1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e1e:	eba7 0708 	sub.w	r7, r7, r8
 8000e22:	fba0 8902 	umull	r8, r9, r0, r2
 8000e26:	454f      	cmp	r7, r9
 8000e28:	46c6      	mov	lr, r8
 8000e2a:	4649      	mov	r1, r9
 8000e2c:	d31a      	bcc.n	8000e64 <__udivmoddi4+0x294>
 8000e2e:	d017      	beq.n	8000e60 <__udivmoddi4+0x290>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x27a>
 8000e32:	ebb3 020e 	subs.w	r2, r3, lr
 8000e36:	eb67 0701 	sbc.w	r7, r7, r1
 8000e3a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e3e:	40f2      	lsrs	r2, r6
 8000e40:	ea4c 0202 	orr.w	r2, ip, r2
 8000e44:	40f7      	lsrs	r7, r6
 8000e46:	e9c5 2700 	strd	r2, r7, [r5]
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e70b      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e9      	b.n	8000c30 <__udivmoddi4+0x60>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6fd      	b.n	8000c5c <__udivmoddi4+0x8c>
 8000e60:	4543      	cmp	r3, r8
 8000e62:	d2e5      	bcs.n	8000e30 <__udivmoddi4+0x260>
 8000e64:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e68:	eb69 0104 	sbc.w	r1, r9, r4
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7df      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e70:	4608      	mov	r0, r1
 8000e72:	e7d2      	b.n	8000e1a <__udivmoddi4+0x24a>
 8000e74:	4660      	mov	r0, ip
 8000e76:	e78d      	b.n	8000d94 <__udivmoddi4+0x1c4>
 8000e78:	4681      	mov	r9, r0
 8000e7a:	e7b9      	b.n	8000df0 <__udivmoddi4+0x220>
 8000e7c:	4666      	mov	r6, ip
 8000e7e:	e775      	b.n	8000d6c <__udivmoddi4+0x19c>
 8000e80:	4630      	mov	r0, r6
 8000e82:	e74a      	b.n	8000d1a <__udivmoddi4+0x14a>
 8000e84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e88:	4439      	add	r1, r7
 8000e8a:	e713      	b.n	8000cb4 <__udivmoddi4+0xe4>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	443c      	add	r4, r7
 8000e90:	e724      	b.n	8000cdc <__udivmoddi4+0x10c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e9c:	b084      	sub	sp, #16
 8000e9e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea0:	f000 fe34 	bl	8001b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea4:	f000 fc14 	bl	80016d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea8:	f000 fcca 	bl	8001840 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000eac:	f000 fc70 	bl	8001790 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000eb0:	f000 fc9c 	bl	80017ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //PWR_MGMT_1_CNFG
  data = 0x00;
 8000eb4:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <main+0x84>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write (&hi2c1, MPU6050_ADRR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebe:	9302      	str	r3, [sp, #8]
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <main+0x84>)
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	226b      	movs	r2, #107	; 0x6b
 8000ecc:	21d0      	movs	r1, #208	; 0xd0
 8000ece:	4814      	ldr	r0, [pc, #80]	; (8000f20 <main+0x88>)
 8000ed0:	f001 fd9e 	bl	8002a10 <HAL_I2C_Mem_Write>
//kullanılan birimin pointer olarak döndürülmesi, cihaz slave adresi, register adresi, register
//boyutu, verinin pointer olarak döndürülmesi, verinin boyutu, zaman aşımı değeri
//Gyro_Config --> +-500 derece/saniye
  data = 0x08;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <main+0x84>)
 8000ed6:	2208      	movs	r2, #8
 8000ed8:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write (&hi2c1, MPU6050_ADRR, GYRO_CNFG_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	9302      	str	r3, [sp, #8]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	9301      	str	r3, [sp, #4]
 8000ee4:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <main+0x84>)
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	221b      	movs	r2, #27
 8000eec:	21d0      	movs	r1, #208	; 0xd0
 8000eee:	480c      	ldr	r0, [pc, #48]	; (8000f20 <main+0x88>)
 8000ef0:	f001 fd8e 	bl	8002a10 <HAL_I2C_Mem_Write>
//ACC_Config --> +-8g
  data = 0x10;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <main+0x84>)
 8000ef6:	2210      	movs	r2, #16
 8000ef8:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write (&hi2c1, MPU6050_ADRR, ACC_CNFG_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
 8000efe:	9302      	str	r3, [sp, #8]
 8000f00:	2301      	movs	r3, #1
 8000f02:	9301      	str	r3, [sp, #4]
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <main+0x84>)
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	221c      	movs	r2, #28
 8000f0c:	21d0      	movs	r1, #208	; 0xd0
 8000f0e:	4804      	ldr	r0, [pc, #16]	; (8000f20 <main+0x88>)
 8000f10:	f001 fd7e 	bl	8002a10 <HAL_I2C_Mem_Write>

  for(i=0; i<=2000; i++)
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <main+0x8c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	e08c      	b.n	8001036 <main+0x19e>
 8000f1c:	20000181 	.word	0x20000181
 8000f20:	200000b0 	.word	0x200000b0
 8000f24:	20000124 	.word	0x20000124
  {
	  prevtime2=time2;
 8000f28:	4bb3      	ldr	r3, [pc, #716]	; (80011f8 <main+0x360>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4ab3      	ldr	r2, [pc, #716]	; (80011fc <main+0x364>)
 8000f2e:	6013      	str	r3, [r2, #0]
	  time2=HAL_GetTick();
 8000f30:	f000 fe52 	bl	8001bd8 <HAL_GetTick>
 8000f34:	ee07 0a90 	vmov	s15, r0
 8000f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f3c:	4bae      	ldr	r3, [pc, #696]	; (80011f8 <main+0x360>)
 8000f3e:	edc3 7a00 	vstr	s15, [r3]
	  elapsedtime2=(time2-prevtime2)*1000;
 8000f42:	4bad      	ldr	r3, [pc, #692]	; (80011f8 <main+0x360>)
 8000f44:	ed93 7a00 	vldr	s14, [r3]
 8000f48:	4bac      	ldr	r3, [pc, #688]	; (80011fc <main+0x364>)
 8000f4a:	edd3 7a00 	vldr	s15, [r3]
 8000f4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f52:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8001200 <main+0x368>
 8000f56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f5a:	4baa      	ldr	r3, [pc, #680]	; (8001204 <main+0x36c>)
 8000f5c:	edc3 7a00 	vstr	s15, [r3]

	  cuffer[0]=0x43;
 8000f60:	4ba9      	ldr	r3, [pc, #676]	; (8001208 <main+0x370>)
 8000f62:	2243      	movs	r2, #67	; 0x43
 8000f64:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1,MPU6050_ADRR,cuffer,1,HAL_MAX_DELAY);
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	4aa6      	ldr	r2, [pc, #664]	; (8001208 <main+0x370>)
 8000f70:	21d0      	movs	r1, #208	; 0xd0
 8000f72:	48a6      	ldr	r0, [pc, #664]	; (800120c <main+0x374>)
 8000f74:	f001 fa28 	bl	80023c8 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1,MPU6050_ADRR,cuffer,6,HAL_MAX_DELAY);
 8000f78:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2306      	movs	r3, #6
 8000f80:	4aa1      	ldr	r2, [pc, #644]	; (8001208 <main+0x370>)
 8000f82:	21d0      	movs	r1, #208	; 0xd0
 8000f84:	48a1      	ldr	r0, [pc, #644]	; (800120c <main+0x374>)
 8000f86:	f001 fb1d 	bl	80025c4 <HAL_I2C_Master_Receive>

	  gyro_raw[0] = (cuffer[0] << 8 | cuffer[1]);
 8000f8a:	4b9f      	ldr	r3, [pc, #636]	; (8001208 <main+0x370>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	b21a      	sxth	r2, r3
 8000f92:	4b9d      	ldr	r3, [pc, #628]	; (8001208 <main+0x370>)
 8000f94:	785b      	ldrb	r3, [r3, #1]
 8000f96:	b21b      	sxth	r3, r3
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	b21a      	sxth	r2, r3
 8000f9c:	4b9c      	ldr	r3, [pc, #624]	; (8001210 <main+0x378>)
 8000f9e:	801a      	strh	r2, [r3, #0]
	  gyro_raw[1] = (cuffer[2] << 8 | cuffer[3]);
 8000fa0:	4b99      	ldr	r3, [pc, #612]	; (8001208 <main+0x370>)
 8000fa2:	789b      	ldrb	r3, [r3, #2]
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	b21a      	sxth	r2, r3
 8000fa8:	4b97      	ldr	r3, [pc, #604]	; (8001208 <main+0x370>)
 8000faa:	78db      	ldrb	r3, [r3, #3]
 8000fac:	b21b      	sxth	r3, r3
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	b21a      	sxth	r2, r3
 8000fb2:	4b97      	ldr	r3, [pc, #604]	; (8001210 <main+0x378>)
 8000fb4:	805a      	strh	r2, [r3, #2]
	  gyro_raw[2] = (cuffer[4] << 8 | cuffer[5]);
 8000fb6:	4b94      	ldr	r3, [pc, #592]	; (8001208 <main+0x370>)
 8000fb8:	791b      	ldrb	r3, [r3, #4]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	4b92      	ldr	r3, [pc, #584]	; (8001208 <main+0x370>)
 8000fc0:	795b      	ldrb	r3, [r3, #5]
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b21a      	sxth	r2, r3
 8000fc8:	4b91      	ldr	r3, [pc, #580]	; (8001210 <main+0x378>)
 8000fca:	809a      	strh	r2, [r3, #4]

	  gyro_cal[0] += gyro_raw[0];
 8000fcc:	4b91      	ldr	r3, [pc, #580]	; (8001214 <main+0x37c>)
 8000fce:	ed93 7a00 	vldr	s14, [r3]
 8000fd2:	4b8f      	ldr	r3, [pc, #572]	; (8001210 <main+0x378>)
 8000fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe4:	4b8b      	ldr	r3, [pc, #556]	; (8001214 <main+0x37c>)
 8000fe6:	edc3 7a00 	vstr	s15, [r3]
	  gyro_cal[1] += gyro_raw[1];
 8000fea:	4b8a      	ldr	r3, [pc, #552]	; (8001214 <main+0x37c>)
 8000fec:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ff0:	4b87      	ldr	r3, [pc, #540]	; (8001210 <main+0x378>)
 8000ff2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ff6:	ee07 3a90 	vmov	s15, r3
 8000ffa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001002:	4b84      	ldr	r3, [pc, #528]	; (8001214 <main+0x37c>)
 8001004:	edc3 7a01 	vstr	s15, [r3, #4]
	  gyro_cal[2] += gyro_raw[2];
 8001008:	4b82      	ldr	r3, [pc, #520]	; (8001214 <main+0x37c>)
 800100a:	ed93 7a02 	vldr	s14, [r3, #8]
 800100e:	4b80      	ldr	r3, [pc, #512]	; (8001210 <main+0x378>)
 8001010:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001014:	ee07 3a90 	vmov	s15, r3
 8001018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800101c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001020:	4b7c      	ldr	r3, [pc, #496]	; (8001214 <main+0x37c>)
 8001022:	edc3 7a02 	vstr	s15, [r3, #8]

		HAL_Delay(3);
 8001026:	2003      	movs	r0, #3
 8001028:	f000 fde2 	bl	8001bf0 <HAL_Delay>
  for(i=0; i<=2000; i++)
 800102c:	4b7a      	ldr	r3, [pc, #488]	; (8001218 <main+0x380>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	3301      	adds	r3, #1
 8001032:	4a79      	ldr	r2, [pc, #484]	; (8001218 <main+0x380>)
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	4b78      	ldr	r3, [pc, #480]	; (8001218 <main+0x380>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800103e:	f77f af73 	ble.w	8000f28 <main+0x90>

  }

  gyro_cal[0] /= 2000;
 8001042:	4b74      	ldr	r3, [pc, #464]	; (8001214 <main+0x37c>)
 8001044:	ed93 7a00 	vldr	s14, [r3]
 8001048:	eddf 6a74 	vldr	s13, [pc, #464]	; 800121c <main+0x384>
 800104c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001050:	4b70      	ldr	r3, [pc, #448]	; (8001214 <main+0x37c>)
 8001052:	edc3 7a00 	vstr	s15, [r3]
  gyro_cal[1] /= 2000;
 8001056:	4b6f      	ldr	r3, [pc, #444]	; (8001214 <main+0x37c>)
 8001058:	ed93 7a01 	vldr	s14, [r3, #4]
 800105c:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800121c <main+0x384>
 8001060:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001064:	4b6b      	ldr	r3, [pc, #428]	; (8001214 <main+0x37c>)
 8001066:	edc3 7a01 	vstr	s15, [r3, #4]
  gyro_cal[2] /= 2000;
 800106a:	4b6a      	ldr	r3, [pc, #424]	; (8001214 <main+0x37c>)
 800106c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001070:	eddf 6a6a 	vldr	s13, [pc, #424]	; 800121c <main+0x384>
 8001074:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001078:	4b66      	ldr	r3, [pc, #408]	; (8001214 <main+0x37c>)
 800107a:	edc3 7a02 	vstr	s15, [r3, #8]

  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  HAL_Delay(1000);
 800107e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001082:	f000 fdb5 	bl	8001bf0 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  prevtime1=time1;
 8001086:	4b66      	ldr	r3, [pc, #408]	; (8001220 <main+0x388>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a66      	ldr	r2, [pc, #408]	; (8001224 <main+0x38c>)
 800108c:	6013      	str	r3, [r2, #0]
	  time1=HAL_GetTick();
 800108e:	f000 fda3 	bl	8001bd8 <HAL_GetTick>
 8001092:	ee07 0a90 	vmov	s15, r0
 8001096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800109a:	4b61      	ldr	r3, [pc, #388]	; (8001220 <main+0x388>)
 800109c:	edc3 7a00 	vstr	s15, [r3]
	  elapsedtime1=(time1-prevtime1)*1000;
 80010a0:	4b5f      	ldr	r3, [pc, #380]	; (8001220 <main+0x388>)
 80010a2:	ed93 7a00 	vldr	s14, [r3]
 80010a6:	4b5f      	ldr	r3, [pc, #380]	; (8001224 <main+0x38c>)
 80010a8:	edd3 7a00 	vldr	s15, [r3]
 80010ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b0:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001200 <main+0x368>
 80010b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b8:	4b5b      	ldr	r3, [pc, #364]	; (8001228 <main+0x390>)
 80010ba:	edc3 7a00 	vstr	s15, [r3]

	  tuffer[0]=0x3B;
 80010be:	4b5b      	ldr	r3, [pc, #364]	; (800122c <main+0x394>)
 80010c0:	223b      	movs	r2, #59	; 0x3b
 80010c2:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1,MPU6050_ADRR,tuffer,1,HAL_MAX_DELAY);
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2301      	movs	r3, #1
 80010cc:	4a57      	ldr	r2, [pc, #348]	; (800122c <main+0x394>)
 80010ce:	21d0      	movs	r1, #208	; 0xd0
 80010d0:	484e      	ldr	r0, [pc, #312]	; (800120c <main+0x374>)
 80010d2:	f001 f979 	bl	80023c8 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1,MPU6050_ADRR,tuffer,6,HAL_MAX_DELAY);
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2306      	movs	r3, #6
 80010de:	4a53      	ldr	r2, [pc, #332]	; (800122c <main+0x394>)
 80010e0:	21d0      	movs	r1, #208	; 0xd0
 80010e2:	484a      	ldr	r0, [pc, #296]	; (800120c <main+0x374>)
 80010e4:	f001 fa6e 	bl	80025c4 <HAL_I2C_Master_Receive>

	  	  //acc
	  acc_raw[0] = (tuffer[0] << 8 | tuffer[1]);
 80010e8:	4b50      	ldr	r3, [pc, #320]	; (800122c <main+0x394>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	4b4e      	ldr	r3, [pc, #312]	; (800122c <main+0x394>)
 80010f2:	785b      	ldrb	r3, [r3, #1]
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b21a      	sxth	r2, r3
 80010fa:	4b4d      	ldr	r3, [pc, #308]	; (8001230 <main+0x398>)
 80010fc:	801a      	strh	r2, [r3, #0]
	  acc_raw[1] = (tuffer[2] << 8 | tuffer[3]);
 80010fe:	4b4b      	ldr	r3, [pc, #300]	; (800122c <main+0x394>)
 8001100:	789b      	ldrb	r3, [r3, #2]
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	b21a      	sxth	r2, r3
 8001106:	4b49      	ldr	r3, [pc, #292]	; (800122c <main+0x394>)
 8001108:	78db      	ldrb	r3, [r3, #3]
 800110a:	b21b      	sxth	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b21a      	sxth	r2, r3
 8001110:	4b47      	ldr	r3, [pc, #284]	; (8001230 <main+0x398>)
 8001112:	805a      	strh	r2, [r3, #2]
	  acc_raw[2] = (tuffer[4] << 8 | tuffer[5]);
 8001114:	4b45      	ldr	r3, [pc, #276]	; (800122c <main+0x394>)
 8001116:	791b      	ldrb	r3, [r3, #4]
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	b21a      	sxth	r2, r3
 800111c:	4b43      	ldr	r3, [pc, #268]	; (800122c <main+0x394>)
 800111e:	795b      	ldrb	r3, [r3, #5]
 8001120:	b21b      	sxth	r3, r3
 8001122:	4313      	orrs	r3, r2
 8001124:	b21a      	sxth	r2, r3
 8001126:	4b42      	ldr	r3, [pc, #264]	; (8001230 <main+0x398>)
 8001128:	809a      	strh	r2, [r3, #4]


	  buffer[0]=0x41;
 800112a:	4b42      	ldr	r3, [pc, #264]	; (8001234 <main+0x39c>)
 800112c:	2241      	movs	r2, #65	; 0x41
 800112e:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1,MPU6050_ADRR,buffer,1,HAL_MAX_DELAY);
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2301      	movs	r3, #1
 8001138:	4a3e      	ldr	r2, [pc, #248]	; (8001234 <main+0x39c>)
 800113a:	21d0      	movs	r1, #208	; 0xd0
 800113c:	4833      	ldr	r0, [pc, #204]	; (800120c <main+0x374>)
 800113e:	f001 f943 	bl	80023c8 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1,MPU6050_ADRR,buffer,2,HAL_MAX_DELAY);
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2302      	movs	r3, #2
 800114a:	4a3a      	ldr	r2, [pc, #232]	; (8001234 <main+0x39c>)
 800114c:	21d0      	movs	r1, #208	; 0xd0
 800114e:	482f      	ldr	r0, [pc, #188]	; (800120c <main+0x374>)
 8001150:	f001 fa38 	bl	80025c4 <HAL_I2C_Master_Receive>

	 //temprature
	  raw_temp = (buffer[0] << 8 | buffer[1]);
 8001154:	4b37      	ldr	r3, [pc, #220]	; (8001234 <main+0x39c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	b21a      	sxth	r2, r3
 800115c:	4b35      	ldr	r3, [pc, #212]	; (8001234 <main+0x39c>)
 800115e:	785b      	ldrb	r3, [r3, #1]
 8001160:	b21b      	sxth	r3, r3
 8001162:	4313      	orrs	r3, r2
 8001164:	b21a      	sxth	r2, r3
 8001166:	4b34      	ldr	r3, [pc, #208]	; (8001238 <main+0x3a0>)
 8001168:	801a      	strh	r2, [r3, #0]
	  temp = (raw_temp / 340.0) + 36.53;
 800116a:	4b33      	ldr	r3, [pc, #204]	; (8001238 <main+0x3a0>)
 800116c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f983 	bl	800047c <__aeabi_i2d>
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	4b30      	ldr	r3, [pc, #192]	; (800123c <main+0x3a4>)
 800117c:	f7ff fb12 	bl	80007a4 <__aeabi_ddiv>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	a319      	add	r3, pc, #100	; (adr r3, 80011f0 <main+0x358>)
 800118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118e:	f7ff f829 	bl	80001e4 <__adddf3>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	f7ff fcb1 	bl	8000b00 <__aeabi_d2f>
 800119e:	4603      	mov	r3, r0
 80011a0:	4a27      	ldr	r2, [pc, #156]	; (8001240 <main+0x3a8>)
 80011a2:	6013      	str	r3, [r2, #0]


	  cuffer[0]=0x43;
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <main+0x370>)
 80011a6:	2243      	movs	r2, #67	; 0x43
 80011a8:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1,MPU6050_ADRR,cuffer,1,HAL_MAX_DELAY);
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2301      	movs	r3, #1
 80011b2:	4a15      	ldr	r2, [pc, #84]	; (8001208 <main+0x370>)
 80011b4:	21d0      	movs	r1, #208	; 0xd0
 80011b6:	4815      	ldr	r0, [pc, #84]	; (800120c <main+0x374>)
 80011b8:	f001 f906 	bl	80023c8 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1,MPU6050_ADRR,cuffer,6,HAL_MAX_DELAY);
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2306      	movs	r3, #6
 80011c4:	4a10      	ldr	r2, [pc, #64]	; (8001208 <main+0x370>)
 80011c6:	21d0      	movs	r1, #208	; 0xd0
 80011c8:	4810      	ldr	r0, [pc, #64]	; (800120c <main+0x374>)
 80011ca:	f001 f9fb 	bl	80025c4 <HAL_I2C_Master_Receive>

	  //gyro raw
	  gyro_raw[0] = (cuffer[0] << 8 | cuffer[1]);
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <main+0x370>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <main+0x370>)
 80011d8:	785b      	ldrb	r3, [r3, #1]
 80011da:	b21b      	sxth	r3, r3
 80011dc:	4313      	orrs	r3, r2
 80011de:	b21a      	sxth	r2, r3
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <main+0x378>)
 80011e2:	801a      	strh	r2, [r3, #0]
	  gyro_raw[1] = (cuffer[2] << 8 | cuffer[3]);
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <main+0x370>)
 80011e6:	789b      	ldrb	r3, [r3, #2]
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	e02a      	b.n	8001244 <main+0x3ac>
 80011ee:	bf00      	nop
 80011f0:	0a3d70a4 	.word	0x0a3d70a4
 80011f4:	404243d7 	.word	0x404243d7
 80011f8:	20000198 	.word	0x20000198
 80011fc:	20000120 	.word	0x20000120
 8001200:	447a0000 	.word	0x447a0000
 8001204:	20000090 	.word	0x20000090
 8001208:	20000104 	.word	0x20000104
 800120c:	200000b0 	.word	0x200000b0
 8001210:	20000094 	.word	0x20000094
 8001214:	200000a4 	.word	0x200000a4
 8001218:	20000124 	.word	0x20000124
 800121c:	44fa0000 	.word	0x44fa0000
 8001220:	20000170 	.word	0x20000170
 8001224:	20000190 	.word	0x20000190
 8001228:	20000184 	.word	0x20000184
 800122c:	20000174 	.word	0x20000174
 8001230:	2000010c 	.word	0x2000010c
 8001234:	2000016c 	.word	0x2000016c
 8001238:	20000194 	.word	0x20000194
 800123c:	40754000 	.word	0x40754000
 8001240:	20000118 	.word	0x20000118
 8001244:	4bcc      	ldr	r3, [pc, #816]	; (8001578 <main+0x6e0>)
 8001246:	78db      	ldrb	r3, [r3, #3]
 8001248:	b21b      	sxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	b21a      	sxth	r2, r3
 800124e:	4bcb      	ldr	r3, [pc, #812]	; (800157c <main+0x6e4>)
 8001250:	805a      	strh	r2, [r3, #2]
	  gyro_raw[2] = (cuffer[4] << 8 | cuffer[5]);
 8001252:	4bc9      	ldr	r3, [pc, #804]	; (8001578 <main+0x6e0>)
 8001254:	791b      	ldrb	r3, [r3, #4]
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	b21a      	sxth	r2, r3
 800125a:	4bc7      	ldr	r3, [pc, #796]	; (8001578 <main+0x6e0>)
 800125c:	795b      	ldrb	r3, [r3, #5]
 800125e:	b21b      	sxth	r3, r3
 8001260:	4313      	orrs	r3, r2
 8001262:	b21a      	sxth	r2, r3
 8001264:	4bc5      	ldr	r3, [pc, #788]	; (800157c <main+0x6e4>)
 8001266:	809a      	strh	r2, [r3, #4]

	  gyro_raw[0] -= gyro_cal[0];
 8001268:	4bc4      	ldr	r3, [pc, #784]	; (800157c <main+0x6e4>)
 800126a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800126e:	ee07 3a90 	vmov	s15, r3
 8001272:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001276:	4bc2      	ldr	r3, [pc, #776]	; (8001580 <main+0x6e8>)
 8001278:	edd3 7a00 	vldr	s15, [r3]
 800127c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001280:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001284:	ee17 3a90 	vmov	r3, s15
 8001288:	b21a      	sxth	r2, r3
 800128a:	4bbc      	ldr	r3, [pc, #752]	; (800157c <main+0x6e4>)
 800128c:	801a      	strh	r2, [r3, #0]
	  gyro_raw[1] -= gyro_cal[1];
 800128e:	4bbb      	ldr	r3, [pc, #748]	; (800157c <main+0x6e4>)
 8001290:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800129c:	4bb8      	ldr	r3, [pc, #736]	; (8001580 <main+0x6e8>)
 800129e:	edd3 7a01 	vldr	s15, [r3, #4]
 80012a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012aa:	ee17 3a90 	vmov	r3, s15
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	4bb2      	ldr	r3, [pc, #712]	; (800157c <main+0x6e4>)
 80012b2:	805a      	strh	r2, [r3, #2]
	  gyro_raw[2] -= gyro_cal[2];
 80012b4:	4bb1      	ldr	r3, [pc, #708]	; (800157c <main+0x6e4>)
 80012b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012ba:	ee07 3a90 	vmov	s15, r3
 80012be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c2:	4baf      	ldr	r3, [pc, #700]	; (8001580 <main+0x6e8>)
 80012c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80012c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d0:	ee17 3a90 	vmov	r3, s15
 80012d4:	b21a      	sxth	r2, r3
 80012d6:	4ba9      	ldr	r3, [pc, #676]	; (800157c <main+0x6e4>)
 80012d8:	809a      	strh	r2, [r3, #4]


	  angle_pitch_gyro += gyro_raw[0] * 0.0000611; //  1*0.004s/65.5= 0.0000611
 80012da:	4baa      	ldr	r3, [pc, #680]	; (8001584 <main+0x6ec>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f8de 	bl	80004a0 <__aeabi_f2d>
 80012e4:	4604      	mov	r4, r0
 80012e6:	460d      	mov	r5, r1
 80012e8:	4ba4      	ldr	r3, [pc, #656]	; (800157c <main+0x6e4>)
 80012ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f8c4 	bl	800047c <__aeabi_i2d>
 80012f4:	a398      	add	r3, pc, #608	; (adr r3, 8001558 <main+0x6c0>)
 80012f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fa:	f7ff f929 	bl	8000550 <__aeabi_dmul>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4620      	mov	r0, r4
 8001304:	4629      	mov	r1, r5
 8001306:	f7fe ff6d 	bl	80001e4 <__adddf3>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fbf5 	bl	8000b00 <__aeabi_d2f>
 8001316:	4603      	mov	r3, r0
 8001318:	4a9a      	ldr	r2, [pc, #616]	; (8001584 <main+0x6ec>)
 800131a:	6013      	str	r3, [r2, #0]
	  angle_roll_gyro += gyro_raw[1] * 0.0000611;  // 0.004s gyronun ölçtüğü derece/s cinsinden
 800131c:	4b9a      	ldr	r3, [pc, #616]	; (8001588 <main+0x6f0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f8bd 	bl	80004a0 <__aeabi_f2d>
 8001326:	4604      	mov	r4, r0
 8001328:	460d      	mov	r5, r1
 800132a:	4b94      	ldr	r3, [pc, #592]	; (800157c <main+0x6e4>)
 800132c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f8a3 	bl	800047c <__aeabi_i2d>
 8001336:	a388      	add	r3, pc, #544	; (adr r3, 8001558 <main+0x6c0>)
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	f7ff f908 	bl	8000550 <__aeabi_dmul>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4620      	mov	r0, r4
 8001346:	4629      	mov	r1, r5
 8001348:	f7fe ff4c 	bl	80001e4 <__adddf3>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fbd4 	bl	8000b00 <__aeabi_d2f>
 8001358:	4603      	mov	r3, r0
 800135a:	4a8b      	ldr	r2, [pc, #556]	; (8001588 <main+0x6f0>)
 800135c:	6013      	str	r3, [r2, #0]
	 //veridir bunu derece olarak okuyabilmemiz için saniye ile çarptık datasheetteki değere göre 65.5'e böldük
	  angle_pitch_gyro += angle_roll_gyro * sin(gyro_raw[2] * 0.000001066);//0.0000611->rad=0.000001066
 800135e:	4b89      	ldr	r3, [pc, #548]	; (8001584 <main+0x6ec>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f89c 	bl	80004a0 <__aeabi_f2d>
 8001368:	4604      	mov	r4, r0
 800136a:	460d      	mov	r5, r1
 800136c:	4b86      	ldr	r3, [pc, #536]	; (8001588 <main+0x6f0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f895 	bl	80004a0 <__aeabi_f2d>
 8001376:	4680      	mov	r8, r0
 8001378:	4689      	mov	r9, r1
 800137a:	4b80      	ldr	r3, [pc, #512]	; (800157c <main+0x6e4>)
 800137c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f87b 	bl	800047c <__aeabi_i2d>
 8001386:	a376      	add	r3, pc, #472	; (adr r3, 8001560 <main+0x6c8>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	f7ff f8e0 	bl	8000550 <__aeabi_dmul>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	ec43 2b17 	vmov	d7, r2, r3
 8001398:	eeb0 0a47 	vmov.f32	s0, s14
 800139c:	eef0 0a67 	vmov.f32	s1, s15
 80013a0:	f002 fe86 	bl	80040b0 <sin>
 80013a4:	ec53 2b10 	vmov	r2, r3, d0
 80013a8:	4640      	mov	r0, r8
 80013aa:	4649      	mov	r1, r9
 80013ac:	f7ff f8d0 	bl	8000550 <__aeabi_dmul>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4620      	mov	r0, r4
 80013b6:	4629      	mov	r1, r5
 80013b8:	f7fe ff14 	bl	80001e4 <__adddf3>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	f7ff fb9c 	bl	8000b00 <__aeabi_d2f>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a6e      	ldr	r2, [pc, #440]	; (8001584 <main+0x6ec>)
 80013cc:	6013      	str	r3, [r2, #0]
	  angle_roll_gyro -= angle_pitch_gyro * sin(gyro_raw[2] * 0.000001066);
 80013ce:	4b6e      	ldr	r3, [pc, #440]	; (8001588 <main+0x6f0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f864 	bl	80004a0 <__aeabi_f2d>
 80013d8:	4604      	mov	r4, r0
 80013da:	460d      	mov	r5, r1
 80013dc:	4b69      	ldr	r3, [pc, #420]	; (8001584 <main+0x6ec>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f85d 	bl	80004a0 <__aeabi_f2d>
 80013e6:	4680      	mov	r8, r0
 80013e8:	4689      	mov	r9, r1
 80013ea:	4b64      	ldr	r3, [pc, #400]	; (800157c <main+0x6e4>)
 80013ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f843 	bl	800047c <__aeabi_i2d>
 80013f6:	a35a      	add	r3, pc, #360	; (adr r3, 8001560 <main+0x6c8>)
 80013f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fc:	f7ff f8a8 	bl	8000550 <__aeabi_dmul>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	ec43 2b17 	vmov	d7, r2, r3
 8001408:	eeb0 0a47 	vmov.f32	s0, s14
 800140c:	eef0 0a67 	vmov.f32	s1, s15
 8001410:	f002 fe4e 	bl	80040b0 <sin>
 8001414:	ec53 2b10 	vmov	r2, r3, d0
 8001418:	4640      	mov	r0, r8
 800141a:	4649      	mov	r1, r9
 800141c:	f7ff f898 	bl	8000550 <__aeabi_dmul>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4620      	mov	r0, r4
 8001426:	4629      	mov	r1, r5
 8001428:	f7fe feda 	bl	80001e0 <__aeabi_dsub>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	f7ff fb64 	bl	8000b00 <__aeabi_d2f>
 8001438:	4603      	mov	r3, r0
 800143a:	4a53      	ldr	r2, [pc, #332]	; (8001588 <main+0x6f0>)
 800143c:	6013      	str	r3, [r2, #0]

	  acc_total_vector = sqrt((acc_raw[0]*acc_raw[0])+(acc_raw[1]*acc_raw[1])+(acc_raw[2]*acc_raw[2]));
 800143e:	4b53      	ldr	r3, [pc, #332]	; (800158c <main+0x6f4>)
 8001440:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001444:	461a      	mov	r2, r3
 8001446:	4b51      	ldr	r3, [pc, #324]	; (800158c <main+0x6f4>)
 8001448:	f9b3 3000 	ldrsh.w	r3, [r3]
 800144c:	fb03 f202 	mul.w	r2, r3, r2
 8001450:	4b4e      	ldr	r3, [pc, #312]	; (800158c <main+0x6f4>)
 8001452:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001456:	4619      	mov	r1, r3
 8001458:	4b4c      	ldr	r3, [pc, #304]	; (800158c <main+0x6f4>)
 800145a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800145e:	fb03 f301 	mul.w	r3, r3, r1
 8001462:	441a      	add	r2, r3
 8001464:	4b49      	ldr	r3, [pc, #292]	; (800158c <main+0x6f4>)
 8001466:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800146a:	4619      	mov	r1, r3
 800146c:	4b47      	ldr	r3, [pc, #284]	; (800158c <main+0x6f4>)
 800146e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001472:	fb03 f301 	mul.w	r3, r3, r1
 8001476:	4413      	add	r3, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7fe ffff 	bl	800047c <__aeabi_i2d>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	ec43 2b10 	vmov	d0, r2, r3
 8001486:	f002 fea1 	bl	80041cc <sqrt>
 800148a:	ec53 2b10 	vmov	r2, r3, d0
 800148e:	4610      	mov	r0, r2
 8001490:	4619      	mov	r1, r3
 8001492:	f7ff fb0d 	bl	8000ab0 <__aeabi_d2iz>
 8001496:	4603      	mov	r3, r0
 8001498:	b21a      	sxth	r2, r3
 800149a:	4b3d      	ldr	r3, [pc, #244]	; (8001590 <main+0x6f8>)
 800149c:	801a      	strh	r2, [r3, #0]

	  //57.296=1/(pi/180)
	  angle_pitch_acc = asin((float)acc_raw[1]/acc_total_vector)*57.296;//57.296 ile çarparak radyanı dereceye çevirdik
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <main+0x6f4>)
 80014a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ac:	4b38      	ldr	r3, [pc, #224]	; (8001590 <main+0x6f8>)
 80014ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b2:	ee07 3a90 	vmov	s15, r3
 80014b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014be:	ee16 0a90 	vmov	r0, s13
 80014c2:	f7fe ffed 	bl	80004a0 <__aeabi_f2d>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	ec43 2b10 	vmov	d0, r2, r3
 80014ce:	f002 fe43 	bl	8004158 <asin>
 80014d2:	ec51 0b10 	vmov	r0, r1, d0
 80014d6:	a324      	add	r3, pc, #144	; (adr r3, 8001568 <main+0x6d0>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7ff f838 	bl	8000550 <__aeabi_dmul>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff fb0a 	bl	8000b00 <__aeabi_d2f>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4a29      	ldr	r2, [pc, #164]	; (8001594 <main+0x6fc>)
 80014f0:	6013      	str	r3, [r2, #0]
	  angle_roll_acc = asin((float)acc_raw[0]/acc_total_vector)*-57.296;
 80014f2:	4b26      	ldr	r3, [pc, #152]	; (800158c <main+0x6f4>)
 80014f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f8:	ee07 3a90 	vmov	s15, r3
 80014fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001500:	4b23      	ldr	r3, [pc, #140]	; (8001590 <main+0x6f8>)
 8001502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001506:	ee07 3a90 	vmov	s15, r3
 800150a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800150e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001512:	ee16 0a90 	vmov	r0, s13
 8001516:	f7fe ffc3 	bl	80004a0 <__aeabi_f2d>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	ec43 2b10 	vmov	d0, r2, r3
 8001522:	f002 fe19 	bl	8004158 <asin>
 8001526:	ec51 0b10 	vmov	r0, r1, d0
 800152a:	a311      	add	r3, pc, #68	; (adr r3, 8001570 <main+0x6d8>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	f7ff f80e 	bl	8000550 <__aeabi_dmul>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f7ff fae0 	bl	8000b00 <__aeabi_d2f>
 8001540:	4603      	mov	r3, r0
 8001542:	4a15      	ldr	r2, [pc, #84]	; (8001598 <main+0x700>)
 8001544:	6013      	str	r3, [r2, #0]


	  angle_pitch_acc -= 0.00; // kalibrasyon için güvendiğimiz acc ile ölçüm yapıp farkı
 8001546:	4b13      	ldr	r3, [pc, #76]	; (8001594 <main+0x6fc>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a12      	ldr	r2, [pc, #72]	; (8001594 <main+0x6fc>)
 800154c:	6013      	str	r3, [r2, #0]
	  angle_roll_acc -= 0.00;  //çıkartmamız lazım
 800154e:	4b12      	ldr	r3, [pc, #72]	; (8001598 <main+0x700>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a11      	ldr	r2, [pc, #68]	; (8001598 <main+0x700>)
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	e021      	b.n	800159c <main+0x704>
 8001558:	01d41596 	.word	0x01d41596
 800155c:	3f10045a 	.word	0x3f10045a
 8001560:	652c6e62 	.word	0x652c6e62
 8001564:	3eb1e26f 	.word	0x3eb1e26f
 8001568:	53f7ced9 	.word	0x53f7ced9
 800156c:	404ca5e3 	.word	0x404ca5e3
 8001570:	53f7ced9 	.word	0x53f7ced9
 8001574:	c04ca5e3 	.word	0xc04ca5e3
 8001578:	20000104 	.word	0x20000104
 800157c:	20000094 	.word	0x20000094
 8001580:	200000a4 	.word	0x200000a4
 8001584:	2000017c 	.word	0x2000017c
 8001588:	20000188 	.word	0x20000188
 800158c:	2000010c 	.word	0x2000010c
 8001590:	20000182 	.word	0x20000182
 8001594:	200000a0 	.word	0x200000a0
 8001598:	2000018c 	.word	0x2000018c

	  if(set_gyro){
 800159c:	4b42      	ldr	r3, [pc, #264]	; (80016a8 <main+0x810>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d04e      	beq.n	8001642 <main+0x7aa>
		  angle_pitch = (angle_pitch_gyro * 0.9996 + angle_pitch_acc * 0.0004);
 80015a4:	4b41      	ldr	r3, [pc, #260]	; (80016ac <main+0x814>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe ff79 	bl	80004a0 <__aeabi_f2d>
 80015ae:	a33a      	add	r3, pc, #232	; (adr r3, 8001698 <main+0x800>)
 80015b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b4:	f7fe ffcc 	bl	8000550 <__aeabi_dmul>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4614      	mov	r4, r2
 80015be:	461d      	mov	r5, r3
 80015c0:	4b3b      	ldr	r3, [pc, #236]	; (80016b0 <main+0x818>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ff6b 	bl	80004a0 <__aeabi_f2d>
 80015ca:	a335      	add	r3, pc, #212	; (adr r3, 80016a0 <main+0x808>)
 80015cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d0:	f7fe ffbe 	bl	8000550 <__aeabi_dmul>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4620      	mov	r0, r4
 80015da:	4629      	mov	r1, r5
 80015dc:	f7fe fe02 	bl	80001e4 <__adddf3>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4610      	mov	r0, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	f7ff fa8a 	bl	8000b00 <__aeabi_d2f>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4a31      	ldr	r2, [pc, #196]	; (80016b4 <main+0x81c>)
 80015f0:	6013      	str	r3, [r2, #0]
		  angle_roll = (angle_roll_gyro * 0.9996 + angle_roll_acc * 0.0004);
 80015f2:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <main+0x820>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ff52 	bl	80004a0 <__aeabi_f2d>
 80015fc:	a326      	add	r3, pc, #152	; (adr r3, 8001698 <main+0x800>)
 80015fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001602:	f7fe ffa5 	bl	8000550 <__aeabi_dmul>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4614      	mov	r4, r2
 800160c:	461d      	mov	r5, r3
 800160e:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <main+0x824>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ff44 	bl	80004a0 <__aeabi_f2d>
 8001618:	a321      	add	r3, pc, #132	; (adr r3, 80016a0 <main+0x808>)
 800161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161e:	f7fe ff97 	bl	8000550 <__aeabi_dmul>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4620      	mov	r0, r4
 8001628:	4629      	mov	r1, r5
 800162a:	f7fe fddb 	bl	80001e4 <__adddf3>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	f7ff fa63 	bl	8000b00 <__aeabi_d2f>
 800163a:	4603      	mov	r3, r0
 800163c:	4a20      	ldr	r2, [pc, #128]	; (80016c0 <main+0x828>)
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	e006      	b.n	8001650 <main+0x7b8>

	  }
	  else
	  {
		  angle_pitch = angle_pitch_acc;//0
 8001642:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <main+0x818>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a1b      	ldr	r2, [pc, #108]	; (80016b4 <main+0x81c>)
 8001648:	6013      	str	r3, [r2, #0]
		  set_gyro = true;
 800164a:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <main+0x810>)
 800164c:	2201      	movs	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]
	  }

	  while((HAL_GetTick() - prevtime)*1000 < 4000);
 8001650:	bf00      	nop
 8001652:	f000 fac1 	bl	8001bd8 <HAL_GetTick>
 8001656:	ee07 0a90 	vmov	s15, r0
 800165a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800165e:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <main+0x82c>)
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001668:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80016c8 <main+0x830>
 800166c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001670:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80016cc <main+0x834>
 8001674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167c:	d4e9      	bmi.n	8001652 <main+0x7ba>
	  prevtime = HAL_GetTick();
 800167e:	f000 faab 	bl	8001bd8 <HAL_GetTick>
 8001682:	ee07 0a90 	vmov	s15, r0
 8001686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <main+0x82c>)
 800168c:	edc3 7a00 	vstr	s15, [r3]
	  prevtime1=time1;
 8001690:	e4f9      	b.n	8001086 <main+0x1ee>
 8001692:	bf00      	nop
 8001694:	f3af 8000 	nop.w
 8001698:	23a29c78 	.word	0x23a29c78
 800169c:	3feffcb9 	.word	0x3feffcb9
 80016a0:	eb1c432d 	.word	0xeb1c432d
 80016a4:	3f3a36e2 	.word	0x3f3a36e2
 80016a8:	20000180 	.word	0x20000180
 80016ac:	2000017c 	.word	0x2000017c
 80016b0:	200000a0 	.word	0x200000a0
 80016b4:	2000009c 	.word	0x2000009c
 80016b8:	20000188 	.word	0x20000188
 80016bc:	2000018c 	.word	0x2000018c
 80016c0:	2000011c 	.word	0x2000011c
 80016c4:	20000114 	.word	0x20000114
 80016c8:	447a0000 	.word	0x447a0000
 80016cc:	457a0000 	.word	0x457a0000

080016d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b094      	sub	sp, #80	; 0x50
 80016d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d6:	f107 0320 	add.w	r3, r7, #32
 80016da:	2230      	movs	r2, #48	; 0x30
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f002 fcdc 	bl	800409c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	4b23      	ldr	r3, [pc, #140]	; (8001788 <SystemClock_Config+0xb8>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	4a22      	ldr	r2, [pc, #136]	; (8001788 <SystemClock_Config+0xb8>)
 80016fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001702:	6413      	str	r3, [r2, #64]	; 0x40
 8001704:	4b20      	ldr	r3, [pc, #128]	; (8001788 <SystemClock_Config+0xb8>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001710:	2300      	movs	r3, #0
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	4b1d      	ldr	r3, [pc, #116]	; (800178c <SystemClock_Config+0xbc>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800171c:	4a1b      	ldr	r2, [pc, #108]	; (800178c <SystemClock_Config+0xbc>)
 800171e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b19      	ldr	r3, [pc, #100]	; (800178c <SystemClock_Config+0xbc>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001730:	2302      	movs	r3, #2
 8001732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001734:	2301      	movs	r3, #1
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001738:	2310      	movs	r3, #16
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800173c:	2300      	movs	r3, #0
 800173e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001740:	f107 0320 	add.w	r3, r7, #32
 8001744:	4618      	mov	r0, r3
 8001746:	f001 fe21 	bl	800338c <HAL_RCC_OscConfig>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001750:	f000 f8b8 	bl	80018c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001754:	230f      	movs	r3, #15
 8001756:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001758:	2300      	movs	r3, #0
 800175a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001760:	2300      	movs	r3, #0
 8001762:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	2100      	movs	r1, #0
 800176e:	4618      	mov	r0, r3
 8001770:	f002 f884 	bl	800387c <HAL_RCC_ClockConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800177a:	f000 f8a3 	bl	80018c4 <Error_Handler>
  }
}
 800177e:	bf00      	nop
 8001780:	3750      	adds	r7, #80	; 0x50
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800
 800178c:	40007000 	.word	0x40007000

08001790 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <MX_I2C1_Init+0x50>)
 8001796:	4a13      	ldr	r2, [pc, #76]	; (80017e4 <MX_I2C1_Init+0x54>)
 8001798:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <MX_I2C1_Init+0x50>)
 800179c:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <MX_I2C1_Init+0x58>)
 800179e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <MX_I2C1_Init+0x50>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <MX_I2C1_Init+0x50>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <MX_I2C1_Init+0x50>)
 80017ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b4:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <MX_I2C1_Init+0x50>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MX_I2C1_Init+0x50>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017c0:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <MX_I2C1_Init+0x50>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <MX_I2C1_Init+0x50>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017cc:	4804      	ldr	r0, [pc, #16]	; (80017e0 <MX_I2C1_Init+0x50>)
 80017ce:	f000 fcb7 	bl	8002140 <HAL_I2C_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017d8:	f000 f874 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	200000b0 	.word	0x200000b0
 80017e4:	40005400 	.word	0x40005400
 80017e8:	00061a80 	.word	0x00061a80

080017ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <MX_USART1_UART_Init+0x50>)
 80017f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 80017f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800180a:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 8001812:	220c      	movs	r2, #12
 8001814:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001822:	4805      	ldr	r0, [pc, #20]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 8001824:	f002 f9fa 	bl	8003c1c <HAL_UART_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800182e:	f000 f849 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000128 	.word	0x20000128
 800183c:	40011000 	.word	0x40011000

08001840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <MX_GPIO_Init+0x7c>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a17      	ldr	r2, [pc, #92]	; (80018bc <MX_GPIO_Init+0x7c>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <MX_GPIO_Init+0x7c>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <MX_GPIO_Init+0x7c>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a10      	ldr	r2, [pc, #64]	; (80018bc <MX_GPIO_Init+0x7c>)
 800187c:	f043 0302 	orr.w	r3, r3, #2
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <MX_GPIO_Init+0x7c>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800188e:	2200      	movs	r2, #0
 8001890:	2120      	movs	r1, #32
 8001892:	480b      	ldr	r0, [pc, #44]	; (80018c0 <MX_GPIO_Init+0x80>)
 8001894:	f000 fc3a 	bl	800210c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001898:	2320      	movs	r3, #32
 800189a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189c:	2301      	movs	r3, #1
 800189e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a8:	f107 030c 	add.w	r3, r7, #12
 80018ac:	4619      	mov	r1, r3
 80018ae:	4804      	ldr	r0, [pc, #16]	; (80018c0 <MX_GPIO_Init+0x80>)
 80018b0:	f000 faa8 	bl	8001e04 <HAL_GPIO_Init>

}
 80018b4:	bf00      	nop
 80018b6:	3720      	adds	r7, #32
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020000 	.word	0x40020000

080018c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c8:	b672      	cpsid	i
}
 80018ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018cc:	e7fe      	b.n	80018cc <Error_Handler+0x8>
	...

080018d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_MspInit+0x4c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	4a0f      	ldr	r2, [pc, #60]	; (800191c <HAL_MspInit+0x4c>)
 80018e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e4:	6453      	str	r3, [r2, #68]	; 0x44
 80018e6:	4b0d      	ldr	r3, [pc, #52]	; (800191c <HAL_MspInit+0x4c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_MspInit+0x4c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	4a08      	ldr	r2, [pc, #32]	; (800191c <HAL_MspInit+0x4c>)
 80018fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001900:	6413      	str	r3, [r2, #64]	; 0x40
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_MspInit+0x4c>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800

08001920 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	; 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a19      	ldr	r2, [pc, #100]	; (80019a4 <HAL_I2C_MspInit+0x84>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d12b      	bne.n	800199a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <HAL_I2C_MspInit+0x88>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a17      	ldr	r2, [pc, #92]	; (80019a8 <HAL_I2C_MspInit+0x88>)
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <HAL_I2C_MspInit+0x88>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800195e:	23c0      	movs	r3, #192	; 0xc0
 8001960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001962:	2312      	movs	r3, #18
 8001964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196a:	2303      	movs	r3, #3
 800196c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800196e:	2304      	movs	r3, #4
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	480c      	ldr	r0, [pc, #48]	; (80019ac <HAL_I2C_MspInit+0x8c>)
 800197a:	f000 fa43 	bl	8001e04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_I2C_MspInit+0x88>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	4a08      	ldr	r2, [pc, #32]	; (80019a8 <HAL_I2C_MspInit+0x88>)
 8001988:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800198c:	6413      	str	r3, [r2, #64]	; 0x40
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_I2C_MspInit+0x88>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800199a:	bf00      	nop
 800199c:	3728      	adds	r7, #40	; 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40005400 	.word	0x40005400
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020400 	.word	0x40020400

080019b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a19      	ldr	r2, [pc, #100]	; (8001a34 <HAL_UART_MspInit+0x84>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d12c      	bne.n	8001a2c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <HAL_UART_MspInit+0x88>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	4a17      	ldr	r2, [pc, #92]	; (8001a38 <HAL_UART_MspInit+0x88>)
 80019dc:	f043 0310 	orr.w	r3, r3, #16
 80019e0:	6453      	str	r3, [r2, #68]	; 0x44
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_UART_MspInit+0x88>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	f003 0310 	and.w	r3, r3, #16
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <HAL_UART_MspInit+0x88>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a10      	ldr	r2, [pc, #64]	; (8001a38 <HAL_UART_MspInit+0x88>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <HAL_UART_MspInit+0x88>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a1c:	2307      	movs	r3, #7
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4619      	mov	r1, r3
 8001a26:	4805      	ldr	r0, [pc, #20]	; (8001a3c <HAL_UART_MspInit+0x8c>)
 8001a28:	f000 f9ec 	bl	8001e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a2c:	bf00      	nop
 8001a2e:	3728      	adds	r7, #40	; 0x28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40011000 	.word	0x40011000
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020000 	.word	0x40020000

08001a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <NMI_Handler+0x4>

08001a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <HardFault_Handler+0x4>

08001a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <MemManage_Handler+0x4>

08001a52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <BusFault_Handler+0x4>

08001a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <UsageFault_Handler+0x4>

08001a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a8c:	f000 f890 	bl	8001bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <SystemInit+0x20>)
 8001a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9e:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <SystemInit+0x20>)
 8001aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001af0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001abc:	480d      	ldr	r0, [pc, #52]	; (8001af4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001abe:	490e      	ldr	r1, [pc, #56]	; (8001af8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ac0:	4a0e      	ldr	r2, [pc, #56]	; (8001afc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac4:	e002      	b.n	8001acc <LoopCopyDataInit>

08001ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aca:	3304      	adds	r3, #4

08001acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad0:	d3f9      	bcc.n	8001ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad2:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ad4:	4c0b      	ldr	r4, [pc, #44]	; (8001b04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad8:	e001      	b.n	8001ade <LoopFillZerobss>

08001ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001adc:	3204      	adds	r2, #4

08001ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae0:	d3fb      	bcc.n	8001ada <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ae2:	f7ff ffd7 	bl	8001a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ae6:	f002 fab5 	bl	8004054 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aea:	f7ff f9d5 	bl	8000e98 <main>
  bx  lr    
 8001aee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001af0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001afc:	080059c0 	.word	0x080059c0
  ldr r2, =_sbss
 8001b00:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001b04:	200001a0 	.word	0x200001a0

08001b08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b08:	e7fe      	b.n	8001b08 <ADC_IRQHandler>
	...

08001b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b10:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <HAL_Init+0x40>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a0d      	ldr	r2, [pc, #52]	; (8001b4c <HAL_Init+0x40>)
 8001b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <HAL_Init+0x40>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <HAL_Init+0x40>)
 8001b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <HAL_Init+0x40>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a07      	ldr	r2, [pc, #28]	; (8001b4c <HAL_Init+0x40>)
 8001b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b34:	2003      	movs	r0, #3
 8001b36:	f000 f931 	bl	8001d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b3a:	200f      	movs	r0, #15
 8001b3c:	f000 f808 	bl	8001b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b40:	f7ff fec6 	bl	80018d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023c00 	.word	0x40023c00

08001b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_InitTick+0x54>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_InitTick+0x58>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	4619      	mov	r1, r3
 8001b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f000 f93b 	bl	8001dea <HAL_SYSTICK_Config>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00e      	b.n	8001b9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b0f      	cmp	r3, #15
 8001b82:	d80a      	bhi.n	8001b9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b84:	2200      	movs	r2, #0
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	f000 f911 	bl	8001db2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b90:	4a06      	ldr	r2, [pc, #24]	; (8001bac <HAL_InitTick+0x5c>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	e000      	b.n	8001b9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	20000008 	.word	0x20000008
 8001bac:	20000004 	.word	0x20000004

08001bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_IncTick+0x20>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_IncTick+0x24>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <HAL_IncTick+0x24>)
 8001bc2:	6013      	str	r3, [r2, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000008 	.word	0x20000008
 8001bd4:	2000019c 	.word	0x2000019c

08001bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return uwTick;
 8001bdc:	4b03      	ldr	r3, [pc, #12]	; (8001bec <HAL_GetTick+0x14>)
 8001bde:	681b      	ldr	r3, [r3, #0]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	2000019c 	.word	0x2000019c

08001bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf8:	f7ff ffee 	bl	8001bd8 <HAL_GetTick>
 8001bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c08:	d005      	beq.n	8001c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_Delay+0x44>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c16:	bf00      	nop
 8001c18:	f7ff ffde 	bl	8001bd8 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d8f7      	bhi.n	8001c18 <HAL_Delay+0x28>
  {
  }
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000008 	.word	0x20000008

08001c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <__NVIC_SetPriorityGrouping+0x44>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c54:	4013      	ands	r3, r2
 8001c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6a:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <__NVIC_SetPriorityGrouping+0x44>)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	60d3      	str	r3, [r2, #12]
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <__NVIC_GetPriorityGrouping+0x18>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	f003 0307 	and.w	r3, r3, #7
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	6039      	str	r1, [r7, #0]
 8001ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	db0a      	blt.n	8001cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	490c      	ldr	r1, [pc, #48]	; (8001ce8 <__NVIC_SetPriority+0x4c>)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	0112      	lsls	r2, r2, #4
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc4:	e00a      	b.n	8001cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4908      	ldr	r1, [pc, #32]	; (8001cec <__NVIC_SetPriority+0x50>)
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	3b04      	subs	r3, #4
 8001cd4:	0112      	lsls	r2, r2, #4
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	440b      	add	r3, r1
 8001cda:	761a      	strb	r2, [r3, #24]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000e100 	.word	0xe000e100
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b089      	sub	sp, #36	; 0x24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f1c3 0307 	rsb	r3, r3, #7
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	bf28      	it	cs
 8001d0e:	2304      	movcs	r3, #4
 8001d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3304      	adds	r3, #4
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d902      	bls.n	8001d20 <NVIC_EncodePriority+0x30>
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3b03      	subs	r3, #3
 8001d1e:	e000      	b.n	8001d22 <NVIC_EncodePriority+0x32>
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d24:	f04f 32ff 	mov.w	r2, #4294967295
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43da      	mvns	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	401a      	ands	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d38:	f04f 31ff 	mov.w	r1, #4294967295
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	43d9      	mvns	r1, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d48:	4313      	orrs	r3, r2
         );
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3724      	adds	r7, #36	; 0x24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d68:	d301      	bcc.n	8001d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e00f      	b.n	8001d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6e:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <SysTick_Config+0x40>)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d76:	210f      	movs	r1, #15
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7c:	f7ff ff8e 	bl	8001c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <SysTick_Config+0x40>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d86:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <SysTick_Config+0x40>)
 8001d88:	2207      	movs	r2, #7
 8001d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	e000e010 	.word	0xe000e010

08001d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff ff47 	bl	8001c38 <__NVIC_SetPriorityGrouping>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b086      	sub	sp, #24
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4603      	mov	r3, r0
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc4:	f7ff ff5c 	bl	8001c80 <__NVIC_GetPriorityGrouping>
 8001dc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68b9      	ldr	r1, [r7, #8]
 8001dce:	6978      	ldr	r0, [r7, #20]
 8001dd0:	f7ff ff8e 	bl	8001cf0 <NVIC_EncodePriority>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff5d 	bl	8001c9c <__NVIC_SetPriority>
}
 8001de2:	bf00      	nop
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff ffb0 	bl	8001d58 <SysTick_Config>
 8001df8:	4603      	mov	r3, r0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b089      	sub	sp, #36	; 0x24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	e159      	b.n	80020d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e20:	2201      	movs	r2, #1
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	f040 8148 	bne.w	80020ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d005      	beq.n	8001e56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d130      	bne.n	8001eb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	2203      	movs	r2, #3
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f003 0201 	and.w	r2, r3, #1
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d017      	beq.n	8001ef4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	2203      	movs	r2, #3
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d123      	bne.n	8001f48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	08da      	lsrs	r2, r3, #3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3208      	adds	r2, #8
 8001f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	220f      	movs	r2, #15
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	08da      	lsrs	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3208      	adds	r2, #8
 8001f42:	69b9      	ldr	r1, [r7, #24]
 8001f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	2203      	movs	r2, #3
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0203 	and.w	r2, r3, #3
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 80a2 	beq.w	80020ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	4b57      	ldr	r3, [pc, #348]	; (80020ec <HAL_GPIO_Init+0x2e8>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	4a56      	ldr	r2, [pc, #344]	; (80020ec <HAL_GPIO_Init+0x2e8>)
 8001f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f98:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9a:	4b54      	ldr	r3, [pc, #336]	; (80020ec <HAL_GPIO_Init+0x2e8>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fa6:	4a52      	ldr	r2, [pc, #328]	; (80020f0 <HAL_GPIO_Init+0x2ec>)
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	089b      	lsrs	r3, r3, #2
 8001fac:	3302      	adds	r3, #2
 8001fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	220f      	movs	r2, #15
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a49      	ldr	r2, [pc, #292]	; (80020f4 <HAL_GPIO_Init+0x2f0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d019      	beq.n	8002006 <HAL_GPIO_Init+0x202>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a48      	ldr	r2, [pc, #288]	; (80020f8 <HAL_GPIO_Init+0x2f4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d013      	beq.n	8002002 <HAL_GPIO_Init+0x1fe>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a47      	ldr	r2, [pc, #284]	; (80020fc <HAL_GPIO_Init+0x2f8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00d      	beq.n	8001ffe <HAL_GPIO_Init+0x1fa>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a46      	ldr	r2, [pc, #280]	; (8002100 <HAL_GPIO_Init+0x2fc>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d007      	beq.n	8001ffa <HAL_GPIO_Init+0x1f6>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a45      	ldr	r2, [pc, #276]	; (8002104 <HAL_GPIO_Init+0x300>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d101      	bne.n	8001ff6 <HAL_GPIO_Init+0x1f2>
 8001ff2:	2304      	movs	r3, #4
 8001ff4:	e008      	b.n	8002008 <HAL_GPIO_Init+0x204>
 8001ff6:	2307      	movs	r3, #7
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x204>
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e004      	b.n	8002008 <HAL_GPIO_Init+0x204>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e002      	b.n	8002008 <HAL_GPIO_Init+0x204>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_GPIO_Init+0x204>
 8002006:	2300      	movs	r3, #0
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	f002 0203 	and.w	r2, r2, #3
 800200e:	0092      	lsls	r2, r2, #2
 8002010:	4093      	lsls	r3, r2
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002018:	4935      	ldr	r1, [pc, #212]	; (80020f0 <HAL_GPIO_Init+0x2ec>)
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002026:	4b38      	ldr	r3, [pc, #224]	; (8002108 <HAL_GPIO_Init+0x304>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800204a:	4a2f      	ldr	r2, [pc, #188]	; (8002108 <HAL_GPIO_Init+0x304>)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002050:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <HAL_GPIO_Init+0x304>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002074:	4a24      	ldr	r2, [pc, #144]	; (8002108 <HAL_GPIO_Init+0x304>)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800207a:	4b23      	ldr	r3, [pc, #140]	; (8002108 <HAL_GPIO_Init+0x304>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800209e:	4a1a      	ldr	r2, [pc, #104]	; (8002108 <HAL_GPIO_Init+0x304>)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020a4:	4b18      	ldr	r3, [pc, #96]	; (8002108 <HAL_GPIO_Init+0x304>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020c8:	4a0f      	ldr	r2, [pc, #60]	; (8002108 <HAL_GPIO_Init+0x304>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3301      	adds	r3, #1
 80020d2:	61fb      	str	r3, [r7, #28]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	2b0f      	cmp	r3, #15
 80020d8:	f67f aea2 	bls.w	8001e20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	3724      	adds	r7, #36	; 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40013800 	.word	0x40013800
 80020f4:	40020000 	.word	0x40020000
 80020f8:	40020400 	.word	0x40020400
 80020fc:	40020800 	.word	0x40020800
 8002100:	40020c00 	.word	0x40020c00
 8002104:	40021000 	.word	0x40021000
 8002108:	40013c00 	.word	0x40013c00

0800210c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	807b      	strh	r3, [r7, #2]
 8002118:	4613      	mov	r3, r2
 800211a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800211c:	787b      	ldrb	r3, [r7, #1]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002122:	887a      	ldrh	r2, [r7, #2]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002128:	e003      	b.n	8002132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800212a:	887b      	ldrh	r3, [r7, #2]
 800212c:	041a      	lsls	r2, r3, #16
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	619a      	str	r2, [r3, #24]
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e12b      	b.n	80023aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d106      	bne.n	800216c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff fbda 	bl	8001920 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2224      	movs	r2, #36	; 0x24
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002192:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021a4:	f001 fd12 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 80021a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	4a81      	ldr	r2, [pc, #516]	; (80023b4 <HAL_I2C_Init+0x274>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d807      	bhi.n	80021c4 <HAL_I2C_Init+0x84>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4a80      	ldr	r2, [pc, #512]	; (80023b8 <HAL_I2C_Init+0x278>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	bf94      	ite	ls
 80021bc:	2301      	movls	r3, #1
 80021be:	2300      	movhi	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	e006      	b.n	80021d2 <HAL_I2C_Init+0x92>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4a7d      	ldr	r2, [pc, #500]	; (80023bc <HAL_I2C_Init+0x27c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	bf94      	ite	ls
 80021cc:	2301      	movls	r3, #1
 80021ce:	2300      	movhi	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e0e7      	b.n	80023aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4a78      	ldr	r2, [pc, #480]	; (80023c0 <HAL_I2C_Init+0x280>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	0c9b      	lsrs	r3, r3, #18
 80021e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	4a6a      	ldr	r2, [pc, #424]	; (80023b4 <HAL_I2C_Init+0x274>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d802      	bhi.n	8002214 <HAL_I2C_Init+0xd4>
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	3301      	adds	r3, #1
 8002212:	e009      	b.n	8002228 <HAL_I2C_Init+0xe8>
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800221a:	fb02 f303 	mul.w	r3, r2, r3
 800221e:	4a69      	ldr	r2, [pc, #420]	; (80023c4 <HAL_I2C_Init+0x284>)
 8002220:	fba2 2303 	umull	r2, r3, r2, r3
 8002224:	099b      	lsrs	r3, r3, #6
 8002226:	3301      	adds	r3, #1
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	430b      	orrs	r3, r1
 800222e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800223a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	495c      	ldr	r1, [pc, #368]	; (80023b4 <HAL_I2C_Init+0x274>)
 8002244:	428b      	cmp	r3, r1
 8002246:	d819      	bhi.n	800227c <HAL_I2C_Init+0x13c>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1e59      	subs	r1, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	fbb1 f3f3 	udiv	r3, r1, r3
 8002256:	1c59      	adds	r1, r3, #1
 8002258:	f640 73fc 	movw	r3, #4092	; 0xffc
 800225c:	400b      	ands	r3, r1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00a      	beq.n	8002278 <HAL_I2C_Init+0x138>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	1e59      	subs	r1, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002270:	3301      	adds	r3, #1
 8002272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002276:	e051      	b.n	800231c <HAL_I2C_Init+0x1dc>
 8002278:	2304      	movs	r3, #4
 800227a:	e04f      	b.n	800231c <HAL_I2C_Init+0x1dc>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d111      	bne.n	80022a8 <HAL_I2C_Init+0x168>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1e58      	subs	r0, r3, #1
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6859      	ldr	r1, [r3, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	440b      	add	r3, r1
 8002292:	fbb0 f3f3 	udiv	r3, r0, r3
 8002296:	3301      	adds	r3, #1
 8002298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf0c      	ite	eq
 80022a0:	2301      	moveq	r3, #1
 80022a2:	2300      	movne	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	e012      	b.n	80022ce <HAL_I2C_Init+0x18e>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1e58      	subs	r0, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6859      	ldr	r1, [r3, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	0099      	lsls	r1, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80022be:	3301      	adds	r3, #1
 80022c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	bf0c      	ite	eq
 80022c8:	2301      	moveq	r3, #1
 80022ca:	2300      	movne	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_I2C_Init+0x196>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e022      	b.n	800231c <HAL_I2C_Init+0x1dc>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10e      	bne.n	80022fc <HAL_I2C_Init+0x1bc>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1e58      	subs	r0, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6859      	ldr	r1, [r3, #4]
 80022e6:	460b      	mov	r3, r1
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	440b      	add	r3, r1
 80022ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80022f0:	3301      	adds	r3, #1
 80022f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022fa:	e00f      	b.n	800231c <HAL_I2C_Init+0x1dc>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1e58      	subs	r0, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6859      	ldr	r1, [r3, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	0099      	lsls	r1, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002312:	3301      	adds	r3, #1
 8002314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002318:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	6809      	ldr	r1, [r1, #0]
 8002320:	4313      	orrs	r3, r2
 8002322:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69da      	ldr	r2, [r3, #28]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800234a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6911      	ldr	r1, [r2, #16]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68d2      	ldr	r2, [r2, #12]
 8002356:	4311      	orrs	r1, r2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	430b      	orrs	r3, r1
 800235e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695a      	ldr	r2, [r3, #20]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2220      	movs	r2, #32
 8002396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	000186a0 	.word	0x000186a0
 80023b8:	001e847f 	.word	0x001e847f
 80023bc:	003d08ff 	.word	0x003d08ff
 80023c0:	431bde83 	.word	0x431bde83
 80023c4:	10624dd3 	.word	0x10624dd3

080023c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af02      	add	r7, sp, #8
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	607a      	str	r2, [r7, #4]
 80023d2:	461a      	mov	r2, r3
 80023d4:	460b      	mov	r3, r1
 80023d6:	817b      	strh	r3, [r7, #10]
 80023d8:	4613      	mov	r3, r2
 80023da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023dc:	f7ff fbfc 	bl	8001bd8 <HAL_GetTick>
 80023e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b20      	cmp	r3, #32
 80023ec:	f040 80e0 	bne.w	80025b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	2319      	movs	r3, #25
 80023f6:	2201      	movs	r2, #1
 80023f8:	4970      	ldr	r1, [pc, #448]	; (80025bc <HAL_I2C_Master_Transmit+0x1f4>)
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 fde8 	bl	8002fd0 <I2C_WaitOnFlagUntilTimeout>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002406:	2302      	movs	r3, #2
 8002408:	e0d3      	b.n	80025b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_I2C_Master_Transmit+0x50>
 8002414:	2302      	movs	r3, #2
 8002416:	e0cc      	b.n	80025b2 <HAL_I2C_Master_Transmit+0x1ea>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b01      	cmp	r3, #1
 800242c:	d007      	beq.n	800243e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0201 	orr.w	r2, r2, #1
 800243c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800244c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2221      	movs	r2, #33	; 0x21
 8002452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2210      	movs	r2, #16
 800245a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	893a      	ldrh	r2, [r7, #8]
 800246e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4a50      	ldr	r2, [pc, #320]	; (80025c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800247e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002480:	8979      	ldrh	r1, [r7, #10]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	6a3a      	ldr	r2, [r7, #32]
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 fbbc 	bl	8002c04 <I2C_MasterRequestWrite>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e08d      	b.n	80025b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002496:	2300      	movs	r3, #0
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024ac:	e066      	b.n	800257c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	6a39      	ldr	r1, [r7, #32]
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 fe62 	bl	800317c <I2C_WaitOnTXEFlagUntilTimeout>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00d      	beq.n	80024da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d107      	bne.n	80024d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e06b      	b.n	80025b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	781a      	ldrb	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002502:	3b01      	subs	r3, #1
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b04      	cmp	r3, #4
 8002516:	d11b      	bne.n	8002550 <HAL_I2C_Master_Transmit+0x188>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251c:	2b00      	cmp	r3, #0
 800251e:	d017      	beq.n	8002550 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	781a      	ldrb	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253a:	b29b      	uxth	r3, r3
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	6a39      	ldr	r1, [r7, #32]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 fe52 	bl	80031fe <I2C_WaitOnBTFFlagUntilTimeout>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00d      	beq.n	800257c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	2b04      	cmp	r3, #4
 8002566:	d107      	bne.n	8002578 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002576:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e01a      	b.n	80025b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002580:	2b00      	cmp	r3, #0
 8002582:	d194      	bne.n	80024ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002592:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2220      	movs	r2, #32
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	e000      	b.n	80025b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025b0:	2302      	movs	r3, #2
  }
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	00100002 	.word	0x00100002
 80025c0:	ffff0000 	.word	0xffff0000

080025c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08c      	sub	sp, #48	; 0x30
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	461a      	mov	r2, r3
 80025d0:	460b      	mov	r3, r1
 80025d2:	817b      	strh	r3, [r7, #10]
 80025d4:	4613      	mov	r3, r2
 80025d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025d8:	f7ff fafe 	bl	8001bd8 <HAL_GetTick>
 80025dc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b20      	cmp	r3, #32
 80025e8:	f040 820b 	bne.w	8002a02 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	2319      	movs	r3, #25
 80025f2:	2201      	movs	r2, #1
 80025f4:	497c      	ldr	r1, [pc, #496]	; (80027e8 <HAL_I2C_Master_Receive+0x224>)
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 fcea 	bl	8002fd0 <I2C_WaitOnFlagUntilTimeout>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002602:	2302      	movs	r3, #2
 8002604:	e1fe      	b.n	8002a04 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_I2C_Master_Receive+0x50>
 8002610:	2302      	movs	r3, #2
 8002612:	e1f7      	b.n	8002a04 <HAL_I2C_Master_Receive+0x440>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b01      	cmp	r3, #1
 8002628:	d007      	beq.n	800263a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 0201 	orr.w	r2, r2, #1
 8002638:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002648:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2222      	movs	r2, #34	; 0x22
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2210      	movs	r2, #16
 8002656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	893a      	ldrh	r2, [r7, #8]
 800266a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	4a5c      	ldr	r2, [pc, #368]	; (80027ec <HAL_I2C_Master_Receive+0x228>)
 800267a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800267c:	8979      	ldrh	r1, [r7, #10]
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 fb40 	bl	8002d08 <I2C_MasterRequestRead>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e1b8      	b.n	8002a04 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002696:	2b00      	cmp	r3, #0
 8002698:	d113      	bne.n	80026c2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800269a:	2300      	movs	r3, #0
 800269c:	623b      	str	r3, [r7, #32]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	623b      	str	r3, [r7, #32]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	623b      	str	r3, [r7, #32]
 80026ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	e18c      	b.n	80029dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d11b      	bne.n	8002702 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	61fb      	str	r3, [r7, #28]
 80026ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	e16c      	b.n	80029dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002706:	2b02      	cmp	r3, #2
 8002708:	d11b      	bne.n	8002742 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002718:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002728:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800272a:	2300      	movs	r3, #0
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	61bb      	str	r3, [r7, #24]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	e14c      	b.n	80029dc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002750:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002768:	e138      	b.n	80029dc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276e:	2b03      	cmp	r3, #3
 8002770:	f200 80f1 	bhi.w	8002956 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002778:	2b01      	cmp	r3, #1
 800277a:	d123      	bne.n	80027c4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800277c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800277e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 fd7d 	bl	8003280 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e139      	b.n	8002a04 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027c2:	e10b      	b.n	80029dc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d14e      	bne.n	800286a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d2:	2200      	movs	r2, #0
 80027d4:	4906      	ldr	r1, [pc, #24]	; (80027f0 <HAL_I2C_Master_Receive+0x22c>)
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 fbfa 	bl	8002fd0 <I2C_WaitOnFlagUntilTimeout>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d008      	beq.n	80027f4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e10e      	b.n	8002a04 <HAL_I2C_Master_Receive+0x440>
 80027e6:	bf00      	nop
 80027e8:	00100002 	.word	0x00100002
 80027ec:	ffff0000 	.word	0xffff0000
 80027f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002802:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002820:	3b01      	subs	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282c:	b29b      	uxth	r3, r3
 800282e:	3b01      	subs	r3, #1
 8002830:	b29a      	uxth	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285e:	b29b      	uxth	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002868:	e0b8      	b.n	80029dc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002870:	2200      	movs	r2, #0
 8002872:	4966      	ldr	r1, [pc, #408]	; (8002a0c <HAL_I2C_Master_Receive+0x448>)
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 fbab 	bl	8002fd0 <I2C_WaitOnFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0bf      	b.n	8002a04 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002892:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691a      	ldr	r2, [r3, #16]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028cc:	2200      	movs	r2, #0
 80028ce:	494f      	ldr	r1, [pc, #316]	; (8002a0c <HAL_I2C_Master_Receive+0x448>)
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 fb7d 	bl	8002fd0 <I2C_WaitOnFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e091      	b.n	8002a04 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293e:	3b01      	subs	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294a:	b29b      	uxth	r3, r3
 800294c:	3b01      	subs	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002954:	e042      	b.n	80029dc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002958:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 fc90 	bl	8003280 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e04c      	b.n	8002a04 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002986:	3b01      	subs	r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002992:	b29b      	uxth	r3, r3
 8002994:	3b01      	subs	r3, #1
 8002996:	b29a      	uxth	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d118      	bne.n	80029dc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f47f aec2 	bne.w	800276a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2220      	movs	r2, #32
 80029ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	e000      	b.n	8002a04 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a02:	2302      	movs	r3, #2
  }
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3728      	adds	r7, #40	; 0x28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	00010004 	.word	0x00010004

08002a10 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	4608      	mov	r0, r1
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4603      	mov	r3, r0
 8002a20:	817b      	strh	r3, [r7, #10]
 8002a22:	460b      	mov	r3, r1
 8002a24:	813b      	strh	r3, [r7, #8]
 8002a26:	4613      	mov	r3, r2
 8002a28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a2a:	f7ff f8d5 	bl	8001bd8 <HAL_GetTick>
 8002a2e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b20      	cmp	r3, #32
 8002a3a:	f040 80d9 	bne.w	8002bf0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	2319      	movs	r3, #25
 8002a44:	2201      	movs	r2, #1
 8002a46:	496d      	ldr	r1, [pc, #436]	; (8002bfc <HAL_I2C_Mem_Write+0x1ec>)
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 fac1 	bl	8002fd0 <I2C_WaitOnFlagUntilTimeout>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a54:	2302      	movs	r3, #2
 8002a56:	e0cc      	b.n	8002bf2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_I2C_Mem_Write+0x56>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e0c5      	b.n	8002bf2 <HAL_I2C_Mem_Write+0x1e2>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d007      	beq.n	8002a8c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0201 	orr.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2221      	movs	r2, #33	; 0x21
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2240      	movs	r2, #64	; 0x40
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a3a      	ldr	r2, [r7, #32]
 8002ab6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002abc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4a4d      	ldr	r2, [pc, #308]	; (8002c00 <HAL_I2C_Mem_Write+0x1f0>)
 8002acc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ace:	88f8      	ldrh	r0, [r7, #6]
 8002ad0:	893a      	ldrh	r2, [r7, #8]
 8002ad2:	8979      	ldrh	r1, [r7, #10]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	9301      	str	r3, [sp, #4]
 8002ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	4603      	mov	r3, r0
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 f9e0 	bl	8002ea4 <I2C_RequestMemoryWrite>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d052      	beq.n	8002b90 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e081      	b.n	8002bf2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fb42 	bl	800317c <I2C_WaitOnTXEFlagUntilTimeout>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00d      	beq.n	8002b1a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d107      	bne.n	8002b16 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e06b      	b.n	8002bf2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	781a      	ldrb	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b04      	cmp	r3, #4
 8002b56:	d11b      	bne.n	8002b90 <HAL_I2C_Mem_Write+0x180>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d017      	beq.n	8002b90 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	781a      	ldrb	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1aa      	bne.n	8002aee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 fb2e 	bl	80031fe <I2C_WaitOnBTFFlagUntilTimeout>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00d      	beq.n	8002bc4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d107      	bne.n	8002bc0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bbe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e016      	b.n	8002bf2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	e000      	b.n	8002bf2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002bf0:	2302      	movs	r3, #2
  }
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	00100002 	.word	0x00100002
 8002c00:	ffff0000 	.word	0xffff0000

08002c04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	607a      	str	r2, [r7, #4]
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	460b      	mov	r3, r1
 8002c12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d006      	beq.n	8002c2e <I2C_MasterRequestWrite+0x2a>
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d003      	beq.n	8002c2e <I2C_MasterRequestWrite+0x2a>
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c2c:	d108      	bne.n	8002c40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	e00b      	b.n	8002c58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	2b12      	cmp	r3, #18
 8002c46:	d107      	bne.n	8002c58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 f9b3 	bl	8002fd0 <I2C_WaitOnFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00d      	beq.n	8002c8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c7e:	d103      	bne.n	8002c88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e035      	b.n	8002cf8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c94:	d108      	bne.n	8002ca8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c96:	897b      	ldrh	r3, [r7, #10]
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ca4:	611a      	str	r2, [r3, #16]
 8002ca6:	e01b      	b.n	8002ce0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ca8:	897b      	ldrh	r3, [r7, #10]
 8002caa:	11db      	asrs	r3, r3, #7
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	f003 0306 	and.w	r3, r3, #6
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	f063 030f 	orn	r3, r3, #15
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	490e      	ldr	r1, [pc, #56]	; (8002d00 <I2C_MasterRequestWrite+0xfc>)
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f9d9 	bl	800307e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e010      	b.n	8002cf8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cd6:	897b      	ldrh	r3, [r7, #10]
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	4907      	ldr	r1, [pc, #28]	; (8002d04 <I2C_MasterRequestWrite+0x100>)
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f9c9 	bl	800307e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	00010008 	.word	0x00010008
 8002d04:	00010002 	.word	0x00010002

08002d08 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	607a      	str	r2, [r7, #4]
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	460b      	mov	r3, r1
 8002d16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d2c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d006      	beq.n	8002d42 <I2C_MasterRequestRead+0x3a>
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d003      	beq.n	8002d42 <I2C_MasterRequestRead+0x3a>
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d40:	d108      	bne.n	8002d54 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e00b      	b.n	8002d6c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d58:	2b11      	cmp	r3, #17
 8002d5a:	d107      	bne.n	8002d6c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f929 	bl	8002fd0 <I2C_WaitOnFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00d      	beq.n	8002da0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d92:	d103      	bne.n	8002d9c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e079      	b.n	8002e94 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002da8:	d108      	bne.n	8002dbc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002daa:	897b      	ldrh	r3, [r7, #10]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	611a      	str	r2, [r3, #16]
 8002dba:	e05f      	b.n	8002e7c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002dbc:	897b      	ldrh	r3, [r7, #10]
 8002dbe:	11db      	asrs	r3, r3, #7
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	f003 0306 	and.w	r3, r3, #6
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f063 030f 	orn	r3, r3, #15
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	4930      	ldr	r1, [pc, #192]	; (8002e9c <I2C_MasterRequestRead+0x194>)
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f94f 	bl	800307e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e054      	b.n	8002e94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dea:	897b      	ldrh	r3, [r7, #10]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	4929      	ldr	r1, [pc, #164]	; (8002ea0 <I2C_MasterRequestRead+0x198>)
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f93f 	bl	800307e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e044      	b.n	8002e94 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e2e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 f8c7 	bl	8002fd0 <I2C_WaitOnFlagUntilTimeout>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00d      	beq.n	8002e64 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e56:	d103      	bne.n	8002e60 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e5e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e017      	b.n	8002e94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002e64:	897b      	ldrh	r3, [r7, #10]
 8002e66:	11db      	asrs	r3, r3, #7
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	f003 0306 	and.w	r3, r3, #6
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f063 030e 	orn	r3, r3, #14
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4907      	ldr	r1, [pc, #28]	; (8002ea0 <I2C_MasterRequestRead+0x198>)
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f8fb 	bl	800307e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	00010008 	.word	0x00010008
 8002ea0:	00010002 	.word	0x00010002

08002ea4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b088      	sub	sp, #32
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	4608      	mov	r0, r1
 8002eae:	4611      	mov	r1, r2
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	817b      	strh	r3, [r7, #10]
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	813b      	strh	r3, [r7, #8]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ecc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 f878 	bl	8002fd0 <I2C_WaitOnFlagUntilTimeout>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00d      	beq.n	8002f02 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ef4:	d103      	bne.n	8002efe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e05f      	b.n	8002fc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f02:	897b      	ldrh	r3, [r7, #10]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	461a      	mov	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	6a3a      	ldr	r2, [r7, #32]
 8002f16:	492d      	ldr	r1, [pc, #180]	; (8002fcc <I2C_RequestMemoryWrite+0x128>)
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f8b0 	bl	800307e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e04c      	b.n	8002fc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f40:	6a39      	ldr	r1, [r7, #32]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f91a 	bl	800317c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00d      	beq.n	8002f6a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d107      	bne.n	8002f66 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e02b      	b.n	8002fc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d105      	bne.n	8002f7c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f70:	893b      	ldrh	r3, [r7, #8]
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	611a      	str	r2, [r3, #16]
 8002f7a:	e021      	b.n	8002fc0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f7c:	893b      	ldrh	r3, [r7, #8]
 8002f7e:	0a1b      	lsrs	r3, r3, #8
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f8c:	6a39      	ldr	r1, [r7, #32]
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 f8f4 	bl	800317c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00d      	beq.n	8002fb6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d107      	bne.n	8002fb2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e005      	b.n	8002fc2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fb6:	893b      	ldrh	r3, [r7, #8]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	00010002 	.word	0x00010002

08002fd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	603b      	str	r3, [r7, #0]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fe0:	e025      	b.n	800302e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d021      	beq.n	800302e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fea:	f7fe fdf5 	bl	8001bd8 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d302      	bcc.n	8003000 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d116      	bne.n	800302e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f043 0220 	orr.w	r2, r3, #32
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e023      	b.n	8003076 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	0c1b      	lsrs	r3, r3, #16
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b01      	cmp	r3, #1
 8003036:	d10d      	bne.n	8003054 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	43da      	mvns	r2, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	4013      	ands	r3, r2
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	bf0c      	ite	eq
 800304a:	2301      	moveq	r3, #1
 800304c:	2300      	movne	r3, #0
 800304e:	b2db      	uxtb	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	e00c      	b.n	800306e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	43da      	mvns	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4013      	ands	r3, r2
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	bf0c      	ite	eq
 8003066:	2301      	moveq	r3, #1
 8003068:	2300      	movne	r3, #0
 800306a:	b2db      	uxtb	r3, r3
 800306c:	461a      	mov	r2, r3
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	429a      	cmp	r2, r3
 8003072:	d0b6      	beq.n	8002fe2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b084      	sub	sp, #16
 8003082:	af00      	add	r7, sp, #0
 8003084:	60f8      	str	r0, [r7, #12]
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800308c:	e051      	b.n	8003132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800309c:	d123      	bne.n	80030e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f043 0204 	orr.w	r2, r3, #4
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e046      	b.n	8003174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ec:	d021      	beq.n	8003132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ee:	f7fe fd73 	bl	8001bd8 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d302      	bcc.n	8003104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d116      	bne.n	8003132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f043 0220 	orr.w	r2, r3, #32
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e020      	b.n	8003174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	0c1b      	lsrs	r3, r3, #16
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b01      	cmp	r3, #1
 800313a:	d10c      	bne.n	8003156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	43da      	mvns	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	4013      	ands	r3, r2
 8003148:	b29b      	uxth	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	bf14      	ite	ne
 800314e:	2301      	movne	r3, #1
 8003150:	2300      	moveq	r3, #0
 8003152:	b2db      	uxtb	r3, r3
 8003154:	e00b      	b.n	800316e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	43da      	mvns	r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	4013      	ands	r3, r2
 8003162:	b29b      	uxth	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	bf14      	ite	ne
 8003168:	2301      	movne	r3, #1
 800316a:	2300      	moveq	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d18d      	bne.n	800308e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003188:	e02d      	b.n	80031e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f8ce 	bl	800332c <I2C_IsAcknowledgeFailed>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e02d      	b.n	80031f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a0:	d021      	beq.n	80031e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a2:	f7fe fd19 	bl	8001bd8 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d302      	bcc.n	80031b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d116      	bne.n	80031e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f043 0220 	orr.w	r2, r3, #32
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e007      	b.n	80031f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f0:	2b80      	cmp	r3, #128	; 0x80
 80031f2:	d1ca      	bne.n	800318a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800320a:	e02d      	b.n	8003268 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 f88d 	bl	800332c <I2C_IsAcknowledgeFailed>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e02d      	b.n	8003278 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003222:	d021      	beq.n	8003268 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003224:	f7fe fcd8 	bl	8001bd8 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	429a      	cmp	r2, r3
 8003232:	d302      	bcc.n	800323a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d116      	bne.n	8003268 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	f043 0220 	orr.w	r2, r3, #32
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e007      	b.n	8003278 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b04      	cmp	r3, #4
 8003274:	d1ca      	bne.n	800320c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800328c:	e042      	b.n	8003314 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	2b10      	cmp	r3, #16
 800329a:	d119      	bne.n	80032d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f06f 0210 	mvn.w	r2, #16
 80032a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e029      	b.n	8003324 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d0:	f7fe fc82 	bl	8001bd8 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d302      	bcc.n	80032e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d116      	bne.n	8003314 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	f043 0220 	orr.w	r2, r3, #32
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e007      	b.n	8003324 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331e:	2b40      	cmp	r3, #64	; 0x40
 8003320:	d1b5      	bne.n	800328e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003342:	d11b      	bne.n	800337c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800334c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	f043 0204 	orr.w	r2, r3, #4
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
	...

0800338c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e264      	b.n	8003868 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d075      	beq.n	8003496 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033aa:	4ba3      	ldr	r3, [pc, #652]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d00c      	beq.n	80033d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033b6:	4ba0      	ldr	r3, [pc, #640]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d112      	bne.n	80033e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033c2:	4b9d      	ldr	r3, [pc, #628]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ce:	d10b      	bne.n	80033e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d0:	4b99      	ldr	r3, [pc, #612]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d05b      	beq.n	8003494 <HAL_RCC_OscConfig+0x108>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d157      	bne.n	8003494 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e23f      	b.n	8003868 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f0:	d106      	bne.n	8003400 <HAL_RCC_OscConfig+0x74>
 80033f2:	4b91      	ldr	r3, [pc, #580]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a90      	ldr	r2, [pc, #576]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 80033f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	e01d      	b.n	800343c <HAL_RCC_OscConfig+0xb0>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003408:	d10c      	bne.n	8003424 <HAL_RCC_OscConfig+0x98>
 800340a:	4b8b      	ldr	r3, [pc, #556]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a8a      	ldr	r2, [pc, #552]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 8003410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	4b88      	ldr	r3, [pc, #544]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a87      	ldr	r2, [pc, #540]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 800341c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	e00b      	b.n	800343c <HAL_RCC_OscConfig+0xb0>
 8003424:	4b84      	ldr	r3, [pc, #528]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a83      	ldr	r2, [pc, #524]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 800342a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800342e:	6013      	str	r3, [r2, #0]
 8003430:	4b81      	ldr	r3, [pc, #516]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a80      	ldr	r2, [pc, #512]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 8003436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800343a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d013      	beq.n	800346c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7fe fbc8 	bl	8001bd8 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800344c:	f7fe fbc4 	bl	8001bd8 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	; 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e204      	b.n	8003868 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345e:	4b76      	ldr	r3, [pc, #472]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0xc0>
 800346a:	e014      	b.n	8003496 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fe fbb4 	bl	8001bd8 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003474:	f7fe fbb0 	bl	8001bd8 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b64      	cmp	r3, #100	; 0x64
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e1f0      	b.n	8003868 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003486:	4b6c      	ldr	r3, [pc, #432]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0xe8>
 8003492:	e000      	b.n	8003496 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d063      	beq.n	800356a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034a2:	4b65      	ldr	r3, [pc, #404]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 030c 	and.w	r3, r3, #12
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00b      	beq.n	80034c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ae:	4b62      	ldr	r3, [pc, #392]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d11c      	bne.n	80034f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ba:	4b5f      	ldr	r3, [pc, #380]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d116      	bne.n	80034f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c6:	4b5c      	ldr	r3, [pc, #368]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d005      	beq.n	80034de <HAL_RCC_OscConfig+0x152>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d001      	beq.n	80034de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e1c4      	b.n	8003868 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034de:	4b56      	ldr	r3, [pc, #344]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4952      	ldr	r1, [pc, #328]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f2:	e03a      	b.n	800356a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d020      	beq.n	800353e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034fc:	4b4f      	ldr	r3, [pc, #316]	; (800363c <HAL_RCC_OscConfig+0x2b0>)
 80034fe:	2201      	movs	r2, #1
 8003500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003502:	f7fe fb69 	bl	8001bd8 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800350a:	f7fe fb65 	bl	8001bd8 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e1a5      	b.n	8003868 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800351c:	4b46      	ldr	r3, [pc, #280]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0f0      	beq.n	800350a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003528:	4b43      	ldr	r3, [pc, #268]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	4940      	ldr	r1, [pc, #256]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 8003538:	4313      	orrs	r3, r2
 800353a:	600b      	str	r3, [r1, #0]
 800353c:	e015      	b.n	800356a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800353e:	4b3f      	ldr	r3, [pc, #252]	; (800363c <HAL_RCC_OscConfig+0x2b0>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7fe fb48 	bl	8001bd8 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800354c:	f7fe fb44 	bl	8001bd8 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e184      	b.n	8003868 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355e:	4b36      	ldr	r3, [pc, #216]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d030      	beq.n	80035d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d016      	beq.n	80035ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800357e:	4b30      	ldr	r3, [pc, #192]	; (8003640 <HAL_RCC_OscConfig+0x2b4>)
 8003580:	2201      	movs	r2, #1
 8003582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003584:	f7fe fb28 	bl	8001bd8 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800358c:	f7fe fb24 	bl	8001bd8 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e164      	b.n	8003868 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359e:	4b26      	ldr	r3, [pc, #152]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 80035a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f0      	beq.n	800358c <HAL_RCC_OscConfig+0x200>
 80035aa:	e015      	b.n	80035d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ac:	4b24      	ldr	r3, [pc, #144]	; (8003640 <HAL_RCC_OscConfig+0x2b4>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b2:	f7fe fb11 	bl	8001bd8 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ba:	f7fe fb0d 	bl	8001bd8 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e14d      	b.n	8003868 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035cc:	4b1a      	ldr	r3, [pc, #104]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 80035ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1f0      	bne.n	80035ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 80a0 	beq.w	8003726 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035e6:	2300      	movs	r3, #0
 80035e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ea:	4b13      	ldr	r3, [pc, #76]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10f      	bne.n	8003616 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	4b0f      	ldr	r3, [pc, #60]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	4a0e      	ldr	r2, [pc, #56]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 8003600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003604:	6413      	str	r3, [r2, #64]	; 0x40
 8003606:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <HAL_RCC_OscConfig+0x2ac>)
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360e:	60bb      	str	r3, [r7, #8]
 8003610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003612:	2301      	movs	r3, #1
 8003614:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003616:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <HAL_RCC_OscConfig+0x2b8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361e:	2b00      	cmp	r3, #0
 8003620:	d121      	bne.n	8003666 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003622:	4b08      	ldr	r3, [pc, #32]	; (8003644 <HAL_RCC_OscConfig+0x2b8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a07      	ldr	r2, [pc, #28]	; (8003644 <HAL_RCC_OscConfig+0x2b8>)
 8003628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800362e:	f7fe fad3 	bl	8001bd8 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003634:	e011      	b.n	800365a <HAL_RCC_OscConfig+0x2ce>
 8003636:	bf00      	nop
 8003638:	40023800 	.word	0x40023800
 800363c:	42470000 	.word	0x42470000
 8003640:	42470e80 	.word	0x42470e80
 8003644:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003648:	f7fe fac6 	bl	8001bd8 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e106      	b.n	8003868 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365a:	4b85      	ldr	r3, [pc, #532]	; (8003870 <HAL_RCC_OscConfig+0x4e4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d106      	bne.n	800367c <HAL_RCC_OscConfig+0x2f0>
 800366e:	4b81      	ldr	r3, [pc, #516]	; (8003874 <HAL_RCC_OscConfig+0x4e8>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	4a80      	ldr	r2, [pc, #512]	; (8003874 <HAL_RCC_OscConfig+0x4e8>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	6713      	str	r3, [r2, #112]	; 0x70
 800367a:	e01c      	b.n	80036b6 <HAL_RCC_OscConfig+0x32a>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b05      	cmp	r3, #5
 8003682:	d10c      	bne.n	800369e <HAL_RCC_OscConfig+0x312>
 8003684:	4b7b      	ldr	r3, [pc, #492]	; (8003874 <HAL_RCC_OscConfig+0x4e8>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	4a7a      	ldr	r2, [pc, #488]	; (8003874 <HAL_RCC_OscConfig+0x4e8>)
 800368a:	f043 0304 	orr.w	r3, r3, #4
 800368e:	6713      	str	r3, [r2, #112]	; 0x70
 8003690:	4b78      	ldr	r3, [pc, #480]	; (8003874 <HAL_RCC_OscConfig+0x4e8>)
 8003692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003694:	4a77      	ldr	r2, [pc, #476]	; (8003874 <HAL_RCC_OscConfig+0x4e8>)
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	6713      	str	r3, [r2, #112]	; 0x70
 800369c:	e00b      	b.n	80036b6 <HAL_RCC_OscConfig+0x32a>
 800369e:	4b75      	ldr	r3, [pc, #468]	; (8003874 <HAL_RCC_OscConfig+0x4e8>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a2:	4a74      	ldr	r2, [pc, #464]	; (8003874 <HAL_RCC_OscConfig+0x4e8>)
 80036a4:	f023 0301 	bic.w	r3, r3, #1
 80036a8:	6713      	str	r3, [r2, #112]	; 0x70
 80036aa:	4b72      	ldr	r3, [pc, #456]	; (8003874 <HAL_RCC_OscConfig+0x4e8>)
 80036ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ae:	4a71      	ldr	r2, [pc, #452]	; (8003874 <HAL_RCC_OscConfig+0x4e8>)
 80036b0:	f023 0304 	bic.w	r3, r3, #4
 80036b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d015      	beq.n	80036ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036be:	f7fe fa8b 	bl	8001bd8 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c4:	e00a      	b.n	80036dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c6:	f7fe fa87 	bl	8001bd8 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e0c5      	b.n	8003868 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036dc:	4b65      	ldr	r3, [pc, #404]	; (8003874 <HAL_RCC_OscConfig+0x4e8>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0ee      	beq.n	80036c6 <HAL_RCC_OscConfig+0x33a>
 80036e8:	e014      	b.n	8003714 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ea:	f7fe fa75 	bl	8001bd8 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f0:	e00a      	b.n	8003708 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f2:	f7fe fa71 	bl	8001bd8 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003700:	4293      	cmp	r3, r2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e0af      	b.n	8003868 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003708:	4b5a      	ldr	r3, [pc, #360]	; (8003874 <HAL_RCC_OscConfig+0x4e8>)
 800370a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1ee      	bne.n	80036f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003714:	7dfb      	ldrb	r3, [r7, #23]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d105      	bne.n	8003726 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800371a:	4b56      	ldr	r3, [pc, #344]	; (8003874 <HAL_RCC_OscConfig+0x4e8>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	4a55      	ldr	r2, [pc, #340]	; (8003874 <HAL_RCC_OscConfig+0x4e8>)
 8003720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003724:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 809b 	beq.w	8003866 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003730:	4b50      	ldr	r3, [pc, #320]	; (8003874 <HAL_RCC_OscConfig+0x4e8>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 030c 	and.w	r3, r3, #12
 8003738:	2b08      	cmp	r3, #8
 800373a:	d05c      	beq.n	80037f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	2b02      	cmp	r3, #2
 8003742:	d141      	bne.n	80037c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003744:	4b4c      	ldr	r3, [pc, #304]	; (8003878 <HAL_RCC_OscConfig+0x4ec>)
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374a:	f7fe fa45 	bl	8001bd8 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003752:	f7fe fa41 	bl	8001bd8 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e081      	b.n	8003868 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003764:	4b43      	ldr	r3, [pc, #268]	; (8003874 <HAL_RCC_OscConfig+0x4e8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1f0      	bne.n	8003752 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	69da      	ldr	r2, [r3, #28]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	431a      	orrs	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	019b      	lsls	r3, r3, #6
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003786:	085b      	lsrs	r3, r3, #1
 8003788:	3b01      	subs	r3, #1
 800378a:	041b      	lsls	r3, r3, #16
 800378c:	431a      	orrs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	061b      	lsls	r3, r3, #24
 8003794:	4937      	ldr	r1, [pc, #220]	; (8003874 <HAL_RCC_OscConfig+0x4e8>)
 8003796:	4313      	orrs	r3, r2
 8003798:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800379a:	4b37      	ldr	r3, [pc, #220]	; (8003878 <HAL_RCC_OscConfig+0x4ec>)
 800379c:	2201      	movs	r2, #1
 800379e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7fe fa1a 	bl	8001bd8 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a8:	f7fe fa16 	bl	8001bd8 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e056      	b.n	8003868 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ba:	4b2e      	ldr	r3, [pc, #184]	; (8003874 <HAL_RCC_OscConfig+0x4e8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0f0      	beq.n	80037a8 <HAL_RCC_OscConfig+0x41c>
 80037c6:	e04e      	b.n	8003866 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c8:	4b2b      	ldr	r3, [pc, #172]	; (8003878 <HAL_RCC_OscConfig+0x4ec>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ce:	f7fe fa03 	bl	8001bd8 <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d4:	e008      	b.n	80037e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d6:	f7fe f9ff 	bl	8001bd8 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e03f      	b.n	8003868 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e8:	4b22      	ldr	r3, [pc, #136]	; (8003874 <HAL_RCC_OscConfig+0x4e8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1f0      	bne.n	80037d6 <HAL_RCC_OscConfig+0x44a>
 80037f4:	e037      	b.n	8003866 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e032      	b.n	8003868 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003802:	4b1c      	ldr	r3, [pc, #112]	; (8003874 <HAL_RCC_OscConfig+0x4e8>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d028      	beq.n	8003862 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d121      	bne.n	8003862 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003828:	429a      	cmp	r2, r3
 800382a:	d11a      	bne.n	8003862 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003832:	4013      	ands	r3, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003838:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800383a:	4293      	cmp	r3, r2
 800383c:	d111      	bne.n	8003862 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003848:	085b      	lsrs	r3, r3, #1
 800384a:	3b01      	subs	r3, #1
 800384c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800384e:	429a      	cmp	r2, r3
 8003850:	d107      	bne.n	8003862 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800385e:	429a      	cmp	r2, r3
 8003860:	d001      	beq.n	8003866 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40007000 	.word	0x40007000
 8003874:	40023800 	.word	0x40023800
 8003878:	42470060 	.word	0x42470060

0800387c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0cc      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003890:	4b68      	ldr	r3, [pc, #416]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d90c      	bls.n	80038b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389e:	4b65      	ldr	r3, [pc, #404]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a6:	4b63      	ldr	r3, [pc, #396]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0b8      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d020      	beq.n	8003906 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d0:	4b59      	ldr	r3, [pc, #356]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	4a58      	ldr	r2, [pc, #352]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038e8:	4b53      	ldr	r3, [pc, #332]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4a52      	ldr	r2, [pc, #328]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f4:	4b50      	ldr	r3, [pc, #320]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	494d      	ldr	r1, [pc, #308]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	4313      	orrs	r3, r2
 8003904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d044      	beq.n	800399c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d107      	bne.n	800392a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391a:	4b47      	ldr	r3, [pc, #284]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d119      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e07f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d003      	beq.n	800393a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003936:	2b03      	cmp	r3, #3
 8003938:	d107      	bne.n	800394a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393a:	4b3f      	ldr	r3, [pc, #252]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d109      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e06f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394a:	4b3b      	ldr	r3, [pc, #236]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e067      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800395a:	4b37      	ldr	r3, [pc, #220]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f023 0203 	bic.w	r2, r3, #3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4934      	ldr	r1, [pc, #208]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	4313      	orrs	r3, r2
 800396a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800396c:	f7fe f934 	bl	8001bd8 <HAL_GetTick>
 8003970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003972:	e00a      	b.n	800398a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003974:	f7fe f930 	bl	8001bd8 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e04f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398a:	4b2b      	ldr	r3, [pc, #172]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 020c 	and.w	r2, r3, #12
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	429a      	cmp	r2, r3
 800399a:	d1eb      	bne.n	8003974 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800399c:	4b25      	ldr	r3, [pc, #148]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d20c      	bcs.n	80039c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039aa:	4b22      	ldr	r3, [pc, #136]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b20      	ldr	r3, [pc, #128]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e032      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d0:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	4916      	ldr	r1, [pc, #88]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ee:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	490e      	ldr	r1, [pc, #56]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a02:	f000 f821 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8003a06:	4602      	mov	r2, r0
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	091b      	lsrs	r3, r3, #4
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	490a      	ldr	r1, [pc, #40]	; (8003a3c <HAL_RCC_ClockConfig+0x1c0>)
 8003a14:	5ccb      	ldrb	r3, [r1, r3]
 8003a16:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1a:	4a09      	ldr	r2, [pc, #36]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a1e:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fe f894 	bl	8001b50 <HAL_InitTick>

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40023c00 	.word	0x40023c00
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	080057b8 	.word	0x080057b8
 8003a40:	20000000 	.word	0x20000000
 8003a44:	20000004 	.word	0x20000004

08003a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a48:	b5b0      	push	{r4, r5, r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a4e:	2100      	movs	r1, #0
 8003a50:	6079      	str	r1, [r7, #4]
 8003a52:	2100      	movs	r1, #0
 8003a54:	60f9      	str	r1, [r7, #12]
 8003a56:	2100      	movs	r1, #0
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a5e:	4952      	ldr	r1, [pc, #328]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a60:	6889      	ldr	r1, [r1, #8]
 8003a62:	f001 010c 	and.w	r1, r1, #12
 8003a66:	2908      	cmp	r1, #8
 8003a68:	d00d      	beq.n	8003a86 <HAL_RCC_GetSysClockFreq+0x3e>
 8003a6a:	2908      	cmp	r1, #8
 8003a6c:	f200 8094 	bhi.w	8003b98 <HAL_RCC_GetSysClockFreq+0x150>
 8003a70:	2900      	cmp	r1, #0
 8003a72:	d002      	beq.n	8003a7a <HAL_RCC_GetSysClockFreq+0x32>
 8003a74:	2904      	cmp	r1, #4
 8003a76:	d003      	beq.n	8003a80 <HAL_RCC_GetSysClockFreq+0x38>
 8003a78:	e08e      	b.n	8003b98 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a7a:	4b4c      	ldr	r3, [pc, #304]	; (8003bac <HAL_RCC_GetSysClockFreq+0x164>)
 8003a7c:	60bb      	str	r3, [r7, #8]
       break;
 8003a7e:	e08e      	b.n	8003b9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a80:	4b4b      	ldr	r3, [pc, #300]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a82:	60bb      	str	r3, [r7, #8]
      break;
 8003a84:	e08b      	b.n	8003b9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a86:	4948      	ldr	r1, [pc, #288]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a88:	6849      	ldr	r1, [r1, #4]
 8003a8a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003a8e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a90:	4945      	ldr	r1, [pc, #276]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a92:	6849      	ldr	r1, [r1, #4]
 8003a94:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003a98:	2900      	cmp	r1, #0
 8003a9a:	d024      	beq.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a9c:	4942      	ldr	r1, [pc, #264]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a9e:	6849      	ldr	r1, [r1, #4]
 8003aa0:	0989      	lsrs	r1, r1, #6
 8003aa2:	4608      	mov	r0, r1
 8003aa4:	f04f 0100 	mov.w	r1, #0
 8003aa8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003aac:	f04f 0500 	mov.w	r5, #0
 8003ab0:	ea00 0204 	and.w	r2, r0, r4
 8003ab4:	ea01 0305 	and.w	r3, r1, r5
 8003ab8:	493d      	ldr	r1, [pc, #244]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003aba:	fb01 f003 	mul.w	r0, r1, r3
 8003abe:	2100      	movs	r1, #0
 8003ac0:	fb01 f102 	mul.w	r1, r1, r2
 8003ac4:	1844      	adds	r4, r0, r1
 8003ac6:	493a      	ldr	r1, [pc, #232]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003ac8:	fba2 0101 	umull	r0, r1, r2, r1
 8003acc:	1863      	adds	r3, r4, r1
 8003ace:	4619      	mov	r1, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	f7fd f862 	bl	8000ba0 <__aeabi_uldivmod>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	e04a      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ae6:	4b30      	ldr	r3, [pc, #192]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	099b      	lsrs	r3, r3, #6
 8003aec:	461a      	mov	r2, r3
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003af6:	f04f 0100 	mov.w	r1, #0
 8003afa:	ea02 0400 	and.w	r4, r2, r0
 8003afe:	ea03 0501 	and.w	r5, r3, r1
 8003b02:	4620      	mov	r0, r4
 8003b04:	4629      	mov	r1, r5
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	014b      	lsls	r3, r1, #5
 8003b10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b14:	0142      	lsls	r2, r0, #5
 8003b16:	4610      	mov	r0, r2
 8003b18:	4619      	mov	r1, r3
 8003b1a:	1b00      	subs	r0, r0, r4
 8003b1c:	eb61 0105 	sbc.w	r1, r1, r5
 8003b20:	f04f 0200 	mov.w	r2, #0
 8003b24:	f04f 0300 	mov.w	r3, #0
 8003b28:	018b      	lsls	r3, r1, #6
 8003b2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b2e:	0182      	lsls	r2, r0, #6
 8003b30:	1a12      	subs	r2, r2, r0
 8003b32:	eb63 0301 	sbc.w	r3, r3, r1
 8003b36:	f04f 0000 	mov.w	r0, #0
 8003b3a:	f04f 0100 	mov.w	r1, #0
 8003b3e:	00d9      	lsls	r1, r3, #3
 8003b40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b44:	00d0      	lsls	r0, r2, #3
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	1912      	adds	r2, r2, r4
 8003b4c:	eb45 0303 	adc.w	r3, r5, r3
 8003b50:	f04f 0000 	mov.w	r0, #0
 8003b54:	f04f 0100 	mov.w	r1, #0
 8003b58:	0299      	lsls	r1, r3, #10
 8003b5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b5e:	0290      	lsls	r0, r2, #10
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4610      	mov	r0, r2
 8003b66:	4619      	mov	r1, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	f7fd f816 	bl	8000ba0 <__aeabi_uldivmod>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4613      	mov	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	0c1b      	lsrs	r3, r3, #16
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	3301      	adds	r3, #1
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b94:	60bb      	str	r3, [r7, #8]
      break;
 8003b96:	e002      	b.n	8003b9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b98:	4b04      	ldr	r3, [pc, #16]	; (8003bac <HAL_RCC_GetSysClockFreq+0x164>)
 8003b9a:	60bb      	str	r3, [r7, #8]
      break;
 8003b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	00f42400 	.word	0x00f42400
 8003bb0:	017d7840 	.word	0x017d7840

08003bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bb8:	4b03      	ldr	r3, [pc, #12]	; (8003bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bba:	681b      	ldr	r3, [r3, #0]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20000000 	.word	0x20000000

08003bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bd0:	f7ff fff0 	bl	8003bb4 <HAL_RCC_GetHCLKFreq>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	4b05      	ldr	r3, [pc, #20]	; (8003bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	0a9b      	lsrs	r3, r3, #10
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	4903      	ldr	r1, [pc, #12]	; (8003bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003be2:	5ccb      	ldrb	r3, [r1, r3]
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	080057c8 	.word	0x080057c8

08003bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bf8:	f7ff ffdc 	bl	8003bb4 <HAL_RCC_GetHCLKFreq>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	0b5b      	lsrs	r3, r3, #13
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	4903      	ldr	r1, [pc, #12]	; (8003c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c0a:	5ccb      	ldrb	r3, [r1, r3]
 8003c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40023800 	.word	0x40023800
 8003c18:	080057c8 	.word	0x080057c8

08003c1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e03f      	b.n	8003cae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d106      	bne.n	8003c48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7fd feb4 	bl	80019b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2224      	movs	r2, #36	; 0x24
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f829 	bl	8003cb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695a      	ldr	r2, [r3, #20]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cbc:	b09f      	sub	sp, #124	; 0x7c
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cce:	68d9      	ldr	r1, [r3, #12]
 8003cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	ea40 0301 	orr.w	r3, r0, r1
 8003cd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003cfc:	f021 010c 	bic.w	r1, r1, #12
 8003d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d06:	430b      	orrs	r3, r1
 8003d08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d16:	6999      	ldr	r1, [r3, #24]
 8003d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	ea40 0301 	orr.w	r3, r0, r1
 8003d20:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	4bc5      	ldr	r3, [pc, #788]	; (800403c <UART_SetConfig+0x384>)
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d004      	beq.n	8003d36 <UART_SetConfig+0x7e>
 8003d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	4bc3      	ldr	r3, [pc, #780]	; (8004040 <UART_SetConfig+0x388>)
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d103      	bne.n	8003d3e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d36:	f7ff ff5d 	bl	8003bf4 <HAL_RCC_GetPCLK2Freq>
 8003d3a:	6778      	str	r0, [r7, #116]	; 0x74
 8003d3c:	e002      	b.n	8003d44 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d3e:	f7ff ff45 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 8003d42:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d4c:	f040 80b6 	bne.w	8003ebc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d52:	461c      	mov	r4, r3
 8003d54:	f04f 0500 	mov.w	r5, #0
 8003d58:	4622      	mov	r2, r4
 8003d5a:	462b      	mov	r3, r5
 8003d5c:	1891      	adds	r1, r2, r2
 8003d5e:	6439      	str	r1, [r7, #64]	; 0x40
 8003d60:	415b      	adcs	r3, r3
 8003d62:	647b      	str	r3, [r7, #68]	; 0x44
 8003d64:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d68:	1912      	adds	r2, r2, r4
 8003d6a:	eb45 0303 	adc.w	r3, r5, r3
 8003d6e:	f04f 0000 	mov.w	r0, #0
 8003d72:	f04f 0100 	mov.w	r1, #0
 8003d76:	00d9      	lsls	r1, r3, #3
 8003d78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d7c:	00d0      	lsls	r0, r2, #3
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	1911      	adds	r1, r2, r4
 8003d84:	6639      	str	r1, [r7, #96]	; 0x60
 8003d86:	416b      	adcs	r3, r5
 8003d88:	667b      	str	r3, [r7, #100]	; 0x64
 8003d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	1891      	adds	r1, r2, r2
 8003d96:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d98:	415b      	adcs	r3, r3
 8003d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003da0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003da4:	f7fc fefc 	bl	8000ba0 <__aeabi_uldivmod>
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	4ba5      	ldr	r3, [pc, #660]	; (8004044 <UART_SetConfig+0x38c>)
 8003dae:	fba3 2302 	umull	r2, r3, r3, r2
 8003db2:	095b      	lsrs	r3, r3, #5
 8003db4:	011e      	lsls	r6, r3, #4
 8003db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003db8:	461c      	mov	r4, r3
 8003dba:	f04f 0500 	mov.w	r5, #0
 8003dbe:	4622      	mov	r2, r4
 8003dc0:	462b      	mov	r3, r5
 8003dc2:	1891      	adds	r1, r2, r2
 8003dc4:	6339      	str	r1, [r7, #48]	; 0x30
 8003dc6:	415b      	adcs	r3, r3
 8003dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8003dca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003dce:	1912      	adds	r2, r2, r4
 8003dd0:	eb45 0303 	adc.w	r3, r5, r3
 8003dd4:	f04f 0000 	mov.w	r0, #0
 8003dd8:	f04f 0100 	mov.w	r1, #0
 8003ddc:	00d9      	lsls	r1, r3, #3
 8003dde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003de2:	00d0      	lsls	r0, r2, #3
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	1911      	adds	r1, r2, r4
 8003dea:	65b9      	str	r1, [r7, #88]	; 0x58
 8003dec:	416b      	adcs	r3, r5
 8003dee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	461a      	mov	r2, r3
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	1891      	adds	r1, r2, r2
 8003dfc:	62b9      	str	r1, [r7, #40]	; 0x28
 8003dfe:	415b      	adcs	r3, r3
 8003e00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e06:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003e0a:	f7fc fec9 	bl	8000ba0 <__aeabi_uldivmod>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	4b8c      	ldr	r3, [pc, #560]	; (8004044 <UART_SetConfig+0x38c>)
 8003e14:	fba3 1302 	umull	r1, r3, r3, r2
 8003e18:	095b      	lsrs	r3, r3, #5
 8003e1a:	2164      	movs	r1, #100	; 0x64
 8003e1c:	fb01 f303 	mul.w	r3, r1, r3
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	3332      	adds	r3, #50	; 0x32
 8003e26:	4a87      	ldr	r2, [pc, #540]	; (8004044 <UART_SetConfig+0x38c>)
 8003e28:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2c:	095b      	lsrs	r3, r3, #5
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e34:	441e      	add	r6, r3
 8003e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f04f 0100 	mov.w	r1, #0
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	1894      	adds	r4, r2, r2
 8003e44:	623c      	str	r4, [r7, #32]
 8003e46:	415b      	adcs	r3, r3
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e4e:	1812      	adds	r2, r2, r0
 8003e50:	eb41 0303 	adc.w	r3, r1, r3
 8003e54:	f04f 0400 	mov.w	r4, #0
 8003e58:	f04f 0500 	mov.w	r5, #0
 8003e5c:	00dd      	lsls	r5, r3, #3
 8003e5e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e62:	00d4      	lsls	r4, r2, #3
 8003e64:	4622      	mov	r2, r4
 8003e66:	462b      	mov	r3, r5
 8003e68:	1814      	adds	r4, r2, r0
 8003e6a:	653c      	str	r4, [r7, #80]	; 0x50
 8003e6c:	414b      	adcs	r3, r1
 8003e6e:	657b      	str	r3, [r7, #84]	; 0x54
 8003e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	461a      	mov	r2, r3
 8003e76:	f04f 0300 	mov.w	r3, #0
 8003e7a:	1891      	adds	r1, r2, r2
 8003e7c:	61b9      	str	r1, [r7, #24]
 8003e7e:	415b      	adcs	r3, r3
 8003e80:	61fb      	str	r3, [r7, #28]
 8003e82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e86:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003e8a:	f7fc fe89 	bl	8000ba0 <__aeabi_uldivmod>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	4b6c      	ldr	r3, [pc, #432]	; (8004044 <UART_SetConfig+0x38c>)
 8003e94:	fba3 1302 	umull	r1, r3, r3, r2
 8003e98:	095b      	lsrs	r3, r3, #5
 8003e9a:	2164      	movs	r1, #100	; 0x64
 8003e9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	3332      	adds	r3, #50	; 0x32
 8003ea6:	4a67      	ldr	r2, [pc, #412]	; (8004044 <UART_SetConfig+0x38c>)
 8003ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eac:	095b      	lsrs	r3, r3, #5
 8003eae:	f003 0207 	and.w	r2, r3, #7
 8003eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4432      	add	r2, r6
 8003eb8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003eba:	e0b9      	b.n	8004030 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ebc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ebe:	461c      	mov	r4, r3
 8003ec0:	f04f 0500 	mov.w	r5, #0
 8003ec4:	4622      	mov	r2, r4
 8003ec6:	462b      	mov	r3, r5
 8003ec8:	1891      	adds	r1, r2, r2
 8003eca:	6139      	str	r1, [r7, #16]
 8003ecc:	415b      	adcs	r3, r3
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ed4:	1912      	adds	r2, r2, r4
 8003ed6:	eb45 0303 	adc.w	r3, r5, r3
 8003eda:	f04f 0000 	mov.w	r0, #0
 8003ede:	f04f 0100 	mov.w	r1, #0
 8003ee2:	00d9      	lsls	r1, r3, #3
 8003ee4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ee8:	00d0      	lsls	r0, r2, #3
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	eb12 0804 	adds.w	r8, r2, r4
 8003ef2:	eb43 0905 	adc.w	r9, r3, r5
 8003ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f04f 0100 	mov.w	r1, #0
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	008b      	lsls	r3, r1, #2
 8003f0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f0e:	0082      	lsls	r2, r0, #2
 8003f10:	4640      	mov	r0, r8
 8003f12:	4649      	mov	r1, r9
 8003f14:	f7fc fe44 	bl	8000ba0 <__aeabi_uldivmod>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4b49      	ldr	r3, [pc, #292]	; (8004044 <UART_SetConfig+0x38c>)
 8003f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	011e      	lsls	r6, r3, #4
 8003f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f04f 0100 	mov.w	r1, #0
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	1894      	adds	r4, r2, r2
 8003f34:	60bc      	str	r4, [r7, #8]
 8003f36:	415b      	adcs	r3, r3
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f3e:	1812      	adds	r2, r2, r0
 8003f40:	eb41 0303 	adc.w	r3, r1, r3
 8003f44:	f04f 0400 	mov.w	r4, #0
 8003f48:	f04f 0500 	mov.w	r5, #0
 8003f4c:	00dd      	lsls	r5, r3, #3
 8003f4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f52:	00d4      	lsls	r4, r2, #3
 8003f54:	4622      	mov	r2, r4
 8003f56:	462b      	mov	r3, r5
 8003f58:	1814      	adds	r4, r2, r0
 8003f5a:	64bc      	str	r4, [r7, #72]	; 0x48
 8003f5c:	414b      	adcs	r3, r1
 8003f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f04f 0100 	mov.w	r1, #0
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	008b      	lsls	r3, r1, #2
 8003f74:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f78:	0082      	lsls	r2, r0, #2
 8003f7a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003f7e:	f7fc fe0f 	bl	8000ba0 <__aeabi_uldivmod>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4b2f      	ldr	r3, [pc, #188]	; (8004044 <UART_SetConfig+0x38c>)
 8003f88:	fba3 1302 	umull	r1, r3, r3, r2
 8003f8c:	095b      	lsrs	r3, r3, #5
 8003f8e:	2164      	movs	r1, #100	; 0x64
 8003f90:	fb01 f303 	mul.w	r3, r1, r3
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	3332      	adds	r3, #50	; 0x32
 8003f9a:	4a2a      	ldr	r2, [pc, #168]	; (8004044 <UART_SetConfig+0x38c>)
 8003f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fa6:	441e      	add	r6, r3
 8003fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003faa:	4618      	mov	r0, r3
 8003fac:	f04f 0100 	mov.w	r1, #0
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	1894      	adds	r4, r2, r2
 8003fb6:	603c      	str	r4, [r7, #0]
 8003fb8:	415b      	adcs	r3, r3
 8003fba:	607b      	str	r3, [r7, #4]
 8003fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fc0:	1812      	adds	r2, r2, r0
 8003fc2:	eb41 0303 	adc.w	r3, r1, r3
 8003fc6:	f04f 0400 	mov.w	r4, #0
 8003fca:	f04f 0500 	mov.w	r5, #0
 8003fce:	00dd      	lsls	r5, r3, #3
 8003fd0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fd4:	00d4      	lsls	r4, r2, #3
 8003fd6:	4622      	mov	r2, r4
 8003fd8:	462b      	mov	r3, r5
 8003fda:	eb12 0a00 	adds.w	sl, r2, r0
 8003fde:	eb43 0b01 	adc.w	fp, r3, r1
 8003fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f04f 0100 	mov.w	r1, #0
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	008b      	lsls	r3, r1, #2
 8003ff6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ffa:	0082      	lsls	r2, r0, #2
 8003ffc:	4650      	mov	r0, sl
 8003ffe:	4659      	mov	r1, fp
 8004000:	f7fc fdce 	bl	8000ba0 <__aeabi_uldivmod>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	4b0e      	ldr	r3, [pc, #56]	; (8004044 <UART_SetConfig+0x38c>)
 800400a:	fba3 1302 	umull	r1, r3, r3, r2
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	2164      	movs	r1, #100	; 0x64
 8004012:	fb01 f303 	mul.w	r3, r1, r3
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	3332      	adds	r3, #50	; 0x32
 800401c:	4a09      	ldr	r2, [pc, #36]	; (8004044 <UART_SetConfig+0x38c>)
 800401e:	fba2 2303 	umull	r2, r3, r2, r3
 8004022:	095b      	lsrs	r3, r3, #5
 8004024:	f003 020f 	and.w	r2, r3, #15
 8004028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4432      	add	r2, r6
 800402e:	609a      	str	r2, [r3, #8]
}
 8004030:	bf00      	nop
 8004032:	377c      	adds	r7, #124	; 0x7c
 8004034:	46bd      	mov	sp, r7
 8004036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800403a:	bf00      	nop
 800403c:	40011000 	.word	0x40011000
 8004040:	40011400 	.word	0x40011400
 8004044:	51eb851f 	.word	0x51eb851f

08004048 <__errno>:
 8004048:	4b01      	ldr	r3, [pc, #4]	; (8004050 <__errno+0x8>)
 800404a:	6818      	ldr	r0, [r3, #0]
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	2000000c 	.word	0x2000000c

08004054 <__libc_init_array>:
 8004054:	b570      	push	{r4, r5, r6, lr}
 8004056:	4d0d      	ldr	r5, [pc, #52]	; (800408c <__libc_init_array+0x38>)
 8004058:	4c0d      	ldr	r4, [pc, #52]	; (8004090 <__libc_init_array+0x3c>)
 800405a:	1b64      	subs	r4, r4, r5
 800405c:	10a4      	asrs	r4, r4, #2
 800405e:	2600      	movs	r6, #0
 8004060:	42a6      	cmp	r6, r4
 8004062:	d109      	bne.n	8004078 <__libc_init_array+0x24>
 8004064:	4d0b      	ldr	r5, [pc, #44]	; (8004094 <__libc_init_array+0x40>)
 8004066:	4c0c      	ldr	r4, [pc, #48]	; (8004098 <__libc_init_array+0x44>)
 8004068:	f001 fb98 	bl	800579c <_init>
 800406c:	1b64      	subs	r4, r4, r5
 800406e:	10a4      	asrs	r4, r4, #2
 8004070:	2600      	movs	r6, #0
 8004072:	42a6      	cmp	r6, r4
 8004074:	d105      	bne.n	8004082 <__libc_init_array+0x2e>
 8004076:	bd70      	pop	{r4, r5, r6, pc}
 8004078:	f855 3b04 	ldr.w	r3, [r5], #4
 800407c:	4798      	blx	r3
 800407e:	3601      	adds	r6, #1
 8004080:	e7ee      	b.n	8004060 <__libc_init_array+0xc>
 8004082:	f855 3b04 	ldr.w	r3, [r5], #4
 8004086:	4798      	blx	r3
 8004088:	3601      	adds	r6, #1
 800408a:	e7f2      	b.n	8004072 <__libc_init_array+0x1e>
 800408c:	080059b8 	.word	0x080059b8
 8004090:	080059b8 	.word	0x080059b8
 8004094:	080059b8 	.word	0x080059b8
 8004098:	080059bc 	.word	0x080059bc

0800409c <memset>:
 800409c:	4402      	add	r2, r0
 800409e:	4603      	mov	r3, r0
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d100      	bne.n	80040a6 <memset+0xa>
 80040a4:	4770      	bx	lr
 80040a6:	f803 1b01 	strb.w	r1, [r3], #1
 80040aa:	e7f9      	b.n	80040a0 <memset+0x4>
 80040ac:	0000      	movs	r0, r0
	...

080040b0 <sin>:
 80040b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80040b2:	ec53 2b10 	vmov	r2, r3, d0
 80040b6:	4826      	ldr	r0, [pc, #152]	; (8004150 <sin+0xa0>)
 80040b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80040bc:	4281      	cmp	r1, r0
 80040be:	dc07      	bgt.n	80040d0 <sin+0x20>
 80040c0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8004148 <sin+0x98>
 80040c4:	2000      	movs	r0, #0
 80040c6:	f001 f993 	bl	80053f0 <__kernel_sin>
 80040ca:	ec51 0b10 	vmov	r0, r1, d0
 80040ce:	e007      	b.n	80040e0 <sin+0x30>
 80040d0:	4820      	ldr	r0, [pc, #128]	; (8004154 <sin+0xa4>)
 80040d2:	4281      	cmp	r1, r0
 80040d4:	dd09      	ble.n	80040ea <sin+0x3a>
 80040d6:	ee10 0a10 	vmov	r0, s0
 80040da:	4619      	mov	r1, r3
 80040dc:	f7fc f880 	bl	80001e0 <__aeabi_dsub>
 80040e0:	ec41 0b10 	vmov	d0, r0, r1
 80040e4:	b005      	add	sp, #20
 80040e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80040ea:	4668      	mov	r0, sp
 80040ec:	f000 fab8 	bl	8004660 <__ieee754_rem_pio2>
 80040f0:	f000 0003 	and.w	r0, r0, #3
 80040f4:	2801      	cmp	r0, #1
 80040f6:	d008      	beq.n	800410a <sin+0x5a>
 80040f8:	2802      	cmp	r0, #2
 80040fa:	d00d      	beq.n	8004118 <sin+0x68>
 80040fc:	b9d0      	cbnz	r0, 8004134 <sin+0x84>
 80040fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004102:	ed9d 0b00 	vldr	d0, [sp]
 8004106:	2001      	movs	r0, #1
 8004108:	e7dd      	b.n	80040c6 <sin+0x16>
 800410a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800410e:	ed9d 0b00 	vldr	d0, [sp]
 8004112:	f000 fd65 	bl	8004be0 <__kernel_cos>
 8004116:	e7d8      	b.n	80040ca <sin+0x1a>
 8004118:	ed9d 1b02 	vldr	d1, [sp, #8]
 800411c:	ed9d 0b00 	vldr	d0, [sp]
 8004120:	2001      	movs	r0, #1
 8004122:	f001 f965 	bl	80053f0 <__kernel_sin>
 8004126:	ec53 2b10 	vmov	r2, r3, d0
 800412a:	ee10 0a10 	vmov	r0, s0
 800412e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004132:	e7d5      	b.n	80040e0 <sin+0x30>
 8004134:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004138:	ed9d 0b00 	vldr	d0, [sp]
 800413c:	f000 fd50 	bl	8004be0 <__kernel_cos>
 8004140:	e7f1      	b.n	8004126 <sin+0x76>
 8004142:	bf00      	nop
 8004144:	f3af 8000 	nop.w
	...
 8004150:	3fe921fb 	.word	0x3fe921fb
 8004154:	7fefffff 	.word	0x7fefffff

08004158 <asin>:
 8004158:	b538      	push	{r3, r4, r5, lr}
 800415a:	ed2d 8b02 	vpush	{d8}
 800415e:	ec55 4b10 	vmov	r4, r5, d0
 8004162:	f000 f869 	bl	8004238 <__ieee754_asin>
 8004166:	4b16      	ldr	r3, [pc, #88]	; (80041c0 <asin+0x68>)
 8004168:	eeb0 8a40 	vmov.f32	s16, s0
 800416c:	eef0 8a60 	vmov.f32	s17, s1
 8004170:	f993 3000 	ldrsb.w	r3, [r3]
 8004174:	3301      	adds	r3, #1
 8004176:	d01c      	beq.n	80041b2 <asin+0x5a>
 8004178:	4622      	mov	r2, r4
 800417a:	462b      	mov	r3, r5
 800417c:	4620      	mov	r0, r4
 800417e:	4629      	mov	r1, r5
 8004180:	f7fc fc80 	bl	8000a84 <__aeabi_dcmpun>
 8004184:	b9a8      	cbnz	r0, 80041b2 <asin+0x5a>
 8004186:	ec45 4b10 	vmov	d0, r4, r5
 800418a:	f001 f9ef 	bl	800556c <fabs>
 800418e:	4b0d      	ldr	r3, [pc, #52]	; (80041c4 <asin+0x6c>)
 8004190:	ec51 0b10 	vmov	r0, r1, d0
 8004194:	2200      	movs	r2, #0
 8004196:	f7fc fc6b 	bl	8000a70 <__aeabi_dcmpgt>
 800419a:	b150      	cbz	r0, 80041b2 <asin+0x5a>
 800419c:	f7ff ff54 	bl	8004048 <__errno>
 80041a0:	ecbd 8b02 	vpop	{d8}
 80041a4:	2321      	movs	r3, #33	; 0x21
 80041a6:	6003      	str	r3, [r0, #0]
 80041a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041ac:	4806      	ldr	r0, [pc, #24]	; (80041c8 <asin+0x70>)
 80041ae:	f001 ba67 	b.w	8005680 <nan>
 80041b2:	eeb0 0a48 	vmov.f32	s0, s16
 80041b6:	eef0 0a68 	vmov.f32	s1, s17
 80041ba:	ecbd 8b02 	vpop	{d8}
 80041be:	bd38      	pop	{r3, r4, r5, pc}
 80041c0:	20000070 	.word	0x20000070
 80041c4:	3ff00000 	.word	0x3ff00000
 80041c8:	080057d0 	.word	0x080057d0

080041cc <sqrt>:
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	ed2d 8b02 	vpush	{d8}
 80041d2:	ec55 4b10 	vmov	r4, r5, d0
 80041d6:	f000 fc4d 	bl	8004a74 <__ieee754_sqrt>
 80041da:	4b15      	ldr	r3, [pc, #84]	; (8004230 <sqrt+0x64>)
 80041dc:	eeb0 8a40 	vmov.f32	s16, s0
 80041e0:	eef0 8a60 	vmov.f32	s17, s1
 80041e4:	f993 3000 	ldrsb.w	r3, [r3]
 80041e8:	3301      	adds	r3, #1
 80041ea:	d019      	beq.n	8004220 <sqrt+0x54>
 80041ec:	4622      	mov	r2, r4
 80041ee:	462b      	mov	r3, r5
 80041f0:	4620      	mov	r0, r4
 80041f2:	4629      	mov	r1, r5
 80041f4:	f7fc fc46 	bl	8000a84 <__aeabi_dcmpun>
 80041f8:	b990      	cbnz	r0, 8004220 <sqrt+0x54>
 80041fa:	2200      	movs	r2, #0
 80041fc:	2300      	movs	r3, #0
 80041fe:	4620      	mov	r0, r4
 8004200:	4629      	mov	r1, r5
 8004202:	f7fc fc17 	bl	8000a34 <__aeabi_dcmplt>
 8004206:	b158      	cbz	r0, 8004220 <sqrt+0x54>
 8004208:	f7ff ff1e 	bl	8004048 <__errno>
 800420c:	2321      	movs	r3, #33	; 0x21
 800420e:	6003      	str	r3, [r0, #0]
 8004210:	2200      	movs	r2, #0
 8004212:	2300      	movs	r3, #0
 8004214:	4610      	mov	r0, r2
 8004216:	4619      	mov	r1, r3
 8004218:	f7fc fac4 	bl	80007a4 <__aeabi_ddiv>
 800421c:	ec41 0b18 	vmov	d8, r0, r1
 8004220:	eeb0 0a48 	vmov.f32	s0, s16
 8004224:	eef0 0a68 	vmov.f32	s1, s17
 8004228:	ecbd 8b02 	vpop	{d8}
 800422c:	bd38      	pop	{r3, r4, r5, pc}
 800422e:	bf00      	nop
 8004230:	20000070 	.word	0x20000070
 8004234:	00000000 	.word	0x00000000

08004238 <__ieee754_asin>:
 8004238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800423c:	ed2d 8b04 	vpush	{d8-d9}
 8004240:	ec55 4b10 	vmov	r4, r5, d0
 8004244:	4bcc      	ldr	r3, [pc, #816]	; (8004578 <__ieee754_asin+0x340>)
 8004246:	b083      	sub	sp, #12
 8004248:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800424c:	4598      	cmp	r8, r3
 800424e:	9501      	str	r5, [sp, #4]
 8004250:	dd35      	ble.n	80042be <__ieee754_asin+0x86>
 8004252:	ee10 3a10 	vmov	r3, s0
 8004256:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800425a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800425e:	ea58 0303 	orrs.w	r3, r8, r3
 8004262:	d117      	bne.n	8004294 <__ieee754_asin+0x5c>
 8004264:	a3aa      	add	r3, pc, #680	; (adr r3, 8004510 <__ieee754_asin+0x2d8>)
 8004266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426a:	ee10 0a10 	vmov	r0, s0
 800426e:	4629      	mov	r1, r5
 8004270:	f7fc f96e 	bl	8000550 <__aeabi_dmul>
 8004274:	a3a8      	add	r3, pc, #672	; (adr r3, 8004518 <__ieee754_asin+0x2e0>)
 8004276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427a:	4606      	mov	r6, r0
 800427c:	460f      	mov	r7, r1
 800427e:	4620      	mov	r0, r4
 8004280:	4629      	mov	r1, r5
 8004282:	f7fc f965 	bl	8000550 <__aeabi_dmul>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4630      	mov	r0, r6
 800428c:	4639      	mov	r1, r7
 800428e:	f7fb ffa9 	bl	80001e4 <__adddf3>
 8004292:	e00b      	b.n	80042ac <__ieee754_asin+0x74>
 8004294:	ee10 2a10 	vmov	r2, s0
 8004298:	462b      	mov	r3, r5
 800429a:	ee10 0a10 	vmov	r0, s0
 800429e:	4629      	mov	r1, r5
 80042a0:	f7fb ff9e 	bl	80001e0 <__aeabi_dsub>
 80042a4:	4602      	mov	r2, r0
 80042a6:	460b      	mov	r3, r1
 80042a8:	f7fc fa7c 	bl	80007a4 <__aeabi_ddiv>
 80042ac:	4604      	mov	r4, r0
 80042ae:	460d      	mov	r5, r1
 80042b0:	ec45 4b10 	vmov	d0, r4, r5
 80042b4:	b003      	add	sp, #12
 80042b6:	ecbd 8b04 	vpop	{d8-d9}
 80042ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042be:	4baf      	ldr	r3, [pc, #700]	; (800457c <__ieee754_asin+0x344>)
 80042c0:	4598      	cmp	r8, r3
 80042c2:	dc11      	bgt.n	80042e8 <__ieee754_asin+0xb0>
 80042c4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80042c8:	f280 80ae 	bge.w	8004428 <__ieee754_asin+0x1f0>
 80042cc:	a394      	add	r3, pc, #592	; (adr r3, 8004520 <__ieee754_asin+0x2e8>)
 80042ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d2:	ee10 0a10 	vmov	r0, s0
 80042d6:	4629      	mov	r1, r5
 80042d8:	f7fb ff84 	bl	80001e4 <__adddf3>
 80042dc:	4ba8      	ldr	r3, [pc, #672]	; (8004580 <__ieee754_asin+0x348>)
 80042de:	2200      	movs	r2, #0
 80042e0:	f7fc fbc6 	bl	8000a70 <__aeabi_dcmpgt>
 80042e4:	2800      	cmp	r0, #0
 80042e6:	d1e3      	bne.n	80042b0 <__ieee754_asin+0x78>
 80042e8:	ec45 4b10 	vmov	d0, r4, r5
 80042ec:	f001 f93e 	bl	800556c <fabs>
 80042f0:	49a3      	ldr	r1, [pc, #652]	; (8004580 <__ieee754_asin+0x348>)
 80042f2:	ec53 2b10 	vmov	r2, r3, d0
 80042f6:	2000      	movs	r0, #0
 80042f8:	f7fb ff72 	bl	80001e0 <__aeabi_dsub>
 80042fc:	4ba1      	ldr	r3, [pc, #644]	; (8004584 <__ieee754_asin+0x34c>)
 80042fe:	2200      	movs	r2, #0
 8004300:	f7fc f926 	bl	8000550 <__aeabi_dmul>
 8004304:	a388      	add	r3, pc, #544	; (adr r3, 8004528 <__ieee754_asin+0x2f0>)
 8004306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430a:	4604      	mov	r4, r0
 800430c:	460d      	mov	r5, r1
 800430e:	f7fc f91f 	bl	8000550 <__aeabi_dmul>
 8004312:	a387      	add	r3, pc, #540	; (adr r3, 8004530 <__ieee754_asin+0x2f8>)
 8004314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004318:	f7fb ff64 	bl	80001e4 <__adddf3>
 800431c:	4622      	mov	r2, r4
 800431e:	462b      	mov	r3, r5
 8004320:	f7fc f916 	bl	8000550 <__aeabi_dmul>
 8004324:	a384      	add	r3, pc, #528	; (adr r3, 8004538 <__ieee754_asin+0x300>)
 8004326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432a:	f7fb ff59 	bl	80001e0 <__aeabi_dsub>
 800432e:	4622      	mov	r2, r4
 8004330:	462b      	mov	r3, r5
 8004332:	f7fc f90d 	bl	8000550 <__aeabi_dmul>
 8004336:	a382      	add	r3, pc, #520	; (adr r3, 8004540 <__ieee754_asin+0x308>)
 8004338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433c:	f7fb ff52 	bl	80001e4 <__adddf3>
 8004340:	4622      	mov	r2, r4
 8004342:	462b      	mov	r3, r5
 8004344:	f7fc f904 	bl	8000550 <__aeabi_dmul>
 8004348:	a37f      	add	r3, pc, #508	; (adr r3, 8004548 <__ieee754_asin+0x310>)
 800434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434e:	f7fb ff47 	bl	80001e0 <__aeabi_dsub>
 8004352:	4622      	mov	r2, r4
 8004354:	462b      	mov	r3, r5
 8004356:	f7fc f8fb 	bl	8000550 <__aeabi_dmul>
 800435a:	a37d      	add	r3, pc, #500	; (adr r3, 8004550 <__ieee754_asin+0x318>)
 800435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004360:	f7fb ff40 	bl	80001e4 <__adddf3>
 8004364:	4622      	mov	r2, r4
 8004366:	462b      	mov	r3, r5
 8004368:	f7fc f8f2 	bl	8000550 <__aeabi_dmul>
 800436c:	a37a      	add	r3, pc, #488	; (adr r3, 8004558 <__ieee754_asin+0x320>)
 800436e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004372:	ec41 0b18 	vmov	d8, r0, r1
 8004376:	4620      	mov	r0, r4
 8004378:	4629      	mov	r1, r5
 800437a:	f7fc f8e9 	bl	8000550 <__aeabi_dmul>
 800437e:	a378      	add	r3, pc, #480	; (adr r3, 8004560 <__ieee754_asin+0x328>)
 8004380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004384:	f7fb ff2c 	bl	80001e0 <__aeabi_dsub>
 8004388:	4622      	mov	r2, r4
 800438a:	462b      	mov	r3, r5
 800438c:	f7fc f8e0 	bl	8000550 <__aeabi_dmul>
 8004390:	a375      	add	r3, pc, #468	; (adr r3, 8004568 <__ieee754_asin+0x330>)
 8004392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004396:	f7fb ff25 	bl	80001e4 <__adddf3>
 800439a:	4622      	mov	r2, r4
 800439c:	462b      	mov	r3, r5
 800439e:	f7fc f8d7 	bl	8000550 <__aeabi_dmul>
 80043a2:	a373      	add	r3, pc, #460	; (adr r3, 8004570 <__ieee754_asin+0x338>)
 80043a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a8:	f7fb ff1a 	bl	80001e0 <__aeabi_dsub>
 80043ac:	4622      	mov	r2, r4
 80043ae:	462b      	mov	r3, r5
 80043b0:	f7fc f8ce 	bl	8000550 <__aeabi_dmul>
 80043b4:	4b72      	ldr	r3, [pc, #456]	; (8004580 <__ieee754_asin+0x348>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	f7fb ff14 	bl	80001e4 <__adddf3>
 80043bc:	ec45 4b10 	vmov	d0, r4, r5
 80043c0:	4606      	mov	r6, r0
 80043c2:	460f      	mov	r7, r1
 80043c4:	f000 fb56 	bl	8004a74 <__ieee754_sqrt>
 80043c8:	4b6f      	ldr	r3, [pc, #444]	; (8004588 <__ieee754_asin+0x350>)
 80043ca:	4598      	cmp	r8, r3
 80043cc:	ec5b ab10 	vmov	sl, fp, d0
 80043d0:	f340 80dc 	ble.w	800458c <__ieee754_asin+0x354>
 80043d4:	4632      	mov	r2, r6
 80043d6:	463b      	mov	r3, r7
 80043d8:	ec51 0b18 	vmov	r0, r1, d8
 80043dc:	f7fc f9e2 	bl	80007a4 <__aeabi_ddiv>
 80043e0:	4652      	mov	r2, sl
 80043e2:	465b      	mov	r3, fp
 80043e4:	f7fc f8b4 	bl	8000550 <__aeabi_dmul>
 80043e8:	4652      	mov	r2, sl
 80043ea:	465b      	mov	r3, fp
 80043ec:	f7fb fefa 	bl	80001e4 <__adddf3>
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	f7fb fef6 	bl	80001e4 <__adddf3>
 80043f8:	a347      	add	r3, pc, #284	; (adr r3, 8004518 <__ieee754_asin+0x2e0>)
 80043fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fe:	f7fb feef 	bl	80001e0 <__aeabi_dsub>
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	a142      	add	r1, pc, #264	; (adr r1, 8004510 <__ieee754_asin+0x2d8>)
 8004408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800440c:	f7fb fee8 	bl	80001e0 <__aeabi_dsub>
 8004410:	9b01      	ldr	r3, [sp, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	bfdc      	itt	le
 8004416:	4602      	movle	r2, r0
 8004418:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800441c:	4604      	mov	r4, r0
 800441e:	460d      	mov	r5, r1
 8004420:	bfdc      	itt	le
 8004422:	4614      	movle	r4, r2
 8004424:	461d      	movle	r5, r3
 8004426:	e743      	b.n	80042b0 <__ieee754_asin+0x78>
 8004428:	ee10 2a10 	vmov	r2, s0
 800442c:	ee10 0a10 	vmov	r0, s0
 8004430:	462b      	mov	r3, r5
 8004432:	4629      	mov	r1, r5
 8004434:	f7fc f88c 	bl	8000550 <__aeabi_dmul>
 8004438:	a33b      	add	r3, pc, #236	; (adr r3, 8004528 <__ieee754_asin+0x2f0>)
 800443a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443e:	4606      	mov	r6, r0
 8004440:	460f      	mov	r7, r1
 8004442:	f7fc f885 	bl	8000550 <__aeabi_dmul>
 8004446:	a33a      	add	r3, pc, #232	; (adr r3, 8004530 <__ieee754_asin+0x2f8>)
 8004448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444c:	f7fb feca 	bl	80001e4 <__adddf3>
 8004450:	4632      	mov	r2, r6
 8004452:	463b      	mov	r3, r7
 8004454:	f7fc f87c 	bl	8000550 <__aeabi_dmul>
 8004458:	a337      	add	r3, pc, #220	; (adr r3, 8004538 <__ieee754_asin+0x300>)
 800445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445e:	f7fb febf 	bl	80001e0 <__aeabi_dsub>
 8004462:	4632      	mov	r2, r6
 8004464:	463b      	mov	r3, r7
 8004466:	f7fc f873 	bl	8000550 <__aeabi_dmul>
 800446a:	a335      	add	r3, pc, #212	; (adr r3, 8004540 <__ieee754_asin+0x308>)
 800446c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004470:	f7fb feb8 	bl	80001e4 <__adddf3>
 8004474:	4632      	mov	r2, r6
 8004476:	463b      	mov	r3, r7
 8004478:	f7fc f86a 	bl	8000550 <__aeabi_dmul>
 800447c:	a332      	add	r3, pc, #200	; (adr r3, 8004548 <__ieee754_asin+0x310>)
 800447e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004482:	f7fb fead 	bl	80001e0 <__aeabi_dsub>
 8004486:	4632      	mov	r2, r6
 8004488:	463b      	mov	r3, r7
 800448a:	f7fc f861 	bl	8000550 <__aeabi_dmul>
 800448e:	a330      	add	r3, pc, #192	; (adr r3, 8004550 <__ieee754_asin+0x318>)
 8004490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004494:	f7fb fea6 	bl	80001e4 <__adddf3>
 8004498:	4632      	mov	r2, r6
 800449a:	463b      	mov	r3, r7
 800449c:	f7fc f858 	bl	8000550 <__aeabi_dmul>
 80044a0:	a32d      	add	r3, pc, #180	; (adr r3, 8004558 <__ieee754_asin+0x320>)
 80044a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a6:	4680      	mov	r8, r0
 80044a8:	4689      	mov	r9, r1
 80044aa:	4630      	mov	r0, r6
 80044ac:	4639      	mov	r1, r7
 80044ae:	f7fc f84f 	bl	8000550 <__aeabi_dmul>
 80044b2:	a32b      	add	r3, pc, #172	; (adr r3, 8004560 <__ieee754_asin+0x328>)
 80044b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b8:	f7fb fe92 	bl	80001e0 <__aeabi_dsub>
 80044bc:	4632      	mov	r2, r6
 80044be:	463b      	mov	r3, r7
 80044c0:	f7fc f846 	bl	8000550 <__aeabi_dmul>
 80044c4:	a328      	add	r3, pc, #160	; (adr r3, 8004568 <__ieee754_asin+0x330>)
 80044c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ca:	f7fb fe8b 	bl	80001e4 <__adddf3>
 80044ce:	4632      	mov	r2, r6
 80044d0:	463b      	mov	r3, r7
 80044d2:	f7fc f83d 	bl	8000550 <__aeabi_dmul>
 80044d6:	a326      	add	r3, pc, #152	; (adr r3, 8004570 <__ieee754_asin+0x338>)
 80044d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044dc:	f7fb fe80 	bl	80001e0 <__aeabi_dsub>
 80044e0:	4632      	mov	r2, r6
 80044e2:	463b      	mov	r3, r7
 80044e4:	f7fc f834 	bl	8000550 <__aeabi_dmul>
 80044e8:	4b25      	ldr	r3, [pc, #148]	; (8004580 <__ieee754_asin+0x348>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	f7fb fe7a 	bl	80001e4 <__adddf3>
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	4640      	mov	r0, r8
 80044f6:	4649      	mov	r1, r9
 80044f8:	f7fc f954 	bl	80007a4 <__aeabi_ddiv>
 80044fc:	4622      	mov	r2, r4
 80044fe:	462b      	mov	r3, r5
 8004500:	f7fc f826 	bl	8000550 <__aeabi_dmul>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	4620      	mov	r0, r4
 800450a:	4629      	mov	r1, r5
 800450c:	e6bf      	b.n	800428e <__ieee754_asin+0x56>
 800450e:	bf00      	nop
 8004510:	54442d18 	.word	0x54442d18
 8004514:	3ff921fb 	.word	0x3ff921fb
 8004518:	33145c07 	.word	0x33145c07
 800451c:	3c91a626 	.word	0x3c91a626
 8004520:	8800759c 	.word	0x8800759c
 8004524:	7e37e43c 	.word	0x7e37e43c
 8004528:	0dfdf709 	.word	0x0dfdf709
 800452c:	3f023de1 	.word	0x3f023de1
 8004530:	7501b288 	.word	0x7501b288
 8004534:	3f49efe0 	.word	0x3f49efe0
 8004538:	b5688f3b 	.word	0xb5688f3b
 800453c:	3fa48228 	.word	0x3fa48228
 8004540:	0e884455 	.word	0x0e884455
 8004544:	3fc9c155 	.word	0x3fc9c155
 8004548:	03eb6f7d 	.word	0x03eb6f7d
 800454c:	3fd4d612 	.word	0x3fd4d612
 8004550:	55555555 	.word	0x55555555
 8004554:	3fc55555 	.word	0x3fc55555
 8004558:	b12e9282 	.word	0xb12e9282
 800455c:	3fb3b8c5 	.word	0x3fb3b8c5
 8004560:	1b8d0159 	.word	0x1b8d0159
 8004564:	3fe6066c 	.word	0x3fe6066c
 8004568:	9c598ac8 	.word	0x9c598ac8
 800456c:	40002ae5 	.word	0x40002ae5
 8004570:	1c8a2d4b 	.word	0x1c8a2d4b
 8004574:	40033a27 	.word	0x40033a27
 8004578:	3fefffff 	.word	0x3fefffff
 800457c:	3fdfffff 	.word	0x3fdfffff
 8004580:	3ff00000 	.word	0x3ff00000
 8004584:	3fe00000 	.word	0x3fe00000
 8004588:	3fef3332 	.word	0x3fef3332
 800458c:	ee10 2a10 	vmov	r2, s0
 8004590:	ee10 0a10 	vmov	r0, s0
 8004594:	465b      	mov	r3, fp
 8004596:	4659      	mov	r1, fp
 8004598:	f7fb fe24 	bl	80001e4 <__adddf3>
 800459c:	4632      	mov	r2, r6
 800459e:	463b      	mov	r3, r7
 80045a0:	ec41 0b19 	vmov	d9, r0, r1
 80045a4:	ec51 0b18 	vmov	r0, r1, d8
 80045a8:	f7fc f8fc 	bl	80007a4 <__aeabi_ddiv>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	ec51 0b19 	vmov	r0, r1, d9
 80045b4:	f7fb ffcc 	bl	8000550 <__aeabi_dmul>
 80045b8:	f04f 0800 	mov.w	r8, #0
 80045bc:	4606      	mov	r6, r0
 80045be:	460f      	mov	r7, r1
 80045c0:	4642      	mov	r2, r8
 80045c2:	465b      	mov	r3, fp
 80045c4:	4640      	mov	r0, r8
 80045c6:	4659      	mov	r1, fp
 80045c8:	f7fb ffc2 	bl	8000550 <__aeabi_dmul>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4620      	mov	r0, r4
 80045d2:	4629      	mov	r1, r5
 80045d4:	f7fb fe04 	bl	80001e0 <__aeabi_dsub>
 80045d8:	4642      	mov	r2, r8
 80045da:	4604      	mov	r4, r0
 80045dc:	460d      	mov	r5, r1
 80045de:	465b      	mov	r3, fp
 80045e0:	4650      	mov	r0, sl
 80045e2:	4659      	mov	r1, fp
 80045e4:	f7fb fdfe 	bl	80001e4 <__adddf3>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4620      	mov	r0, r4
 80045ee:	4629      	mov	r1, r5
 80045f0:	f7fc f8d8 	bl	80007a4 <__aeabi_ddiv>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	f7fb fdf4 	bl	80001e4 <__adddf3>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	a113      	add	r1, pc, #76	; (adr r1, 8004650 <__ieee754_asin+0x418>)
 8004602:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004606:	f7fb fdeb 	bl	80001e0 <__aeabi_dsub>
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	4630      	mov	r0, r6
 8004610:	4639      	mov	r1, r7
 8004612:	f7fb fde5 	bl	80001e0 <__aeabi_dsub>
 8004616:	4642      	mov	r2, r8
 8004618:	4604      	mov	r4, r0
 800461a:	460d      	mov	r5, r1
 800461c:	465b      	mov	r3, fp
 800461e:	4640      	mov	r0, r8
 8004620:	4659      	mov	r1, fp
 8004622:	f7fb fddf 	bl	80001e4 <__adddf3>
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	a10b      	add	r1, pc, #44	; (adr r1, 8004658 <__ieee754_asin+0x420>)
 800462c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004630:	f7fb fdd6 	bl	80001e0 <__aeabi_dsub>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4620      	mov	r0, r4
 800463a:	4629      	mov	r1, r5
 800463c:	f7fb fdd0 	bl	80001e0 <__aeabi_dsub>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	a104      	add	r1, pc, #16	; (adr r1, 8004658 <__ieee754_asin+0x420>)
 8004646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800464a:	e6df      	b.n	800440c <__ieee754_asin+0x1d4>
 800464c:	f3af 8000 	nop.w
 8004650:	33145c07 	.word	0x33145c07
 8004654:	3c91a626 	.word	0x3c91a626
 8004658:	54442d18 	.word	0x54442d18
 800465c:	3fe921fb 	.word	0x3fe921fb

08004660 <__ieee754_rem_pio2>:
 8004660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004664:	ed2d 8b02 	vpush	{d8}
 8004668:	ec55 4b10 	vmov	r4, r5, d0
 800466c:	4bca      	ldr	r3, [pc, #808]	; (8004998 <__ieee754_rem_pio2+0x338>)
 800466e:	b08b      	sub	sp, #44	; 0x2c
 8004670:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004674:	4598      	cmp	r8, r3
 8004676:	4682      	mov	sl, r0
 8004678:	9502      	str	r5, [sp, #8]
 800467a:	dc08      	bgt.n	800468e <__ieee754_rem_pio2+0x2e>
 800467c:	2200      	movs	r2, #0
 800467e:	2300      	movs	r3, #0
 8004680:	ed80 0b00 	vstr	d0, [r0]
 8004684:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004688:	f04f 0b00 	mov.w	fp, #0
 800468c:	e028      	b.n	80046e0 <__ieee754_rem_pio2+0x80>
 800468e:	4bc3      	ldr	r3, [pc, #780]	; (800499c <__ieee754_rem_pio2+0x33c>)
 8004690:	4598      	cmp	r8, r3
 8004692:	dc78      	bgt.n	8004786 <__ieee754_rem_pio2+0x126>
 8004694:	9b02      	ldr	r3, [sp, #8]
 8004696:	4ec2      	ldr	r6, [pc, #776]	; (80049a0 <__ieee754_rem_pio2+0x340>)
 8004698:	2b00      	cmp	r3, #0
 800469a:	ee10 0a10 	vmov	r0, s0
 800469e:	a3b0      	add	r3, pc, #704	; (adr r3, 8004960 <__ieee754_rem_pio2+0x300>)
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	4629      	mov	r1, r5
 80046a6:	dd39      	ble.n	800471c <__ieee754_rem_pio2+0xbc>
 80046a8:	f7fb fd9a 	bl	80001e0 <__aeabi_dsub>
 80046ac:	45b0      	cmp	r8, r6
 80046ae:	4604      	mov	r4, r0
 80046b0:	460d      	mov	r5, r1
 80046b2:	d01b      	beq.n	80046ec <__ieee754_rem_pio2+0x8c>
 80046b4:	a3ac      	add	r3, pc, #688	; (adr r3, 8004968 <__ieee754_rem_pio2+0x308>)
 80046b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ba:	f7fb fd91 	bl	80001e0 <__aeabi_dsub>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	e9ca 2300 	strd	r2, r3, [sl]
 80046c6:	4620      	mov	r0, r4
 80046c8:	4629      	mov	r1, r5
 80046ca:	f7fb fd89 	bl	80001e0 <__aeabi_dsub>
 80046ce:	a3a6      	add	r3, pc, #664	; (adr r3, 8004968 <__ieee754_rem_pio2+0x308>)
 80046d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d4:	f7fb fd84 	bl	80001e0 <__aeabi_dsub>
 80046d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80046dc:	f04f 0b01 	mov.w	fp, #1
 80046e0:	4658      	mov	r0, fp
 80046e2:	b00b      	add	sp, #44	; 0x2c
 80046e4:	ecbd 8b02 	vpop	{d8}
 80046e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ec:	a3a0      	add	r3, pc, #640	; (adr r3, 8004970 <__ieee754_rem_pio2+0x310>)
 80046ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f2:	f7fb fd75 	bl	80001e0 <__aeabi_dsub>
 80046f6:	a3a0      	add	r3, pc, #640	; (adr r3, 8004978 <__ieee754_rem_pio2+0x318>)
 80046f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fc:	4604      	mov	r4, r0
 80046fe:	460d      	mov	r5, r1
 8004700:	f7fb fd6e 	bl	80001e0 <__aeabi_dsub>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	e9ca 2300 	strd	r2, r3, [sl]
 800470c:	4620      	mov	r0, r4
 800470e:	4629      	mov	r1, r5
 8004710:	f7fb fd66 	bl	80001e0 <__aeabi_dsub>
 8004714:	a398      	add	r3, pc, #608	; (adr r3, 8004978 <__ieee754_rem_pio2+0x318>)
 8004716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471a:	e7db      	b.n	80046d4 <__ieee754_rem_pio2+0x74>
 800471c:	f7fb fd62 	bl	80001e4 <__adddf3>
 8004720:	45b0      	cmp	r8, r6
 8004722:	4604      	mov	r4, r0
 8004724:	460d      	mov	r5, r1
 8004726:	d016      	beq.n	8004756 <__ieee754_rem_pio2+0xf6>
 8004728:	a38f      	add	r3, pc, #572	; (adr r3, 8004968 <__ieee754_rem_pio2+0x308>)
 800472a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472e:	f7fb fd59 	bl	80001e4 <__adddf3>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	e9ca 2300 	strd	r2, r3, [sl]
 800473a:	4620      	mov	r0, r4
 800473c:	4629      	mov	r1, r5
 800473e:	f7fb fd4f 	bl	80001e0 <__aeabi_dsub>
 8004742:	a389      	add	r3, pc, #548	; (adr r3, 8004968 <__ieee754_rem_pio2+0x308>)
 8004744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004748:	f7fb fd4c 	bl	80001e4 <__adddf3>
 800474c:	f04f 3bff 	mov.w	fp, #4294967295
 8004750:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004754:	e7c4      	b.n	80046e0 <__ieee754_rem_pio2+0x80>
 8004756:	a386      	add	r3, pc, #536	; (adr r3, 8004970 <__ieee754_rem_pio2+0x310>)
 8004758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475c:	f7fb fd42 	bl	80001e4 <__adddf3>
 8004760:	a385      	add	r3, pc, #532	; (adr r3, 8004978 <__ieee754_rem_pio2+0x318>)
 8004762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004766:	4604      	mov	r4, r0
 8004768:	460d      	mov	r5, r1
 800476a:	f7fb fd3b 	bl	80001e4 <__adddf3>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	e9ca 2300 	strd	r2, r3, [sl]
 8004776:	4620      	mov	r0, r4
 8004778:	4629      	mov	r1, r5
 800477a:	f7fb fd31 	bl	80001e0 <__aeabi_dsub>
 800477e:	a37e      	add	r3, pc, #504	; (adr r3, 8004978 <__ieee754_rem_pio2+0x318>)
 8004780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004784:	e7e0      	b.n	8004748 <__ieee754_rem_pio2+0xe8>
 8004786:	4b87      	ldr	r3, [pc, #540]	; (80049a4 <__ieee754_rem_pio2+0x344>)
 8004788:	4598      	cmp	r8, r3
 800478a:	f300 80d9 	bgt.w	8004940 <__ieee754_rem_pio2+0x2e0>
 800478e:	f000 feed 	bl	800556c <fabs>
 8004792:	ec55 4b10 	vmov	r4, r5, d0
 8004796:	ee10 0a10 	vmov	r0, s0
 800479a:	a379      	add	r3, pc, #484	; (adr r3, 8004980 <__ieee754_rem_pio2+0x320>)
 800479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a0:	4629      	mov	r1, r5
 80047a2:	f7fb fed5 	bl	8000550 <__aeabi_dmul>
 80047a6:	4b80      	ldr	r3, [pc, #512]	; (80049a8 <__ieee754_rem_pio2+0x348>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	f7fb fd1b 	bl	80001e4 <__adddf3>
 80047ae:	f7fc f97f 	bl	8000ab0 <__aeabi_d2iz>
 80047b2:	4683      	mov	fp, r0
 80047b4:	f7fb fe62 	bl	800047c <__aeabi_i2d>
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	ec43 2b18 	vmov	d8, r2, r3
 80047c0:	a367      	add	r3, pc, #412	; (adr r3, 8004960 <__ieee754_rem_pio2+0x300>)
 80047c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c6:	f7fb fec3 	bl	8000550 <__aeabi_dmul>
 80047ca:	4602      	mov	r2, r0
 80047cc:	460b      	mov	r3, r1
 80047ce:	4620      	mov	r0, r4
 80047d0:	4629      	mov	r1, r5
 80047d2:	f7fb fd05 	bl	80001e0 <__aeabi_dsub>
 80047d6:	a364      	add	r3, pc, #400	; (adr r3, 8004968 <__ieee754_rem_pio2+0x308>)
 80047d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047dc:	4606      	mov	r6, r0
 80047de:	460f      	mov	r7, r1
 80047e0:	ec51 0b18 	vmov	r0, r1, d8
 80047e4:	f7fb feb4 	bl	8000550 <__aeabi_dmul>
 80047e8:	f1bb 0f1f 	cmp.w	fp, #31
 80047ec:	4604      	mov	r4, r0
 80047ee:	460d      	mov	r5, r1
 80047f0:	dc0d      	bgt.n	800480e <__ieee754_rem_pio2+0x1ae>
 80047f2:	4b6e      	ldr	r3, [pc, #440]	; (80049ac <__ieee754_rem_pio2+0x34c>)
 80047f4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80047f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047fc:	4543      	cmp	r3, r8
 80047fe:	d006      	beq.n	800480e <__ieee754_rem_pio2+0x1ae>
 8004800:	4622      	mov	r2, r4
 8004802:	462b      	mov	r3, r5
 8004804:	4630      	mov	r0, r6
 8004806:	4639      	mov	r1, r7
 8004808:	f7fb fcea 	bl	80001e0 <__aeabi_dsub>
 800480c:	e00f      	b.n	800482e <__ieee754_rem_pio2+0x1ce>
 800480e:	462b      	mov	r3, r5
 8004810:	4622      	mov	r2, r4
 8004812:	4630      	mov	r0, r6
 8004814:	4639      	mov	r1, r7
 8004816:	f7fb fce3 	bl	80001e0 <__aeabi_dsub>
 800481a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800481e:	9303      	str	r3, [sp, #12]
 8004820:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004824:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8004828:	f1b8 0f10 	cmp.w	r8, #16
 800482c:	dc02      	bgt.n	8004834 <__ieee754_rem_pio2+0x1d4>
 800482e:	e9ca 0100 	strd	r0, r1, [sl]
 8004832:	e039      	b.n	80048a8 <__ieee754_rem_pio2+0x248>
 8004834:	a34e      	add	r3, pc, #312	; (adr r3, 8004970 <__ieee754_rem_pio2+0x310>)
 8004836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483a:	ec51 0b18 	vmov	r0, r1, d8
 800483e:	f7fb fe87 	bl	8000550 <__aeabi_dmul>
 8004842:	4604      	mov	r4, r0
 8004844:	460d      	mov	r5, r1
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	4630      	mov	r0, r6
 800484c:	4639      	mov	r1, r7
 800484e:	f7fb fcc7 	bl	80001e0 <__aeabi_dsub>
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	4680      	mov	r8, r0
 8004858:	4689      	mov	r9, r1
 800485a:	4630      	mov	r0, r6
 800485c:	4639      	mov	r1, r7
 800485e:	f7fb fcbf 	bl	80001e0 <__aeabi_dsub>
 8004862:	4622      	mov	r2, r4
 8004864:	462b      	mov	r3, r5
 8004866:	f7fb fcbb 	bl	80001e0 <__aeabi_dsub>
 800486a:	a343      	add	r3, pc, #268	; (adr r3, 8004978 <__ieee754_rem_pio2+0x318>)
 800486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004870:	4604      	mov	r4, r0
 8004872:	460d      	mov	r5, r1
 8004874:	ec51 0b18 	vmov	r0, r1, d8
 8004878:	f7fb fe6a 	bl	8000550 <__aeabi_dmul>
 800487c:	4622      	mov	r2, r4
 800487e:	462b      	mov	r3, r5
 8004880:	f7fb fcae 	bl	80001e0 <__aeabi_dsub>
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	4604      	mov	r4, r0
 800488a:	460d      	mov	r5, r1
 800488c:	4640      	mov	r0, r8
 800488e:	4649      	mov	r1, r9
 8004890:	f7fb fca6 	bl	80001e0 <__aeabi_dsub>
 8004894:	9a03      	ldr	r2, [sp, #12]
 8004896:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b31      	cmp	r3, #49	; 0x31
 800489e:	dc24      	bgt.n	80048ea <__ieee754_rem_pio2+0x28a>
 80048a0:	e9ca 0100 	strd	r0, r1, [sl]
 80048a4:	4646      	mov	r6, r8
 80048a6:	464f      	mov	r7, r9
 80048a8:	e9da 8900 	ldrd	r8, r9, [sl]
 80048ac:	4630      	mov	r0, r6
 80048ae:	4642      	mov	r2, r8
 80048b0:	464b      	mov	r3, r9
 80048b2:	4639      	mov	r1, r7
 80048b4:	f7fb fc94 	bl	80001e0 <__aeabi_dsub>
 80048b8:	462b      	mov	r3, r5
 80048ba:	4622      	mov	r2, r4
 80048bc:	f7fb fc90 	bl	80001e0 <__aeabi_dsub>
 80048c0:	9b02      	ldr	r3, [sp, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80048c8:	f6bf af0a 	bge.w	80046e0 <__ieee754_rem_pio2+0x80>
 80048cc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80048d0:	f8ca 3004 	str.w	r3, [sl, #4]
 80048d4:	f8ca 8000 	str.w	r8, [sl]
 80048d8:	f8ca 0008 	str.w	r0, [sl, #8]
 80048dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80048e0:	f8ca 300c 	str.w	r3, [sl, #12]
 80048e4:	f1cb 0b00 	rsb	fp, fp, #0
 80048e8:	e6fa      	b.n	80046e0 <__ieee754_rem_pio2+0x80>
 80048ea:	a327      	add	r3, pc, #156	; (adr r3, 8004988 <__ieee754_rem_pio2+0x328>)
 80048ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f0:	ec51 0b18 	vmov	r0, r1, d8
 80048f4:	f7fb fe2c 	bl	8000550 <__aeabi_dmul>
 80048f8:	4604      	mov	r4, r0
 80048fa:	460d      	mov	r5, r1
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4640      	mov	r0, r8
 8004902:	4649      	mov	r1, r9
 8004904:	f7fb fc6c 	bl	80001e0 <__aeabi_dsub>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4606      	mov	r6, r0
 800490e:	460f      	mov	r7, r1
 8004910:	4640      	mov	r0, r8
 8004912:	4649      	mov	r1, r9
 8004914:	f7fb fc64 	bl	80001e0 <__aeabi_dsub>
 8004918:	4622      	mov	r2, r4
 800491a:	462b      	mov	r3, r5
 800491c:	f7fb fc60 	bl	80001e0 <__aeabi_dsub>
 8004920:	a31b      	add	r3, pc, #108	; (adr r3, 8004990 <__ieee754_rem_pio2+0x330>)
 8004922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004926:	4604      	mov	r4, r0
 8004928:	460d      	mov	r5, r1
 800492a:	ec51 0b18 	vmov	r0, r1, d8
 800492e:	f7fb fe0f 	bl	8000550 <__aeabi_dmul>
 8004932:	4622      	mov	r2, r4
 8004934:	462b      	mov	r3, r5
 8004936:	f7fb fc53 	bl	80001e0 <__aeabi_dsub>
 800493a:	4604      	mov	r4, r0
 800493c:	460d      	mov	r5, r1
 800493e:	e75f      	b.n	8004800 <__ieee754_rem_pio2+0x1a0>
 8004940:	4b1b      	ldr	r3, [pc, #108]	; (80049b0 <__ieee754_rem_pio2+0x350>)
 8004942:	4598      	cmp	r8, r3
 8004944:	dd36      	ble.n	80049b4 <__ieee754_rem_pio2+0x354>
 8004946:	ee10 2a10 	vmov	r2, s0
 800494a:	462b      	mov	r3, r5
 800494c:	4620      	mov	r0, r4
 800494e:	4629      	mov	r1, r5
 8004950:	f7fb fc46 	bl	80001e0 <__aeabi_dsub>
 8004954:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004958:	e9ca 0100 	strd	r0, r1, [sl]
 800495c:	e694      	b.n	8004688 <__ieee754_rem_pio2+0x28>
 800495e:	bf00      	nop
 8004960:	54400000 	.word	0x54400000
 8004964:	3ff921fb 	.word	0x3ff921fb
 8004968:	1a626331 	.word	0x1a626331
 800496c:	3dd0b461 	.word	0x3dd0b461
 8004970:	1a600000 	.word	0x1a600000
 8004974:	3dd0b461 	.word	0x3dd0b461
 8004978:	2e037073 	.word	0x2e037073
 800497c:	3ba3198a 	.word	0x3ba3198a
 8004980:	6dc9c883 	.word	0x6dc9c883
 8004984:	3fe45f30 	.word	0x3fe45f30
 8004988:	2e000000 	.word	0x2e000000
 800498c:	3ba3198a 	.word	0x3ba3198a
 8004990:	252049c1 	.word	0x252049c1
 8004994:	397b839a 	.word	0x397b839a
 8004998:	3fe921fb 	.word	0x3fe921fb
 800499c:	4002d97b 	.word	0x4002d97b
 80049a0:	3ff921fb 	.word	0x3ff921fb
 80049a4:	413921fb 	.word	0x413921fb
 80049a8:	3fe00000 	.word	0x3fe00000
 80049ac:	080057d4 	.word	0x080057d4
 80049b0:	7fefffff 	.word	0x7fefffff
 80049b4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80049b8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80049bc:	ee10 0a10 	vmov	r0, s0
 80049c0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80049c4:	ee10 6a10 	vmov	r6, s0
 80049c8:	460f      	mov	r7, r1
 80049ca:	f7fc f871 	bl	8000ab0 <__aeabi_d2iz>
 80049ce:	f7fb fd55 	bl	800047c <__aeabi_i2d>
 80049d2:	4602      	mov	r2, r0
 80049d4:	460b      	mov	r3, r1
 80049d6:	4630      	mov	r0, r6
 80049d8:	4639      	mov	r1, r7
 80049da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80049de:	f7fb fbff 	bl	80001e0 <__aeabi_dsub>
 80049e2:	4b22      	ldr	r3, [pc, #136]	; (8004a6c <__ieee754_rem_pio2+0x40c>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	f7fb fdb3 	bl	8000550 <__aeabi_dmul>
 80049ea:	460f      	mov	r7, r1
 80049ec:	4606      	mov	r6, r0
 80049ee:	f7fc f85f 	bl	8000ab0 <__aeabi_d2iz>
 80049f2:	f7fb fd43 	bl	800047c <__aeabi_i2d>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	4630      	mov	r0, r6
 80049fc:	4639      	mov	r1, r7
 80049fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004a02:	f7fb fbed 	bl	80001e0 <__aeabi_dsub>
 8004a06:	4b19      	ldr	r3, [pc, #100]	; (8004a6c <__ieee754_rem_pio2+0x40c>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f7fb fda1 	bl	8000550 <__aeabi_dmul>
 8004a0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004a12:	ad04      	add	r5, sp, #16
 8004a14:	f04f 0803 	mov.w	r8, #3
 8004a18:	46a9      	mov	r9, r5
 8004a1a:	2600      	movs	r6, #0
 8004a1c:	2700      	movs	r7, #0
 8004a1e:	4632      	mov	r2, r6
 8004a20:	463b      	mov	r3, r7
 8004a22:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004a26:	46c3      	mov	fp, r8
 8004a28:	3d08      	subs	r5, #8
 8004a2a:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a2e:	f7fb fff7 	bl	8000a20 <__aeabi_dcmpeq>
 8004a32:	2800      	cmp	r0, #0
 8004a34:	d1f3      	bne.n	8004a1e <__ieee754_rem_pio2+0x3be>
 8004a36:	4b0e      	ldr	r3, [pc, #56]	; (8004a70 <__ieee754_rem_pio2+0x410>)
 8004a38:	9301      	str	r3, [sp, #4]
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	4622      	mov	r2, r4
 8004a40:	465b      	mov	r3, fp
 8004a42:	4651      	mov	r1, sl
 8004a44:	4648      	mov	r0, r9
 8004a46:	f000 f993 	bl	8004d70 <__kernel_rem_pio2>
 8004a4a:	9b02      	ldr	r3, [sp, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	4683      	mov	fp, r0
 8004a50:	f6bf ae46 	bge.w	80046e0 <__ieee754_rem_pio2+0x80>
 8004a54:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004a58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004a5c:	f8ca 3004 	str.w	r3, [sl, #4]
 8004a60:	f8da 300c 	ldr.w	r3, [sl, #12]
 8004a64:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004a68:	e73a      	b.n	80048e0 <__ieee754_rem_pio2+0x280>
 8004a6a:	bf00      	nop
 8004a6c:	41700000 	.word	0x41700000
 8004a70:	08005854 	.word	0x08005854

08004a74 <__ieee754_sqrt>:
 8004a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a78:	ec55 4b10 	vmov	r4, r5, d0
 8004a7c:	4e56      	ldr	r6, [pc, #344]	; (8004bd8 <__ieee754_sqrt+0x164>)
 8004a7e:	43ae      	bics	r6, r5
 8004a80:	ee10 0a10 	vmov	r0, s0
 8004a84:	ee10 3a10 	vmov	r3, s0
 8004a88:	4629      	mov	r1, r5
 8004a8a:	462a      	mov	r2, r5
 8004a8c:	d110      	bne.n	8004ab0 <__ieee754_sqrt+0x3c>
 8004a8e:	ee10 2a10 	vmov	r2, s0
 8004a92:	462b      	mov	r3, r5
 8004a94:	f7fb fd5c 	bl	8000550 <__aeabi_dmul>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	4629      	mov	r1, r5
 8004aa0:	f7fb fba0 	bl	80001e4 <__adddf3>
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	460d      	mov	r5, r1
 8004aa8:	ec45 4b10 	vmov	d0, r4, r5
 8004aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ab0:	2d00      	cmp	r5, #0
 8004ab2:	dc10      	bgt.n	8004ad6 <__ieee754_sqrt+0x62>
 8004ab4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004ab8:	4330      	orrs	r0, r6
 8004aba:	d0f5      	beq.n	8004aa8 <__ieee754_sqrt+0x34>
 8004abc:	b15d      	cbz	r5, 8004ad6 <__ieee754_sqrt+0x62>
 8004abe:	ee10 2a10 	vmov	r2, s0
 8004ac2:	462b      	mov	r3, r5
 8004ac4:	ee10 0a10 	vmov	r0, s0
 8004ac8:	f7fb fb8a 	bl	80001e0 <__aeabi_dsub>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	f7fb fe68 	bl	80007a4 <__aeabi_ddiv>
 8004ad4:	e7e6      	b.n	8004aa4 <__ieee754_sqrt+0x30>
 8004ad6:	1509      	asrs	r1, r1, #20
 8004ad8:	d076      	beq.n	8004bc8 <__ieee754_sqrt+0x154>
 8004ada:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004ade:	07ce      	lsls	r6, r1, #31
 8004ae0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8004ae4:	bf5e      	ittt	pl
 8004ae6:	0fda      	lsrpl	r2, r3, #31
 8004ae8:	005b      	lslpl	r3, r3, #1
 8004aea:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8004aee:	0fda      	lsrs	r2, r3, #31
 8004af0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8004af4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8004af8:	2000      	movs	r0, #0
 8004afa:	106d      	asrs	r5, r5, #1
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	f04f 0e16 	mov.w	lr, #22
 8004b02:	4684      	mov	ip, r0
 8004b04:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b08:	eb0c 0401 	add.w	r4, ip, r1
 8004b0c:	4294      	cmp	r4, r2
 8004b0e:	bfde      	ittt	le
 8004b10:	1b12      	suble	r2, r2, r4
 8004b12:	eb04 0c01 	addle.w	ip, r4, r1
 8004b16:	1840      	addle	r0, r0, r1
 8004b18:	0052      	lsls	r2, r2, #1
 8004b1a:	f1be 0e01 	subs.w	lr, lr, #1
 8004b1e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8004b22:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004b26:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004b2a:	d1ed      	bne.n	8004b08 <__ieee754_sqrt+0x94>
 8004b2c:	4671      	mov	r1, lr
 8004b2e:	2720      	movs	r7, #32
 8004b30:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004b34:	4562      	cmp	r2, ip
 8004b36:	eb04 060e 	add.w	r6, r4, lr
 8004b3a:	dc02      	bgt.n	8004b42 <__ieee754_sqrt+0xce>
 8004b3c:	d113      	bne.n	8004b66 <__ieee754_sqrt+0xf2>
 8004b3e:	429e      	cmp	r6, r3
 8004b40:	d811      	bhi.n	8004b66 <__ieee754_sqrt+0xf2>
 8004b42:	2e00      	cmp	r6, #0
 8004b44:	eb06 0e04 	add.w	lr, r6, r4
 8004b48:	da43      	bge.n	8004bd2 <__ieee754_sqrt+0x15e>
 8004b4a:	f1be 0f00 	cmp.w	lr, #0
 8004b4e:	db40      	blt.n	8004bd2 <__ieee754_sqrt+0x15e>
 8004b50:	f10c 0801 	add.w	r8, ip, #1
 8004b54:	eba2 020c 	sub.w	r2, r2, ip
 8004b58:	429e      	cmp	r6, r3
 8004b5a:	bf88      	it	hi
 8004b5c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004b60:	1b9b      	subs	r3, r3, r6
 8004b62:	4421      	add	r1, r4
 8004b64:	46c4      	mov	ip, r8
 8004b66:	0052      	lsls	r2, r2, #1
 8004b68:	3f01      	subs	r7, #1
 8004b6a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8004b6e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004b72:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004b76:	d1dd      	bne.n	8004b34 <__ieee754_sqrt+0xc0>
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	d006      	beq.n	8004b8a <__ieee754_sqrt+0x116>
 8004b7c:	1c4c      	adds	r4, r1, #1
 8004b7e:	bf13      	iteet	ne
 8004b80:	3101      	addne	r1, #1
 8004b82:	3001      	addeq	r0, #1
 8004b84:	4639      	moveq	r1, r7
 8004b86:	f021 0101 	bicne.w	r1, r1, #1
 8004b8a:	1043      	asrs	r3, r0, #1
 8004b8c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004b90:	0849      	lsrs	r1, r1, #1
 8004b92:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004b96:	07c2      	lsls	r2, r0, #31
 8004b98:	bf48      	it	mi
 8004b9a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8004b9e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8004ba2:	460c      	mov	r4, r1
 8004ba4:	463d      	mov	r5, r7
 8004ba6:	e77f      	b.n	8004aa8 <__ieee754_sqrt+0x34>
 8004ba8:	0ada      	lsrs	r2, r3, #11
 8004baa:	3815      	subs	r0, #21
 8004bac:	055b      	lsls	r3, r3, #21
 8004bae:	2a00      	cmp	r2, #0
 8004bb0:	d0fa      	beq.n	8004ba8 <__ieee754_sqrt+0x134>
 8004bb2:	02d7      	lsls	r7, r2, #11
 8004bb4:	d50a      	bpl.n	8004bcc <__ieee754_sqrt+0x158>
 8004bb6:	f1c1 0420 	rsb	r4, r1, #32
 8004bba:	fa23 f404 	lsr.w	r4, r3, r4
 8004bbe:	1e4d      	subs	r5, r1, #1
 8004bc0:	408b      	lsls	r3, r1
 8004bc2:	4322      	orrs	r2, r4
 8004bc4:	1b41      	subs	r1, r0, r5
 8004bc6:	e788      	b.n	8004ada <__ieee754_sqrt+0x66>
 8004bc8:	4608      	mov	r0, r1
 8004bca:	e7f0      	b.n	8004bae <__ieee754_sqrt+0x13a>
 8004bcc:	0052      	lsls	r2, r2, #1
 8004bce:	3101      	adds	r1, #1
 8004bd0:	e7ef      	b.n	8004bb2 <__ieee754_sqrt+0x13e>
 8004bd2:	46e0      	mov	r8, ip
 8004bd4:	e7be      	b.n	8004b54 <__ieee754_sqrt+0xe0>
 8004bd6:	bf00      	nop
 8004bd8:	7ff00000 	.word	0x7ff00000
 8004bdc:	00000000 	.word	0x00000000

08004be0 <__kernel_cos>:
 8004be0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be4:	ec57 6b10 	vmov	r6, r7, d0
 8004be8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004bec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004bf0:	ed8d 1b00 	vstr	d1, [sp]
 8004bf4:	da07      	bge.n	8004c06 <__kernel_cos+0x26>
 8004bf6:	ee10 0a10 	vmov	r0, s0
 8004bfa:	4639      	mov	r1, r7
 8004bfc:	f7fb ff58 	bl	8000ab0 <__aeabi_d2iz>
 8004c00:	2800      	cmp	r0, #0
 8004c02:	f000 8088 	beq.w	8004d16 <__kernel_cos+0x136>
 8004c06:	4632      	mov	r2, r6
 8004c08:	463b      	mov	r3, r7
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	4639      	mov	r1, r7
 8004c0e:	f7fb fc9f 	bl	8000550 <__aeabi_dmul>
 8004c12:	4b51      	ldr	r3, [pc, #324]	; (8004d58 <__kernel_cos+0x178>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	4604      	mov	r4, r0
 8004c18:	460d      	mov	r5, r1
 8004c1a:	f7fb fc99 	bl	8000550 <__aeabi_dmul>
 8004c1e:	a340      	add	r3, pc, #256	; (adr r3, 8004d20 <__kernel_cos+0x140>)
 8004c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c24:	4682      	mov	sl, r0
 8004c26:	468b      	mov	fp, r1
 8004c28:	4620      	mov	r0, r4
 8004c2a:	4629      	mov	r1, r5
 8004c2c:	f7fb fc90 	bl	8000550 <__aeabi_dmul>
 8004c30:	a33d      	add	r3, pc, #244	; (adr r3, 8004d28 <__kernel_cos+0x148>)
 8004c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c36:	f7fb fad5 	bl	80001e4 <__adddf3>
 8004c3a:	4622      	mov	r2, r4
 8004c3c:	462b      	mov	r3, r5
 8004c3e:	f7fb fc87 	bl	8000550 <__aeabi_dmul>
 8004c42:	a33b      	add	r3, pc, #236	; (adr r3, 8004d30 <__kernel_cos+0x150>)
 8004c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c48:	f7fb faca 	bl	80001e0 <__aeabi_dsub>
 8004c4c:	4622      	mov	r2, r4
 8004c4e:	462b      	mov	r3, r5
 8004c50:	f7fb fc7e 	bl	8000550 <__aeabi_dmul>
 8004c54:	a338      	add	r3, pc, #224	; (adr r3, 8004d38 <__kernel_cos+0x158>)
 8004c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5a:	f7fb fac3 	bl	80001e4 <__adddf3>
 8004c5e:	4622      	mov	r2, r4
 8004c60:	462b      	mov	r3, r5
 8004c62:	f7fb fc75 	bl	8000550 <__aeabi_dmul>
 8004c66:	a336      	add	r3, pc, #216	; (adr r3, 8004d40 <__kernel_cos+0x160>)
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	f7fb fab8 	bl	80001e0 <__aeabi_dsub>
 8004c70:	4622      	mov	r2, r4
 8004c72:	462b      	mov	r3, r5
 8004c74:	f7fb fc6c 	bl	8000550 <__aeabi_dmul>
 8004c78:	a333      	add	r3, pc, #204	; (adr r3, 8004d48 <__kernel_cos+0x168>)
 8004c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7e:	f7fb fab1 	bl	80001e4 <__adddf3>
 8004c82:	4622      	mov	r2, r4
 8004c84:	462b      	mov	r3, r5
 8004c86:	f7fb fc63 	bl	8000550 <__aeabi_dmul>
 8004c8a:	4622      	mov	r2, r4
 8004c8c:	462b      	mov	r3, r5
 8004c8e:	f7fb fc5f 	bl	8000550 <__aeabi_dmul>
 8004c92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c96:	4604      	mov	r4, r0
 8004c98:	460d      	mov	r5, r1
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	4639      	mov	r1, r7
 8004c9e:	f7fb fc57 	bl	8000550 <__aeabi_dmul>
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	4629      	mov	r1, r5
 8004ca8:	4620      	mov	r0, r4
 8004caa:	f7fb fa99 	bl	80001e0 <__aeabi_dsub>
 8004cae:	4b2b      	ldr	r3, [pc, #172]	; (8004d5c <__kernel_cos+0x17c>)
 8004cb0:	4598      	cmp	r8, r3
 8004cb2:	4606      	mov	r6, r0
 8004cb4:	460f      	mov	r7, r1
 8004cb6:	dc10      	bgt.n	8004cda <__kernel_cos+0xfa>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4650      	mov	r0, sl
 8004cbe:	4659      	mov	r1, fp
 8004cc0:	f7fb fa8e 	bl	80001e0 <__aeabi_dsub>
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4926      	ldr	r1, [pc, #152]	; (8004d60 <__kernel_cos+0x180>)
 8004cc8:	4602      	mov	r2, r0
 8004cca:	2000      	movs	r0, #0
 8004ccc:	f7fb fa88 	bl	80001e0 <__aeabi_dsub>
 8004cd0:	ec41 0b10 	vmov	d0, r0, r1
 8004cd4:	b003      	add	sp, #12
 8004cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cda:	4b22      	ldr	r3, [pc, #136]	; (8004d64 <__kernel_cos+0x184>)
 8004cdc:	4920      	ldr	r1, [pc, #128]	; (8004d60 <__kernel_cos+0x180>)
 8004cde:	4598      	cmp	r8, r3
 8004ce0:	bfcc      	ite	gt
 8004ce2:	4d21      	ldrgt	r5, [pc, #132]	; (8004d68 <__kernel_cos+0x188>)
 8004ce4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004ce8:	2400      	movs	r4, #0
 8004cea:	4622      	mov	r2, r4
 8004cec:	462b      	mov	r3, r5
 8004cee:	2000      	movs	r0, #0
 8004cf0:	f7fb fa76 	bl	80001e0 <__aeabi_dsub>
 8004cf4:	4622      	mov	r2, r4
 8004cf6:	4680      	mov	r8, r0
 8004cf8:	4689      	mov	r9, r1
 8004cfa:	462b      	mov	r3, r5
 8004cfc:	4650      	mov	r0, sl
 8004cfe:	4659      	mov	r1, fp
 8004d00:	f7fb fa6e 	bl	80001e0 <__aeabi_dsub>
 8004d04:	4632      	mov	r2, r6
 8004d06:	463b      	mov	r3, r7
 8004d08:	f7fb fa6a 	bl	80001e0 <__aeabi_dsub>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4640      	mov	r0, r8
 8004d12:	4649      	mov	r1, r9
 8004d14:	e7da      	b.n	8004ccc <__kernel_cos+0xec>
 8004d16:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004d50 <__kernel_cos+0x170>
 8004d1a:	e7db      	b.n	8004cd4 <__kernel_cos+0xf4>
 8004d1c:	f3af 8000 	nop.w
 8004d20:	be8838d4 	.word	0xbe8838d4
 8004d24:	bda8fae9 	.word	0xbda8fae9
 8004d28:	bdb4b1c4 	.word	0xbdb4b1c4
 8004d2c:	3e21ee9e 	.word	0x3e21ee9e
 8004d30:	809c52ad 	.word	0x809c52ad
 8004d34:	3e927e4f 	.word	0x3e927e4f
 8004d38:	19cb1590 	.word	0x19cb1590
 8004d3c:	3efa01a0 	.word	0x3efa01a0
 8004d40:	16c15177 	.word	0x16c15177
 8004d44:	3f56c16c 	.word	0x3f56c16c
 8004d48:	5555554c 	.word	0x5555554c
 8004d4c:	3fa55555 	.word	0x3fa55555
 8004d50:	00000000 	.word	0x00000000
 8004d54:	3ff00000 	.word	0x3ff00000
 8004d58:	3fe00000 	.word	0x3fe00000
 8004d5c:	3fd33332 	.word	0x3fd33332
 8004d60:	3ff00000 	.word	0x3ff00000
 8004d64:	3fe90000 	.word	0x3fe90000
 8004d68:	3fd20000 	.word	0x3fd20000
 8004d6c:	00000000 	.word	0x00000000

08004d70 <__kernel_rem_pio2>:
 8004d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d74:	ed2d 8b02 	vpush	{d8}
 8004d78:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004d7c:	f112 0f14 	cmn.w	r2, #20
 8004d80:	9308      	str	r3, [sp, #32]
 8004d82:	9101      	str	r1, [sp, #4]
 8004d84:	4bc6      	ldr	r3, [pc, #792]	; (80050a0 <__kernel_rem_pio2+0x330>)
 8004d86:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8004d88:	9009      	str	r0, [sp, #36]	; 0x24
 8004d8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004d8e:	9304      	str	r3, [sp, #16]
 8004d90:	9b08      	ldr	r3, [sp, #32]
 8004d92:	f103 33ff 	add.w	r3, r3, #4294967295
 8004d96:	bfa8      	it	ge
 8004d98:	1ed4      	subge	r4, r2, #3
 8004d9a:	9306      	str	r3, [sp, #24]
 8004d9c:	bfb2      	itee	lt
 8004d9e:	2400      	movlt	r4, #0
 8004da0:	2318      	movge	r3, #24
 8004da2:	fb94 f4f3 	sdivge	r4, r4, r3
 8004da6:	f06f 0317 	mvn.w	r3, #23
 8004daa:	fb04 3303 	mla	r3, r4, r3, r3
 8004dae:	eb03 0a02 	add.w	sl, r3, r2
 8004db2:	9b04      	ldr	r3, [sp, #16]
 8004db4:	9a06      	ldr	r2, [sp, #24]
 8004db6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005090 <__kernel_rem_pio2+0x320>
 8004dba:	eb03 0802 	add.w	r8, r3, r2
 8004dbe:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004dc0:	1aa7      	subs	r7, r4, r2
 8004dc2:	ae20      	add	r6, sp, #128	; 0x80
 8004dc4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004dc8:	2500      	movs	r5, #0
 8004dca:	4545      	cmp	r5, r8
 8004dcc:	dd18      	ble.n	8004e00 <__kernel_rem_pio2+0x90>
 8004dce:	9b08      	ldr	r3, [sp, #32]
 8004dd0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004dd4:	aa20      	add	r2, sp, #128	; 0x80
 8004dd6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8005090 <__kernel_rem_pio2+0x320>
 8004dda:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004dde:	f1c3 0301 	rsb	r3, r3, #1
 8004de2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8004de6:	9307      	str	r3, [sp, #28]
 8004de8:	9b07      	ldr	r3, [sp, #28]
 8004dea:	9a04      	ldr	r2, [sp, #16]
 8004dec:	4443      	add	r3, r8
 8004dee:	429a      	cmp	r2, r3
 8004df0:	db2f      	blt.n	8004e52 <__kernel_rem_pio2+0xe2>
 8004df2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004df6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004dfa:	462f      	mov	r7, r5
 8004dfc:	2600      	movs	r6, #0
 8004dfe:	e01b      	b.n	8004e38 <__kernel_rem_pio2+0xc8>
 8004e00:	42ef      	cmn	r7, r5
 8004e02:	d407      	bmi.n	8004e14 <__kernel_rem_pio2+0xa4>
 8004e04:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004e08:	f7fb fb38 	bl	800047c <__aeabi_i2d>
 8004e0c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004e10:	3501      	adds	r5, #1
 8004e12:	e7da      	b.n	8004dca <__kernel_rem_pio2+0x5a>
 8004e14:	ec51 0b18 	vmov	r0, r1, d8
 8004e18:	e7f8      	b.n	8004e0c <__kernel_rem_pio2+0x9c>
 8004e1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e1e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004e22:	f7fb fb95 	bl	8000550 <__aeabi_dmul>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e2e:	f7fb f9d9 	bl	80001e4 <__adddf3>
 8004e32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e36:	3601      	adds	r6, #1
 8004e38:	9b06      	ldr	r3, [sp, #24]
 8004e3a:	429e      	cmp	r6, r3
 8004e3c:	f1a7 0708 	sub.w	r7, r7, #8
 8004e40:	ddeb      	ble.n	8004e1a <__kernel_rem_pio2+0xaa>
 8004e42:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004e46:	3508      	adds	r5, #8
 8004e48:	ecab 7b02 	vstmia	fp!, {d7}
 8004e4c:	f108 0801 	add.w	r8, r8, #1
 8004e50:	e7ca      	b.n	8004de8 <__kernel_rem_pio2+0x78>
 8004e52:	9b04      	ldr	r3, [sp, #16]
 8004e54:	aa0c      	add	r2, sp, #48	; 0x30
 8004e56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004e5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e5c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004e5e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004e62:	9c04      	ldr	r4, [sp, #16]
 8004e64:	930a      	str	r3, [sp, #40]	; 0x28
 8004e66:	ab98      	add	r3, sp, #608	; 0x260
 8004e68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004e6c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004e70:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8004e74:	f8cd b008 	str.w	fp, [sp, #8]
 8004e78:	4625      	mov	r5, r4
 8004e7a:	2d00      	cmp	r5, #0
 8004e7c:	dc78      	bgt.n	8004f70 <__kernel_rem_pio2+0x200>
 8004e7e:	ec47 6b10 	vmov	d0, r6, r7
 8004e82:	4650      	mov	r0, sl
 8004e84:	f000 fc04 	bl	8005690 <scalbn>
 8004e88:	ec57 6b10 	vmov	r6, r7, d0
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004e92:	ee10 0a10 	vmov	r0, s0
 8004e96:	4639      	mov	r1, r7
 8004e98:	f7fb fb5a 	bl	8000550 <__aeabi_dmul>
 8004e9c:	ec41 0b10 	vmov	d0, r0, r1
 8004ea0:	f000 fb6e 	bl	8005580 <floor>
 8004ea4:	4b7f      	ldr	r3, [pc, #508]	; (80050a4 <__kernel_rem_pio2+0x334>)
 8004ea6:	ec51 0b10 	vmov	r0, r1, d0
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f7fb fb50 	bl	8000550 <__aeabi_dmul>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4630      	mov	r0, r6
 8004eb6:	4639      	mov	r1, r7
 8004eb8:	f7fb f992 	bl	80001e0 <__aeabi_dsub>
 8004ebc:	460f      	mov	r7, r1
 8004ebe:	4606      	mov	r6, r0
 8004ec0:	f7fb fdf6 	bl	8000ab0 <__aeabi_d2iz>
 8004ec4:	9007      	str	r0, [sp, #28]
 8004ec6:	f7fb fad9 	bl	800047c <__aeabi_i2d>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4630      	mov	r0, r6
 8004ed0:	4639      	mov	r1, r7
 8004ed2:	f7fb f985 	bl	80001e0 <__aeabi_dsub>
 8004ed6:	f1ba 0f00 	cmp.w	sl, #0
 8004eda:	4606      	mov	r6, r0
 8004edc:	460f      	mov	r7, r1
 8004ede:	dd70      	ble.n	8004fc2 <__kernel_rem_pio2+0x252>
 8004ee0:	1e62      	subs	r2, r4, #1
 8004ee2:	ab0c      	add	r3, sp, #48	; 0x30
 8004ee4:	9d07      	ldr	r5, [sp, #28]
 8004ee6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004eea:	f1ca 0118 	rsb	r1, sl, #24
 8004eee:	fa40 f301 	asr.w	r3, r0, r1
 8004ef2:	441d      	add	r5, r3
 8004ef4:	408b      	lsls	r3, r1
 8004ef6:	1ac0      	subs	r0, r0, r3
 8004ef8:	ab0c      	add	r3, sp, #48	; 0x30
 8004efa:	9507      	str	r5, [sp, #28]
 8004efc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004f00:	f1ca 0317 	rsb	r3, sl, #23
 8004f04:	fa40 f303 	asr.w	r3, r0, r3
 8004f08:	9302      	str	r3, [sp, #8]
 8004f0a:	9b02      	ldr	r3, [sp, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	dd66      	ble.n	8004fde <__kernel_rem_pio2+0x26e>
 8004f10:	9b07      	ldr	r3, [sp, #28]
 8004f12:	2200      	movs	r2, #0
 8004f14:	3301      	adds	r3, #1
 8004f16:	9307      	str	r3, [sp, #28]
 8004f18:	4615      	mov	r5, r2
 8004f1a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004f1e:	4294      	cmp	r4, r2
 8004f20:	f300 8099 	bgt.w	8005056 <__kernel_rem_pio2+0x2e6>
 8004f24:	f1ba 0f00 	cmp.w	sl, #0
 8004f28:	dd07      	ble.n	8004f3a <__kernel_rem_pio2+0x1ca>
 8004f2a:	f1ba 0f01 	cmp.w	sl, #1
 8004f2e:	f000 80a5 	beq.w	800507c <__kernel_rem_pio2+0x30c>
 8004f32:	f1ba 0f02 	cmp.w	sl, #2
 8004f36:	f000 80c1 	beq.w	80050bc <__kernel_rem_pio2+0x34c>
 8004f3a:	9b02      	ldr	r3, [sp, #8]
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d14e      	bne.n	8004fde <__kernel_rem_pio2+0x26e>
 8004f40:	4632      	mov	r2, r6
 8004f42:	463b      	mov	r3, r7
 8004f44:	4958      	ldr	r1, [pc, #352]	; (80050a8 <__kernel_rem_pio2+0x338>)
 8004f46:	2000      	movs	r0, #0
 8004f48:	f7fb f94a 	bl	80001e0 <__aeabi_dsub>
 8004f4c:	4606      	mov	r6, r0
 8004f4e:	460f      	mov	r7, r1
 8004f50:	2d00      	cmp	r5, #0
 8004f52:	d044      	beq.n	8004fde <__kernel_rem_pio2+0x26e>
 8004f54:	4650      	mov	r0, sl
 8004f56:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005098 <__kernel_rem_pio2+0x328>
 8004f5a:	f000 fb99 	bl	8005690 <scalbn>
 8004f5e:	4630      	mov	r0, r6
 8004f60:	4639      	mov	r1, r7
 8004f62:	ec53 2b10 	vmov	r2, r3, d0
 8004f66:	f7fb f93b 	bl	80001e0 <__aeabi_dsub>
 8004f6a:	4606      	mov	r6, r0
 8004f6c:	460f      	mov	r7, r1
 8004f6e:	e036      	b.n	8004fde <__kernel_rem_pio2+0x26e>
 8004f70:	4b4e      	ldr	r3, [pc, #312]	; (80050ac <__kernel_rem_pio2+0x33c>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	4630      	mov	r0, r6
 8004f76:	4639      	mov	r1, r7
 8004f78:	f7fb faea 	bl	8000550 <__aeabi_dmul>
 8004f7c:	f7fb fd98 	bl	8000ab0 <__aeabi_d2iz>
 8004f80:	f7fb fa7c 	bl	800047c <__aeabi_i2d>
 8004f84:	4b4a      	ldr	r3, [pc, #296]	; (80050b0 <__kernel_rem_pio2+0x340>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	4680      	mov	r8, r0
 8004f8a:	4689      	mov	r9, r1
 8004f8c:	f7fb fae0 	bl	8000550 <__aeabi_dmul>
 8004f90:	4602      	mov	r2, r0
 8004f92:	460b      	mov	r3, r1
 8004f94:	4630      	mov	r0, r6
 8004f96:	4639      	mov	r1, r7
 8004f98:	f7fb f922 	bl	80001e0 <__aeabi_dsub>
 8004f9c:	f7fb fd88 	bl	8000ab0 <__aeabi_d2iz>
 8004fa0:	9b02      	ldr	r3, [sp, #8]
 8004fa2:	f843 0b04 	str.w	r0, [r3], #4
 8004fa6:	3d01      	subs	r5, #1
 8004fa8:	9302      	str	r3, [sp, #8]
 8004faa:	ab70      	add	r3, sp, #448	; 0x1c0
 8004fac:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb4:	4640      	mov	r0, r8
 8004fb6:	4649      	mov	r1, r9
 8004fb8:	f7fb f914 	bl	80001e4 <__adddf3>
 8004fbc:	4606      	mov	r6, r0
 8004fbe:	460f      	mov	r7, r1
 8004fc0:	e75b      	b.n	8004e7a <__kernel_rem_pio2+0x10a>
 8004fc2:	d105      	bne.n	8004fd0 <__kernel_rem_pio2+0x260>
 8004fc4:	1e63      	subs	r3, r4, #1
 8004fc6:	aa0c      	add	r2, sp, #48	; 0x30
 8004fc8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004fcc:	15c3      	asrs	r3, r0, #23
 8004fce:	e79b      	b.n	8004f08 <__kernel_rem_pio2+0x198>
 8004fd0:	4b38      	ldr	r3, [pc, #224]	; (80050b4 <__kernel_rem_pio2+0x344>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f7fb fd42 	bl	8000a5c <__aeabi_dcmpge>
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	d139      	bne.n	8005050 <__kernel_rem_pio2+0x2e0>
 8004fdc:	9002      	str	r0, [sp, #8]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	4630      	mov	r0, r6
 8004fe4:	4639      	mov	r1, r7
 8004fe6:	f7fb fd1b 	bl	8000a20 <__aeabi_dcmpeq>
 8004fea:	2800      	cmp	r0, #0
 8004fec:	f000 80b4 	beq.w	8005158 <__kernel_rem_pio2+0x3e8>
 8004ff0:	f104 3bff 	add.w	fp, r4, #4294967295
 8004ff4:	465b      	mov	r3, fp
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	9904      	ldr	r1, [sp, #16]
 8004ffa:	428b      	cmp	r3, r1
 8004ffc:	da65      	bge.n	80050ca <__kernel_rem_pio2+0x35a>
 8004ffe:	2a00      	cmp	r2, #0
 8005000:	d07b      	beq.n	80050fa <__kernel_rem_pio2+0x38a>
 8005002:	ab0c      	add	r3, sp, #48	; 0x30
 8005004:	f1aa 0a18 	sub.w	sl, sl, #24
 8005008:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 80a0 	beq.w	8005152 <__kernel_rem_pio2+0x3e2>
 8005012:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8005098 <__kernel_rem_pio2+0x328>
 8005016:	4650      	mov	r0, sl
 8005018:	f000 fb3a 	bl	8005690 <scalbn>
 800501c:	4f23      	ldr	r7, [pc, #140]	; (80050ac <__kernel_rem_pio2+0x33c>)
 800501e:	ec55 4b10 	vmov	r4, r5, d0
 8005022:	46d8      	mov	r8, fp
 8005024:	2600      	movs	r6, #0
 8005026:	f1b8 0f00 	cmp.w	r8, #0
 800502a:	f280 80cf 	bge.w	80051cc <__kernel_rem_pio2+0x45c>
 800502e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8005090 <__kernel_rem_pio2+0x320>
 8005032:	465f      	mov	r7, fp
 8005034:	f04f 0800 	mov.w	r8, #0
 8005038:	2f00      	cmp	r7, #0
 800503a:	f2c0 80fd 	blt.w	8005238 <__kernel_rem_pio2+0x4c8>
 800503e:	ab70      	add	r3, sp, #448	; 0x1c0
 8005040:	f8df a074 	ldr.w	sl, [pc, #116]	; 80050b8 <__kernel_rem_pio2+0x348>
 8005044:	ec55 4b18 	vmov	r4, r5, d8
 8005048:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800504c:	2600      	movs	r6, #0
 800504e:	e0e5      	b.n	800521c <__kernel_rem_pio2+0x4ac>
 8005050:	2302      	movs	r3, #2
 8005052:	9302      	str	r3, [sp, #8]
 8005054:	e75c      	b.n	8004f10 <__kernel_rem_pio2+0x1a0>
 8005056:	f8db 3000 	ldr.w	r3, [fp]
 800505a:	b955      	cbnz	r5, 8005072 <__kernel_rem_pio2+0x302>
 800505c:	b123      	cbz	r3, 8005068 <__kernel_rem_pio2+0x2f8>
 800505e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005062:	f8cb 3000 	str.w	r3, [fp]
 8005066:	2301      	movs	r3, #1
 8005068:	3201      	adds	r2, #1
 800506a:	f10b 0b04 	add.w	fp, fp, #4
 800506e:	461d      	mov	r5, r3
 8005070:	e755      	b.n	8004f1e <__kernel_rem_pio2+0x1ae>
 8005072:	1acb      	subs	r3, r1, r3
 8005074:	f8cb 3000 	str.w	r3, [fp]
 8005078:	462b      	mov	r3, r5
 800507a:	e7f5      	b.n	8005068 <__kernel_rem_pio2+0x2f8>
 800507c:	1e62      	subs	r2, r4, #1
 800507e:	ab0c      	add	r3, sp, #48	; 0x30
 8005080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005084:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005088:	a90c      	add	r1, sp, #48	; 0x30
 800508a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800508e:	e754      	b.n	8004f3a <__kernel_rem_pio2+0x1ca>
	...
 800509c:	3ff00000 	.word	0x3ff00000
 80050a0:	080059a0 	.word	0x080059a0
 80050a4:	40200000 	.word	0x40200000
 80050a8:	3ff00000 	.word	0x3ff00000
 80050ac:	3e700000 	.word	0x3e700000
 80050b0:	41700000 	.word	0x41700000
 80050b4:	3fe00000 	.word	0x3fe00000
 80050b8:	08005960 	.word	0x08005960
 80050bc:	1e62      	subs	r2, r4, #1
 80050be:	ab0c      	add	r3, sp, #48	; 0x30
 80050c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80050c8:	e7de      	b.n	8005088 <__kernel_rem_pio2+0x318>
 80050ca:	a90c      	add	r1, sp, #48	; 0x30
 80050cc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80050d0:	3b01      	subs	r3, #1
 80050d2:	430a      	orrs	r2, r1
 80050d4:	e790      	b.n	8004ff8 <__kernel_rem_pio2+0x288>
 80050d6:	3301      	adds	r3, #1
 80050d8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80050dc:	2900      	cmp	r1, #0
 80050de:	d0fa      	beq.n	80050d6 <__kernel_rem_pio2+0x366>
 80050e0:	9a08      	ldr	r2, [sp, #32]
 80050e2:	18e3      	adds	r3, r4, r3
 80050e4:	18a6      	adds	r6, r4, r2
 80050e6:	aa20      	add	r2, sp, #128	; 0x80
 80050e8:	1c65      	adds	r5, r4, #1
 80050ea:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80050ee:	9302      	str	r3, [sp, #8]
 80050f0:	9b02      	ldr	r3, [sp, #8]
 80050f2:	42ab      	cmp	r3, r5
 80050f4:	da04      	bge.n	8005100 <__kernel_rem_pio2+0x390>
 80050f6:	461c      	mov	r4, r3
 80050f8:	e6b5      	b.n	8004e66 <__kernel_rem_pio2+0xf6>
 80050fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050fc:	2301      	movs	r3, #1
 80050fe:	e7eb      	b.n	80050d8 <__kernel_rem_pio2+0x368>
 8005100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005102:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005106:	f7fb f9b9 	bl	800047c <__aeabi_i2d>
 800510a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800510e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005110:	46b3      	mov	fp, r6
 8005112:	461c      	mov	r4, r3
 8005114:	2700      	movs	r7, #0
 8005116:	f04f 0800 	mov.w	r8, #0
 800511a:	f04f 0900 	mov.w	r9, #0
 800511e:	9b06      	ldr	r3, [sp, #24]
 8005120:	429f      	cmp	r7, r3
 8005122:	dd06      	ble.n	8005132 <__kernel_rem_pio2+0x3c2>
 8005124:	ab70      	add	r3, sp, #448	; 0x1c0
 8005126:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800512a:	e9c3 8900 	strd	r8, r9, [r3]
 800512e:	3501      	adds	r5, #1
 8005130:	e7de      	b.n	80050f0 <__kernel_rem_pio2+0x380>
 8005132:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005136:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800513a:	f7fb fa09 	bl	8000550 <__aeabi_dmul>
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	4640      	mov	r0, r8
 8005144:	4649      	mov	r1, r9
 8005146:	f7fb f84d 	bl	80001e4 <__adddf3>
 800514a:	3701      	adds	r7, #1
 800514c:	4680      	mov	r8, r0
 800514e:	4689      	mov	r9, r1
 8005150:	e7e5      	b.n	800511e <__kernel_rem_pio2+0x3ae>
 8005152:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005156:	e754      	b.n	8005002 <__kernel_rem_pio2+0x292>
 8005158:	ec47 6b10 	vmov	d0, r6, r7
 800515c:	f1ca 0000 	rsb	r0, sl, #0
 8005160:	f000 fa96 	bl	8005690 <scalbn>
 8005164:	ec57 6b10 	vmov	r6, r7, d0
 8005168:	4b9f      	ldr	r3, [pc, #636]	; (80053e8 <__kernel_rem_pio2+0x678>)
 800516a:	ee10 0a10 	vmov	r0, s0
 800516e:	2200      	movs	r2, #0
 8005170:	4639      	mov	r1, r7
 8005172:	f7fb fc73 	bl	8000a5c <__aeabi_dcmpge>
 8005176:	b300      	cbz	r0, 80051ba <__kernel_rem_pio2+0x44a>
 8005178:	4b9c      	ldr	r3, [pc, #624]	; (80053ec <__kernel_rem_pio2+0x67c>)
 800517a:	2200      	movs	r2, #0
 800517c:	4630      	mov	r0, r6
 800517e:	4639      	mov	r1, r7
 8005180:	f7fb f9e6 	bl	8000550 <__aeabi_dmul>
 8005184:	f7fb fc94 	bl	8000ab0 <__aeabi_d2iz>
 8005188:	4605      	mov	r5, r0
 800518a:	f7fb f977 	bl	800047c <__aeabi_i2d>
 800518e:	4b96      	ldr	r3, [pc, #600]	; (80053e8 <__kernel_rem_pio2+0x678>)
 8005190:	2200      	movs	r2, #0
 8005192:	f7fb f9dd 	bl	8000550 <__aeabi_dmul>
 8005196:	460b      	mov	r3, r1
 8005198:	4602      	mov	r2, r0
 800519a:	4639      	mov	r1, r7
 800519c:	4630      	mov	r0, r6
 800519e:	f7fb f81f 	bl	80001e0 <__aeabi_dsub>
 80051a2:	f7fb fc85 	bl	8000ab0 <__aeabi_d2iz>
 80051a6:	f104 0b01 	add.w	fp, r4, #1
 80051aa:	ab0c      	add	r3, sp, #48	; 0x30
 80051ac:	f10a 0a18 	add.w	sl, sl, #24
 80051b0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80051b4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80051b8:	e72b      	b.n	8005012 <__kernel_rem_pio2+0x2a2>
 80051ba:	4630      	mov	r0, r6
 80051bc:	4639      	mov	r1, r7
 80051be:	f7fb fc77 	bl	8000ab0 <__aeabi_d2iz>
 80051c2:	ab0c      	add	r3, sp, #48	; 0x30
 80051c4:	46a3      	mov	fp, r4
 80051c6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80051ca:	e722      	b.n	8005012 <__kernel_rem_pio2+0x2a2>
 80051cc:	ab70      	add	r3, sp, #448	; 0x1c0
 80051ce:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80051d2:	ab0c      	add	r3, sp, #48	; 0x30
 80051d4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80051d8:	f7fb f950 	bl	800047c <__aeabi_i2d>
 80051dc:	4622      	mov	r2, r4
 80051de:	462b      	mov	r3, r5
 80051e0:	f7fb f9b6 	bl	8000550 <__aeabi_dmul>
 80051e4:	4632      	mov	r2, r6
 80051e6:	e9c9 0100 	strd	r0, r1, [r9]
 80051ea:	463b      	mov	r3, r7
 80051ec:	4620      	mov	r0, r4
 80051ee:	4629      	mov	r1, r5
 80051f0:	f7fb f9ae 	bl	8000550 <__aeabi_dmul>
 80051f4:	f108 38ff 	add.w	r8, r8, #4294967295
 80051f8:	4604      	mov	r4, r0
 80051fa:	460d      	mov	r5, r1
 80051fc:	e713      	b.n	8005026 <__kernel_rem_pio2+0x2b6>
 80051fe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005202:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8005206:	f7fb f9a3 	bl	8000550 <__aeabi_dmul>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	4620      	mov	r0, r4
 8005210:	4629      	mov	r1, r5
 8005212:	f7fa ffe7 	bl	80001e4 <__adddf3>
 8005216:	3601      	adds	r6, #1
 8005218:	4604      	mov	r4, r0
 800521a:	460d      	mov	r5, r1
 800521c:	9b04      	ldr	r3, [sp, #16]
 800521e:	429e      	cmp	r6, r3
 8005220:	dc01      	bgt.n	8005226 <__kernel_rem_pio2+0x4b6>
 8005222:	45b0      	cmp	r8, r6
 8005224:	daeb      	bge.n	80051fe <__kernel_rem_pio2+0x48e>
 8005226:	ab48      	add	r3, sp, #288	; 0x120
 8005228:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800522c:	e9c3 4500 	strd	r4, r5, [r3]
 8005230:	3f01      	subs	r7, #1
 8005232:	f108 0801 	add.w	r8, r8, #1
 8005236:	e6ff      	b.n	8005038 <__kernel_rem_pio2+0x2c8>
 8005238:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800523a:	2b02      	cmp	r3, #2
 800523c:	dc0b      	bgt.n	8005256 <__kernel_rem_pio2+0x4e6>
 800523e:	2b00      	cmp	r3, #0
 8005240:	dc6e      	bgt.n	8005320 <__kernel_rem_pio2+0x5b0>
 8005242:	d045      	beq.n	80052d0 <__kernel_rem_pio2+0x560>
 8005244:	9b07      	ldr	r3, [sp, #28]
 8005246:	f003 0007 	and.w	r0, r3, #7
 800524a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800524e:	ecbd 8b02 	vpop	{d8}
 8005252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005256:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005258:	2b03      	cmp	r3, #3
 800525a:	d1f3      	bne.n	8005244 <__kernel_rem_pio2+0x4d4>
 800525c:	ab48      	add	r3, sp, #288	; 0x120
 800525e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8005262:	46d0      	mov	r8, sl
 8005264:	46d9      	mov	r9, fp
 8005266:	f1b9 0f00 	cmp.w	r9, #0
 800526a:	f1a8 0808 	sub.w	r8, r8, #8
 800526e:	dc64      	bgt.n	800533a <__kernel_rem_pio2+0x5ca>
 8005270:	465c      	mov	r4, fp
 8005272:	2c01      	cmp	r4, #1
 8005274:	f1aa 0a08 	sub.w	sl, sl, #8
 8005278:	dc7e      	bgt.n	8005378 <__kernel_rem_pio2+0x608>
 800527a:	2000      	movs	r0, #0
 800527c:	2100      	movs	r1, #0
 800527e:	f1bb 0f01 	cmp.w	fp, #1
 8005282:	f300 8097 	bgt.w	80053b4 <__kernel_rem_pio2+0x644>
 8005286:	9b02      	ldr	r3, [sp, #8]
 8005288:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800528c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005290:	2b00      	cmp	r3, #0
 8005292:	f040 8099 	bne.w	80053c8 <__kernel_rem_pio2+0x658>
 8005296:	9b01      	ldr	r3, [sp, #4]
 8005298:	e9c3 5600 	strd	r5, r6, [r3]
 800529c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80052a0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80052a4:	e7ce      	b.n	8005244 <__kernel_rem_pio2+0x4d4>
 80052a6:	ab48      	add	r3, sp, #288	; 0x120
 80052a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80052ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b0:	f7fa ff98 	bl	80001e4 <__adddf3>
 80052b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80052b8:	f1bb 0f00 	cmp.w	fp, #0
 80052bc:	daf3      	bge.n	80052a6 <__kernel_rem_pio2+0x536>
 80052be:	9b02      	ldr	r3, [sp, #8]
 80052c0:	b113      	cbz	r3, 80052c8 <__kernel_rem_pio2+0x558>
 80052c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80052c6:	4619      	mov	r1, r3
 80052c8:	9b01      	ldr	r3, [sp, #4]
 80052ca:	e9c3 0100 	strd	r0, r1, [r3]
 80052ce:	e7b9      	b.n	8005244 <__kernel_rem_pio2+0x4d4>
 80052d0:	2000      	movs	r0, #0
 80052d2:	2100      	movs	r1, #0
 80052d4:	e7f0      	b.n	80052b8 <__kernel_rem_pio2+0x548>
 80052d6:	ab48      	add	r3, sp, #288	; 0x120
 80052d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80052dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e0:	f7fa ff80 	bl	80001e4 <__adddf3>
 80052e4:	3c01      	subs	r4, #1
 80052e6:	2c00      	cmp	r4, #0
 80052e8:	daf5      	bge.n	80052d6 <__kernel_rem_pio2+0x566>
 80052ea:	9b02      	ldr	r3, [sp, #8]
 80052ec:	b1e3      	cbz	r3, 8005328 <__kernel_rem_pio2+0x5b8>
 80052ee:	4602      	mov	r2, r0
 80052f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80052f4:	9c01      	ldr	r4, [sp, #4]
 80052f6:	e9c4 2300 	strd	r2, r3, [r4]
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005302:	f7fa ff6d 	bl	80001e0 <__aeabi_dsub>
 8005306:	ad4a      	add	r5, sp, #296	; 0x128
 8005308:	2401      	movs	r4, #1
 800530a:	45a3      	cmp	fp, r4
 800530c:	da0f      	bge.n	800532e <__kernel_rem_pio2+0x5be>
 800530e:	9b02      	ldr	r3, [sp, #8]
 8005310:	b113      	cbz	r3, 8005318 <__kernel_rem_pio2+0x5a8>
 8005312:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005316:	4619      	mov	r1, r3
 8005318:	9b01      	ldr	r3, [sp, #4]
 800531a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800531e:	e791      	b.n	8005244 <__kernel_rem_pio2+0x4d4>
 8005320:	465c      	mov	r4, fp
 8005322:	2000      	movs	r0, #0
 8005324:	2100      	movs	r1, #0
 8005326:	e7de      	b.n	80052e6 <__kernel_rem_pio2+0x576>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	e7e2      	b.n	80052f4 <__kernel_rem_pio2+0x584>
 800532e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8005332:	f7fa ff57 	bl	80001e4 <__adddf3>
 8005336:	3401      	adds	r4, #1
 8005338:	e7e7      	b.n	800530a <__kernel_rem_pio2+0x59a>
 800533a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800533e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8005342:	4620      	mov	r0, r4
 8005344:	4632      	mov	r2, r6
 8005346:	463b      	mov	r3, r7
 8005348:	4629      	mov	r1, r5
 800534a:	f7fa ff4b 	bl	80001e4 <__adddf3>
 800534e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005352:	4602      	mov	r2, r0
 8005354:	460b      	mov	r3, r1
 8005356:	4620      	mov	r0, r4
 8005358:	4629      	mov	r1, r5
 800535a:	f7fa ff41 	bl	80001e0 <__aeabi_dsub>
 800535e:	4632      	mov	r2, r6
 8005360:	463b      	mov	r3, r7
 8005362:	f7fa ff3f 	bl	80001e4 <__adddf3>
 8005366:	ed9d 7b04 	vldr	d7, [sp, #16]
 800536a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800536e:	ed88 7b00 	vstr	d7, [r8]
 8005372:	f109 39ff 	add.w	r9, r9, #4294967295
 8005376:	e776      	b.n	8005266 <__kernel_rem_pio2+0x4f6>
 8005378:	e9da 8900 	ldrd	r8, r9, [sl]
 800537c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005380:	4640      	mov	r0, r8
 8005382:	4632      	mov	r2, r6
 8005384:	463b      	mov	r3, r7
 8005386:	4649      	mov	r1, r9
 8005388:	f7fa ff2c 	bl	80001e4 <__adddf3>
 800538c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	4640      	mov	r0, r8
 8005396:	4649      	mov	r1, r9
 8005398:	f7fa ff22 	bl	80001e0 <__aeabi_dsub>
 800539c:	4632      	mov	r2, r6
 800539e:	463b      	mov	r3, r7
 80053a0:	f7fa ff20 	bl	80001e4 <__adddf3>
 80053a4:	ed9d 7b04 	vldr	d7, [sp, #16]
 80053a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80053ac:	ed8a 7b00 	vstr	d7, [sl]
 80053b0:	3c01      	subs	r4, #1
 80053b2:	e75e      	b.n	8005272 <__kernel_rem_pio2+0x502>
 80053b4:	ab48      	add	r3, sp, #288	; 0x120
 80053b6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80053ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053be:	f7fa ff11 	bl	80001e4 <__adddf3>
 80053c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80053c6:	e75a      	b.n	800527e <__kernel_rem_pio2+0x50e>
 80053c8:	9b01      	ldr	r3, [sp, #4]
 80053ca:	9a01      	ldr	r2, [sp, #4]
 80053cc:	601d      	str	r5, [r3, #0]
 80053ce:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80053d2:	605c      	str	r4, [r3, #4]
 80053d4:	609f      	str	r7, [r3, #8]
 80053d6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80053da:	60d3      	str	r3, [r2, #12]
 80053dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053e0:	6110      	str	r0, [r2, #16]
 80053e2:	6153      	str	r3, [r2, #20]
 80053e4:	e72e      	b.n	8005244 <__kernel_rem_pio2+0x4d4>
 80053e6:	bf00      	nop
 80053e8:	41700000 	.word	0x41700000
 80053ec:	3e700000 	.word	0x3e700000

080053f0 <__kernel_sin>:
 80053f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f4:	ed2d 8b04 	vpush	{d8-d9}
 80053f8:	eeb0 8a41 	vmov.f32	s16, s2
 80053fc:	eef0 8a61 	vmov.f32	s17, s3
 8005400:	ec55 4b10 	vmov	r4, r5, d0
 8005404:	b083      	sub	sp, #12
 8005406:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800540a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800540e:	9001      	str	r0, [sp, #4]
 8005410:	da06      	bge.n	8005420 <__kernel_sin+0x30>
 8005412:	ee10 0a10 	vmov	r0, s0
 8005416:	4629      	mov	r1, r5
 8005418:	f7fb fb4a 	bl	8000ab0 <__aeabi_d2iz>
 800541c:	2800      	cmp	r0, #0
 800541e:	d051      	beq.n	80054c4 <__kernel_sin+0xd4>
 8005420:	4622      	mov	r2, r4
 8005422:	462b      	mov	r3, r5
 8005424:	4620      	mov	r0, r4
 8005426:	4629      	mov	r1, r5
 8005428:	f7fb f892 	bl	8000550 <__aeabi_dmul>
 800542c:	4682      	mov	sl, r0
 800542e:	468b      	mov	fp, r1
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4620      	mov	r0, r4
 8005436:	4629      	mov	r1, r5
 8005438:	f7fb f88a 	bl	8000550 <__aeabi_dmul>
 800543c:	a341      	add	r3, pc, #260	; (adr r3, 8005544 <__kernel_sin+0x154>)
 800543e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005442:	4680      	mov	r8, r0
 8005444:	4689      	mov	r9, r1
 8005446:	4650      	mov	r0, sl
 8005448:	4659      	mov	r1, fp
 800544a:	f7fb f881 	bl	8000550 <__aeabi_dmul>
 800544e:	a33f      	add	r3, pc, #252	; (adr r3, 800554c <__kernel_sin+0x15c>)
 8005450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005454:	f7fa fec4 	bl	80001e0 <__aeabi_dsub>
 8005458:	4652      	mov	r2, sl
 800545a:	465b      	mov	r3, fp
 800545c:	f7fb f878 	bl	8000550 <__aeabi_dmul>
 8005460:	a33c      	add	r3, pc, #240	; (adr r3, 8005554 <__kernel_sin+0x164>)
 8005462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005466:	f7fa febd 	bl	80001e4 <__adddf3>
 800546a:	4652      	mov	r2, sl
 800546c:	465b      	mov	r3, fp
 800546e:	f7fb f86f 	bl	8000550 <__aeabi_dmul>
 8005472:	a33a      	add	r3, pc, #232	; (adr r3, 800555c <__kernel_sin+0x16c>)
 8005474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005478:	f7fa feb2 	bl	80001e0 <__aeabi_dsub>
 800547c:	4652      	mov	r2, sl
 800547e:	465b      	mov	r3, fp
 8005480:	f7fb f866 	bl	8000550 <__aeabi_dmul>
 8005484:	a337      	add	r3, pc, #220	; (adr r3, 8005564 <__kernel_sin+0x174>)
 8005486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548a:	f7fa feab 	bl	80001e4 <__adddf3>
 800548e:	9b01      	ldr	r3, [sp, #4]
 8005490:	4606      	mov	r6, r0
 8005492:	460f      	mov	r7, r1
 8005494:	b9eb      	cbnz	r3, 80054d2 <__kernel_sin+0xe2>
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	4650      	mov	r0, sl
 800549c:	4659      	mov	r1, fp
 800549e:	f7fb f857 	bl	8000550 <__aeabi_dmul>
 80054a2:	a325      	add	r3, pc, #148	; (adr r3, 8005538 <__kernel_sin+0x148>)
 80054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a8:	f7fa fe9a 	bl	80001e0 <__aeabi_dsub>
 80054ac:	4642      	mov	r2, r8
 80054ae:	464b      	mov	r3, r9
 80054b0:	f7fb f84e 	bl	8000550 <__aeabi_dmul>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	4620      	mov	r0, r4
 80054ba:	4629      	mov	r1, r5
 80054bc:	f7fa fe92 	bl	80001e4 <__adddf3>
 80054c0:	4604      	mov	r4, r0
 80054c2:	460d      	mov	r5, r1
 80054c4:	ec45 4b10 	vmov	d0, r4, r5
 80054c8:	b003      	add	sp, #12
 80054ca:	ecbd 8b04 	vpop	{d8-d9}
 80054ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d2:	4b1b      	ldr	r3, [pc, #108]	; (8005540 <__kernel_sin+0x150>)
 80054d4:	ec51 0b18 	vmov	r0, r1, d8
 80054d8:	2200      	movs	r2, #0
 80054da:	f7fb f839 	bl	8000550 <__aeabi_dmul>
 80054de:	4632      	mov	r2, r6
 80054e0:	ec41 0b19 	vmov	d9, r0, r1
 80054e4:	463b      	mov	r3, r7
 80054e6:	4640      	mov	r0, r8
 80054e8:	4649      	mov	r1, r9
 80054ea:	f7fb f831 	bl	8000550 <__aeabi_dmul>
 80054ee:	4602      	mov	r2, r0
 80054f0:	460b      	mov	r3, r1
 80054f2:	ec51 0b19 	vmov	r0, r1, d9
 80054f6:	f7fa fe73 	bl	80001e0 <__aeabi_dsub>
 80054fa:	4652      	mov	r2, sl
 80054fc:	465b      	mov	r3, fp
 80054fe:	f7fb f827 	bl	8000550 <__aeabi_dmul>
 8005502:	ec53 2b18 	vmov	r2, r3, d8
 8005506:	f7fa fe6b 	bl	80001e0 <__aeabi_dsub>
 800550a:	a30b      	add	r3, pc, #44	; (adr r3, 8005538 <__kernel_sin+0x148>)
 800550c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005510:	4606      	mov	r6, r0
 8005512:	460f      	mov	r7, r1
 8005514:	4640      	mov	r0, r8
 8005516:	4649      	mov	r1, r9
 8005518:	f7fb f81a 	bl	8000550 <__aeabi_dmul>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4630      	mov	r0, r6
 8005522:	4639      	mov	r1, r7
 8005524:	f7fa fe5e 	bl	80001e4 <__adddf3>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	4620      	mov	r0, r4
 800552e:	4629      	mov	r1, r5
 8005530:	f7fa fe56 	bl	80001e0 <__aeabi_dsub>
 8005534:	e7c4      	b.n	80054c0 <__kernel_sin+0xd0>
 8005536:	bf00      	nop
 8005538:	55555549 	.word	0x55555549
 800553c:	3fc55555 	.word	0x3fc55555
 8005540:	3fe00000 	.word	0x3fe00000
 8005544:	5acfd57c 	.word	0x5acfd57c
 8005548:	3de5d93a 	.word	0x3de5d93a
 800554c:	8a2b9ceb 	.word	0x8a2b9ceb
 8005550:	3e5ae5e6 	.word	0x3e5ae5e6
 8005554:	57b1fe7d 	.word	0x57b1fe7d
 8005558:	3ec71de3 	.word	0x3ec71de3
 800555c:	19c161d5 	.word	0x19c161d5
 8005560:	3f2a01a0 	.word	0x3f2a01a0
 8005564:	1110f8a6 	.word	0x1110f8a6
 8005568:	3f811111 	.word	0x3f811111

0800556c <fabs>:
 800556c:	ec51 0b10 	vmov	r0, r1, d0
 8005570:	ee10 2a10 	vmov	r2, s0
 8005574:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005578:	ec43 2b10 	vmov	d0, r2, r3
 800557c:	4770      	bx	lr
	...

08005580 <floor>:
 8005580:	ec51 0b10 	vmov	r0, r1, d0
 8005584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005588:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800558c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005590:	2e13      	cmp	r6, #19
 8005592:	ee10 5a10 	vmov	r5, s0
 8005596:	ee10 8a10 	vmov	r8, s0
 800559a:	460c      	mov	r4, r1
 800559c:	dc32      	bgt.n	8005604 <floor+0x84>
 800559e:	2e00      	cmp	r6, #0
 80055a0:	da14      	bge.n	80055cc <floor+0x4c>
 80055a2:	a333      	add	r3, pc, #204	; (adr r3, 8005670 <floor+0xf0>)
 80055a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a8:	f7fa fe1c 	bl	80001e4 <__adddf3>
 80055ac:	2200      	movs	r2, #0
 80055ae:	2300      	movs	r3, #0
 80055b0:	f7fb fa5e 	bl	8000a70 <__aeabi_dcmpgt>
 80055b4:	b138      	cbz	r0, 80055c6 <floor+0x46>
 80055b6:	2c00      	cmp	r4, #0
 80055b8:	da57      	bge.n	800566a <floor+0xea>
 80055ba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80055be:	431d      	orrs	r5, r3
 80055c0:	d001      	beq.n	80055c6 <floor+0x46>
 80055c2:	4c2d      	ldr	r4, [pc, #180]	; (8005678 <floor+0xf8>)
 80055c4:	2500      	movs	r5, #0
 80055c6:	4621      	mov	r1, r4
 80055c8:	4628      	mov	r0, r5
 80055ca:	e025      	b.n	8005618 <floor+0x98>
 80055cc:	4f2b      	ldr	r7, [pc, #172]	; (800567c <floor+0xfc>)
 80055ce:	4137      	asrs	r7, r6
 80055d0:	ea01 0307 	and.w	r3, r1, r7
 80055d4:	4303      	orrs	r3, r0
 80055d6:	d01f      	beq.n	8005618 <floor+0x98>
 80055d8:	a325      	add	r3, pc, #148	; (adr r3, 8005670 <floor+0xf0>)
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	f7fa fe01 	bl	80001e4 <__adddf3>
 80055e2:	2200      	movs	r2, #0
 80055e4:	2300      	movs	r3, #0
 80055e6:	f7fb fa43 	bl	8000a70 <__aeabi_dcmpgt>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	d0eb      	beq.n	80055c6 <floor+0x46>
 80055ee:	2c00      	cmp	r4, #0
 80055f0:	bfbe      	ittt	lt
 80055f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80055f6:	fa43 f606 	asrlt.w	r6, r3, r6
 80055fa:	19a4      	addlt	r4, r4, r6
 80055fc:	ea24 0407 	bic.w	r4, r4, r7
 8005600:	2500      	movs	r5, #0
 8005602:	e7e0      	b.n	80055c6 <floor+0x46>
 8005604:	2e33      	cmp	r6, #51	; 0x33
 8005606:	dd0b      	ble.n	8005620 <floor+0xa0>
 8005608:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800560c:	d104      	bne.n	8005618 <floor+0x98>
 800560e:	ee10 2a10 	vmov	r2, s0
 8005612:	460b      	mov	r3, r1
 8005614:	f7fa fde6 	bl	80001e4 <__adddf3>
 8005618:	ec41 0b10 	vmov	d0, r0, r1
 800561c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005620:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005624:	f04f 33ff 	mov.w	r3, #4294967295
 8005628:	fa23 f707 	lsr.w	r7, r3, r7
 800562c:	4207      	tst	r7, r0
 800562e:	d0f3      	beq.n	8005618 <floor+0x98>
 8005630:	a30f      	add	r3, pc, #60	; (adr r3, 8005670 <floor+0xf0>)
 8005632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005636:	f7fa fdd5 	bl	80001e4 <__adddf3>
 800563a:	2200      	movs	r2, #0
 800563c:	2300      	movs	r3, #0
 800563e:	f7fb fa17 	bl	8000a70 <__aeabi_dcmpgt>
 8005642:	2800      	cmp	r0, #0
 8005644:	d0bf      	beq.n	80055c6 <floor+0x46>
 8005646:	2c00      	cmp	r4, #0
 8005648:	da02      	bge.n	8005650 <floor+0xd0>
 800564a:	2e14      	cmp	r6, #20
 800564c:	d103      	bne.n	8005656 <floor+0xd6>
 800564e:	3401      	adds	r4, #1
 8005650:	ea25 0507 	bic.w	r5, r5, r7
 8005654:	e7b7      	b.n	80055c6 <floor+0x46>
 8005656:	2301      	movs	r3, #1
 8005658:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800565c:	fa03 f606 	lsl.w	r6, r3, r6
 8005660:	4435      	add	r5, r6
 8005662:	4545      	cmp	r5, r8
 8005664:	bf38      	it	cc
 8005666:	18e4      	addcc	r4, r4, r3
 8005668:	e7f2      	b.n	8005650 <floor+0xd0>
 800566a:	2500      	movs	r5, #0
 800566c:	462c      	mov	r4, r5
 800566e:	e7aa      	b.n	80055c6 <floor+0x46>
 8005670:	8800759c 	.word	0x8800759c
 8005674:	7e37e43c 	.word	0x7e37e43c
 8005678:	bff00000 	.word	0xbff00000
 800567c:	000fffff 	.word	0x000fffff

08005680 <nan>:
 8005680:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005688 <nan+0x8>
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	00000000 	.word	0x00000000
 800568c:	7ff80000 	.word	0x7ff80000

08005690 <scalbn>:
 8005690:	b570      	push	{r4, r5, r6, lr}
 8005692:	ec55 4b10 	vmov	r4, r5, d0
 8005696:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800569a:	4606      	mov	r6, r0
 800569c:	462b      	mov	r3, r5
 800569e:	b99a      	cbnz	r2, 80056c8 <scalbn+0x38>
 80056a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80056a4:	4323      	orrs	r3, r4
 80056a6:	d036      	beq.n	8005716 <scalbn+0x86>
 80056a8:	4b39      	ldr	r3, [pc, #228]	; (8005790 <scalbn+0x100>)
 80056aa:	4629      	mov	r1, r5
 80056ac:	ee10 0a10 	vmov	r0, s0
 80056b0:	2200      	movs	r2, #0
 80056b2:	f7fa ff4d 	bl	8000550 <__aeabi_dmul>
 80056b6:	4b37      	ldr	r3, [pc, #220]	; (8005794 <scalbn+0x104>)
 80056b8:	429e      	cmp	r6, r3
 80056ba:	4604      	mov	r4, r0
 80056bc:	460d      	mov	r5, r1
 80056be:	da10      	bge.n	80056e2 <scalbn+0x52>
 80056c0:	a32b      	add	r3, pc, #172	; (adr r3, 8005770 <scalbn+0xe0>)
 80056c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c6:	e03a      	b.n	800573e <scalbn+0xae>
 80056c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80056cc:	428a      	cmp	r2, r1
 80056ce:	d10c      	bne.n	80056ea <scalbn+0x5a>
 80056d0:	ee10 2a10 	vmov	r2, s0
 80056d4:	4620      	mov	r0, r4
 80056d6:	4629      	mov	r1, r5
 80056d8:	f7fa fd84 	bl	80001e4 <__adddf3>
 80056dc:	4604      	mov	r4, r0
 80056de:	460d      	mov	r5, r1
 80056e0:	e019      	b.n	8005716 <scalbn+0x86>
 80056e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80056e6:	460b      	mov	r3, r1
 80056e8:	3a36      	subs	r2, #54	; 0x36
 80056ea:	4432      	add	r2, r6
 80056ec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80056f0:	428a      	cmp	r2, r1
 80056f2:	dd08      	ble.n	8005706 <scalbn+0x76>
 80056f4:	2d00      	cmp	r5, #0
 80056f6:	a120      	add	r1, pc, #128	; (adr r1, 8005778 <scalbn+0xe8>)
 80056f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056fc:	da1c      	bge.n	8005738 <scalbn+0xa8>
 80056fe:	a120      	add	r1, pc, #128	; (adr r1, 8005780 <scalbn+0xf0>)
 8005700:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005704:	e018      	b.n	8005738 <scalbn+0xa8>
 8005706:	2a00      	cmp	r2, #0
 8005708:	dd08      	ble.n	800571c <scalbn+0x8c>
 800570a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800570e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005712:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005716:	ec45 4b10 	vmov	d0, r4, r5
 800571a:	bd70      	pop	{r4, r5, r6, pc}
 800571c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005720:	da19      	bge.n	8005756 <scalbn+0xc6>
 8005722:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005726:	429e      	cmp	r6, r3
 8005728:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800572c:	dd0a      	ble.n	8005744 <scalbn+0xb4>
 800572e:	a112      	add	r1, pc, #72	; (adr r1, 8005778 <scalbn+0xe8>)
 8005730:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1e2      	bne.n	80056fe <scalbn+0x6e>
 8005738:	a30f      	add	r3, pc, #60	; (adr r3, 8005778 <scalbn+0xe8>)
 800573a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573e:	f7fa ff07 	bl	8000550 <__aeabi_dmul>
 8005742:	e7cb      	b.n	80056dc <scalbn+0x4c>
 8005744:	a10a      	add	r1, pc, #40	; (adr r1, 8005770 <scalbn+0xe0>)
 8005746:	e9d1 0100 	ldrd	r0, r1, [r1]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0b8      	beq.n	80056c0 <scalbn+0x30>
 800574e:	a10e      	add	r1, pc, #56	; (adr r1, 8005788 <scalbn+0xf8>)
 8005750:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005754:	e7b4      	b.n	80056c0 <scalbn+0x30>
 8005756:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800575a:	3236      	adds	r2, #54	; 0x36
 800575c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005760:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005764:	4620      	mov	r0, r4
 8005766:	4b0c      	ldr	r3, [pc, #48]	; (8005798 <scalbn+0x108>)
 8005768:	2200      	movs	r2, #0
 800576a:	e7e8      	b.n	800573e <scalbn+0xae>
 800576c:	f3af 8000 	nop.w
 8005770:	c2f8f359 	.word	0xc2f8f359
 8005774:	01a56e1f 	.word	0x01a56e1f
 8005778:	8800759c 	.word	0x8800759c
 800577c:	7e37e43c 	.word	0x7e37e43c
 8005780:	8800759c 	.word	0x8800759c
 8005784:	fe37e43c 	.word	0xfe37e43c
 8005788:	c2f8f359 	.word	0xc2f8f359
 800578c:	81a56e1f 	.word	0x81a56e1f
 8005790:	43500000 	.word	0x43500000
 8005794:	ffff3cb0 	.word	0xffff3cb0
 8005798:	3c900000 	.word	0x3c900000

0800579c <_init>:
 800579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579e:	bf00      	nop
 80057a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057a2:	bc08      	pop	{r3}
 80057a4:	469e      	mov	lr, r3
 80057a6:	4770      	bx	lr

080057a8 <_fini>:
 80057a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057aa:	bf00      	nop
 80057ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ae:	bc08      	pop	{r3}
 80057b0:	469e      	mov	lr, r3
 80057b2:	4770      	bx	lr
